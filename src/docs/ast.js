/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
import Node from './clases/Node';
export var ast = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,16],$V1=[1,22],$V2=[1,29],$V3=[1,17],$V4=[1,30],$V5=[1,31],$V6=[1,34],$V7=[1,24],$V8=[1,25],$V9=[1,26],$Va=[1,27],$Vb=[1,28],$Vc=[1,32],$Vd=[2,5,7,8,28,57,58,92,93,98,99,100,107,132],$Ve=[1,48],$Vf=[1,49],$Vg=[1,50],$Vh=[1,51],$Vi=[1,52],$Vj=[1,53],$Vk=[2,5,7,8,12,28,57,58,69,70,71,92,93,96,97,98,99,100,107,132],$Vl=[1,60],$Vm=[1,63],$Vn=[9,76,77,78,79,80,81],$Vo=[2,176],$Vp=[1,66],$Vq=[1,71],$Vr=[1,72],$Vs=[1,73],$Vt=[1,70],$Vu=[2,5,7,8,12,28,57,58,69,70,71,90,92,93,96,97,98,99,100,107,132],$Vv=[19,103,104],$Vw=[2,56],$Vx=[1,81],$Vy=[13,19,103,104],$Vz=[2,64],$VA=[1,84],$VB=[1,108],$VC=[1,90],$VD=[1,100],$VE=[1,106],$VF=[1,99],$VG=[1,96],$VH=[1,98],$VI=[1,101],$VJ=[1,102],$VK=[1,103],$VL=[1,105],$VM=[1,132],$VN=[1,129],$VO=[1,130],$VP=[1,131],$VQ=[1,137],$VR=[9,12,13,14,19,31,48,49,52,76,77,78,79,80,81,103,104,105,106,109,110,112,114,115,116,118,119],$VS=[19,31],$VT=[1,147],$VU=[12,13,14,19,31,48,49,52,76,77,78,79,80,81,103,104,109,110,112,114,115,116,118,119],$VV=[1,156],$VW=[1,165],$VX=[1,162],$VY=[1,163],$VZ=[1,164],$V_=[1,166],$V$=[1,167],$V01=[1,160],$V11=[1,172],$V21=[1,173],$V31=[12,13,14,19,31,52,103,104,109,110],$V41=[12,13,14,19,31,52,103,104,109,110,112],$V51=[12,13,14,19,31,52,103,104,109,110,112,114,115,116],$V61=[12,13,14,19,31,48,49,52,103,104,109,110,112,114,115,116,118,119],$V71=[12,13,14,19,31,48,49,52,76,77,103,104,109,110,112,114,115,116,118,119],$V81=[1,190],$V91=[12,96,97],$Va1=[2,8,12,28,57,58,69,70,71,92,93,96,97,98,99,100,107,132],$Vb1=[1,219],$Vc1=[1,220],$Vd1=[2,32],$Ve1=[1,227],$Vf1=[1,230],$Vg1=[2,48],$Vh1=[9,10,12,13,19,31,49,103,104],$Vi1=[1,237],$Vj1=[9,10,12,13,19,31,49,51,103,104],$Vk1=[2,5,7,8,12,13,19,28,57,58,69,70,71,92,93,96,97,98,99,100,103,104,107,132],$Vl1=[9,12,13,14,19,31,48,49,52,76,77,78,79,80,81,103,104,105,106,109,110,112,114,115,116,118,119,132],$Vm1=[1,274],$Vn1=[12,13,14,19,31,48,49,52,76,77,79,80,81,103,104,109,110,112,114,115,116,118,119],$Vo1=[1,305],$Vp1=[13,31],$Vq1=[1,313],$Vr1=[1,312],$Vs1=[12,13],$Vt1=[2,5,7,8,12,28,57,58,69,70,71,92,93,98,99,100,107,132],$Vu1=[2,8,12,28,57,58,69,70,71,92,93,98,99,100,107,132];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"ini":3,"INSTRUCTIONSG":4,"EOF":5,"DEFTYPES":6,"restype":7,"id":8,"igual":9,"corchetea":10,"ATTRIB":11,"corchetec":12,"coma":13,"dospuntos":14,"TYPES":15,"INSTRUCTIONG":16,"FUNCTIONG":17,"DECLARATION":18,"puntocoma":19,"ASSIGMENTWITHTYPE":20,"IF":21,"SWITCH":22,"WHILE":23,"DOWHILE":24,"FOR":25,"PRINT":26,"CALLF":27,"resfunction":28,"parenta":29,"LISTAPARAMETROS":30,"parentc":31,"RETURNT":32,"BLOCKF":33,"FUNCTIONL":34,"BLOCK2F":35,"INSTRUCTIONSF":36,"INSTRUCTIONF":37,"INSTRUCTION":38,"TYPESF":39,"resvoid":40,"TYPE":41,"resinteger":42,"resboolean":43,"resstring":44,"resnumber":45,"resundefined":46,"resarray":47,"menor":48,"mayor":49,"MULTIDIMENSION":50,"llavea":51,"llavec":52,"LSPBETHA":53,"LISTAPARAMETROSPRIM":54,"LSALPHA":55,"TYPEVAR":56,"resconst":57,"reslet":58,"LISTID":59,"LISPBETHA":60,"LISTIDPRIM":61,"LISALPHA":62,"ASSVALUE":63,"EXPRT":64,"DECASSTYPE":65,"BLOCK":66,"BLOCK2":67,"INSTRUCTIONS":68,"resbreak":69,"rescontinue":70,"resreturn":71,"ASSIGNMENT":72,"IDVALOR":73,"OPERADOR":74,"DECINC":75,"suma":76,"resta":77,"potencia":78,"multiplicacion":79,"slash":80,"modulo":81,"CONTENTASWT":82,"IDVALOR2ASS":83,"ASSIGNMENTTYPE":84,"VALUETYPE":85,"ASSIGNMENTTYPEPRIM":86,"PARAMETROUNITARIO":87,"CELSE":88,"ELSE":89,"reselse":90,"IFF":91,"resif":92,"resswitch":93,"CASES":94,"DEFAULT":95,"rescase":96,"resdefault":97,"reswhile":98,"resdo":99,"resfor":100,"DEC":101,"FINON":102,"resof":103,"resin":104,"incremento":105,"decremento":106,"resprint":107,"DATAPRINT":108,"or":109,"quest":110,"EXPRT2":111,"and":112,"EXPR":113,"diferente":114,"identico":115,"referencias":116,"EXPR1":117,"mayorigual":118,"menorigual":119,"EXP":120,"EXP1":121,"EXP2":122,"not":123,"EXP3":124,"number":125,"cadena":126,"restrue":127,"resfalse":128,"resnull":129,"IDVALOR2":130,"ARREGLO":131,"punto":132,"respop":133,"reslength":134,"PARAMETERS":135,"PARAMETERSPRIM":136,"IDVALORASS":137,"respush":138,"GRAFICAR":139,"resgraficar_ts":140,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"restype",8:"id",9:"igual",10:"corchetea",12:"corchetec",13:"coma",14:"dospuntos",19:"puntocoma",28:"resfunction",29:"parenta",31:"parentc",40:"resvoid",42:"resinteger",43:"resboolean",44:"resstring",45:"resnumber",46:"resundefined",47:"resarray",48:"menor",49:"mayor",51:"llavea",52:"llavec",57:"resconst",58:"reslet",69:"resbreak",70:"rescontinue",71:"resreturn",76:"suma",77:"resta",78:"potencia",79:"multiplicacion",80:"slash",81:"modulo",90:"reselse",92:"resif",93:"resswitch",96:"rescase",97:"resdefault",98:"reswhile",99:"resdo",100:"resfor",103:"resof",104:"resin",105:"incremento",106:"decremento",107:"resprint",109:"or",110:"quest",112:"and",114:"diferente",115:"identico",116:"referencias",118:"mayorigual",119:"menorigual",123:"not",125:"number",126:"cadena",127:"restrue",128:"resfalse",129:"resnull",132:"punto",133:"respop",134:"reslength",138:"respush",140:"resgraficar_ts"},
productions_: [0,[3,2],[3,1],[6,6],[11,5],[11,3],[4,2],[4,1],[16,1],[16,2],[16,1],[16,1],[16,1],[16,1],[16,1],[16,2],[16,1],[16,2],[16,2],[16,1],[17,7],[17,6],[34,7],[34,6],[33,2],[35,2],[35,1],[36,2],[36,1],[37,1],[37,1],[32,2],[32,0],[39,1],[39,1],[41,1],[41,1],[41,1],[41,1],[41,1],[41,1],[15,4],[15,2],[15,1],[50,3],[50,2],[30,2],[54,2],[54,0],[53,3],[55,4],[56,1],[56,1],[18,2],[59,2],[61,2],[61,0],[60,2],[60,4],[62,3],[62,5],[63,2],[63,3],[63,2],[63,0],[66,2],[67,2],[67,1],[68,2],[68,1],[38,2],[38,1],[38,1],[38,1],[38,1],[38,2],[38,1],[38,2],[38,2],[38,2],[38,2],[38,3],[38,2],[38,1],[72,4],[72,2],[72,3],[74,1],[74,1],[74,1],[74,1],[74,1],[74,1],[20,2],[20,2],[20,2],[82,4],[82,2],[65,2],[84,4],[86,5],[86,1],[85,1],[85,1],[87,3],[21,2],[88,3],[88,1],[89,2],[89,0],[91,3],[22,6],[94,5],[94,4],[94,4],[94,3],[95,3],[95,2],[95,0],[23,3],[24,4],[25,9],[25,7],[101,1],[101,1],[101,0],[102,1],[102,1],[75,1],[75,1],[26,4],[108,3],[108,1],[64,3],[64,5],[64,1],[111,3],[111,1],[113,3],[113,3],[113,3],[113,1],[117,3],[117,3],[117,3],[117,3],[117,1],[120,3],[120,3],[120,1],[121,3],[121,3],[121,3],[121,3],[121,1],[122,2],[122,1],[124,1],[124,2],[124,2],[124,3],[124,1],[124,1],[124,1],[124,1],[124,1],[124,1],[124,1],[124,2],[73,2],[73,3],[131,4],[131,3],[130,2],[130,4],[130,2],[130,0],[27,3],[135,2],[135,1],[136,3],[136,1],[137,2],[137,3],[83,2],[83,5],[139,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 root = new Node(id++,"INSTRUCTIONSG"); root.children.push($$[$0-1]); var arbol = createAST(root); return arbol;
break;
case 3:
this.$ = new Node(id++,"DEFTYPES"); this.$.children.push(new Node(id++,$$[$0-5])); this.$.children.push(new Node(id++,$$[$0-4])); this.$.children.push(new Node(id++,$$[$0-3])); this.$.children.push(new Node(id++,$$[$0-2])); this.$.children.push($$[$0-1]); this.$.children.push(new Node(id++,$$[$0]));
break;
case 4:
this.$ = new Node(id++,"ATTRIB");this.$.children.push($$[$0-4]); this.$.children.push(new Node(id++,$$[$0-3])); this.$.children.push(new Node(id++,$$[$0-2])); this.$.children.push(new Node(id++,$$[$0-1])); this.$.children.push($$[$0]);
break;
case 5:
this.$ = new Node(id++,"ATTRIB"); this.$.children.push(new Node(id++,$$[$0-2])); this.$.children.push(new Node(id++,$$[$0-1])); this.$.children.push($$[$0]); 
break;
case 6:
this.$ = new Node(id++,"INSTRUCTIONSG");this.$.children.push($$[$0-1]); this.$.children.push($$[$0]);
break;
case 7:
this.$ = new Node(id++,"INSTRUCTIONSG");this.$.children.push($$[$0]);
break;
case 8: case 10: case 11: case 12: case 13: case 14: case 16:
this.$ = new Node(id++,"INSTRUCTIONG");this.$.children.push($$[$0]);
break;
case 9: case 15: case 17: case 18:
this.$ = new Node(id++,"INSTRUCTIONG");this.$.children.push($$[$0-1]); this.$.children.push(new Node(id++,$$[$0]));
break;
case 19: case 83:
 /*this is error*/ console.log($$[$0]); 
break;
case 20: case 22:
this.$ = new Node(id++,"IDVALOR"); this.$.children.push(new Node(id++,$$[$0-6])); this.$.children.push(new Node(id++,$$[$0-5])); this.$.children.push(new Node(id++,$$[$0-4])); this.$.children.push($$[$0-3]); this.$.children.push(new Node(id++,$$[$0-2])); if(check_to_add($$[$0-1]) === true) {this.$.children.push($$[$0-1])}; this.$.children.push($$[$0]);
break;
case 21: case 23:
this.$ = new Node(id++,"IDVALOR"); this.$.children.push(new Node(id++,$$[$0-5])); this.$.children.push(new Node(id++,$$[$0-4])); this.$.children.push(new Node(id++,$$[$0-3])); this.$.children.push(new Node(id++,$$[$0-2]));  if(check_to_add($$[$0-1]) === true) {this.$.children.push($$[$0-1]);} this.$.children.push($$[$0]);
break;
case 24:
this.$ = new Node(id++,"BLOCKF");this.$.children.push(new Node(id++,$$[$0-1]));this.$.children.push($$[$0]);
break;
case 25:
this.$ = new Node(id++,"BLOCK2F");this.$.children.push($$[$0-1]); this.$.children.push(new Node(id++,$$[$0]));
break;
case 26:
this.$ = new Node(id++,"BLOCK2F"); this.$.children.push(new Node(id++,$$[$0])); 
break;
case 27:
this.$ = new Node(id++,"INSTRUCTIONF");this.$.children.push($$[$0-1]);this.$.children.push($$[$0]);
break;
case 28: case 29: case 30:
this.$ = new Node(id++,"INSTRUCTIONF");this.$.children.push($$[$0]);
break;
case 31:
this.$ = new Node(id++,"RETURNT");this.$.children.push(new Node(id++,$$[$0-1]));this.$.children.push($$[$0]);
break;
case 32:
this.$ = new Node(id++,"RETURNT"); this.$.children.push(new Node(id++,"epsilon"));
break;
case 33:
this.$ = new Node(id++,"TYPESF");this.$.children.push($$[$0]);
break;
case 34:
this.$ = new Node(id++,"TYPESF"); this.$.children.push(new Node(id++,$$[$0])); 
break;
case 35: case 36: case 37: case 38: case 39: case 40:
this.$ = new Node(id++,"TYPE"); this.$.children.push(new Node(id++,$$[$0])); 
break;
case 41:
this.$ = new Node(id++,"TYPES"); this.$.children.push(new Node(id++,$$[$0-3])); this.$.children.push(new Node(id++,$$[$0-2])); this.$.children.push($$[$0-1]); this.$.children.push(new Node(id++,$$[$0]));
break;
case 42:
this.$ = new Node(id++,"TYPES");this.$.children.push($$[$0-1]); this.$.children.push($$[$0]);
break;
case 43:
this.$ = new Node(id++,"TYPES");this.$.children.push($$[$0]);
break;
case 44:
this.$ = new Node(id++,"MULTIDIMENSION"); this.$.children.push(new Node(id++,$$[$0-2])); this.$.children.push(new Node(id++,$$[$0-1])); this.$.children.push($$[$0]); 
break;
case 45:
this.$ = new Node(id++,"MULTIDIMENSION"); this.$.children.push(new Node(id++,$$[$0-1])); this.$.children.push(new Node(id++,$$[$0]));
break;
case 46:
 this.$ = new Node(id++,"LISTAPARAMETROS"); this.$.children.push($$[$0-1]);this.$.children.push($$[$0]); 
break;
case 47:
 this.$ = new Node(id++,"LISTAPARAMETROSPRIM"); this.$.children.push($$[$0-1]);this.$.children.push($$[$0]); 
break;
case 48: case 56:
 this.$ = new Node(id++,"epsilon"); 
break;
case 49:
 var aux = new Node(id++,"LSPBETHA"); aux.children.push(new Node(id++,$$[$0-2])); aux.children.push(new Node(id++,$$[$0-1])); aux.children.push($$[$0]); this.$ = aux; 
break;
case 50:
 var aux = new Node(id++,"LSALPHA");  aux.children.push(new Node(id++,$$[$0-3]));  aux.children.push(new Node(id++,$$[$0-2])); aux.children.push(new Node(id++,$$[$0-1])); aux.children.push($$[$0]); this.$ = aux; 
break;
case 51: case 52:
this.$ = new Node(id++,"TYPEVAR"); this.$.children.push(new Node(id++,$$[$0])); 
break;
case 53:
this.$ = new Node(id++,"DECLARATION"); this.$.children.push($$[$0-1]); this.$.children.push($$[$0]);
break;
case 54:
 this.$ = new Node(id++,"LISTID"); this.$.children.push($$[$0-1]);this.$.children.push($$[$0]); 
break;
case 55:
 this.$ = new Node(id++,"LISTIDPRIM"); this.$.children.push($$[$0-1]);this.$.children.push($$[$0]); 
break;
case 57:
this.$ = new Node(id++,"LISPBETHA");this.$.children.push(new Node(id++,$$[$0-1]));if(check_to_add($$[$0]) === true){this.$.children.push($$[$0]);}
break;
case 58:
this.$ = new Node(id++,"LISPBETHA"); this.$.children.push(new Node(id++,$$[$0-3])); this.$.children.push(new Node(id++,$$[$0-2])); this.$.children.push($$[$0-1]); if(check_to_add($$[$0]) === true){this.$.children.push($$[$0]);}
break;
case 59:
this.$ = new Node(id++,"LISALPHA"); this.$.children.push(new Node(id++,$$[$0-2])); this.$.children.push(new Node(id++,$$[$0-1])); if(check_to_add($$[$0]) === true){this.$.children.push($$[$0]);}
break;
case 60:
this.$ = new Node(id++,"LISALPHA"); this.$.children.push(new Node(id++,$$[$0-4])); this.$.children.push(new Node(id++,$$[$0-3])); this.$.children.push(new Node(id++,$$[$0-2])); this.$.children.push($$[$0-1]); if(check_to_add($$[$0]) === true){this.$.children.push($$[$0]);}
break;
case 61:
this.$ = new Node(id++,"ASSVALUE");this.$.children.push(new Node(id++,$$[$0-1]));this.$.children.push($$[$0]);
break;
case 62:
this.$ = new Node(id++,"ASSVALUE"); this.$.children.push(new Node(id++,$$[$0-2])); this.$.children.push(new Node(id++,$$[$0-1])); this.$.children.push(new Node(id++,$$[$0]));
break;
case 63: case 97:
this.$ = new Node(id++,"CONTENTASWT"); this.$.children.push(new Node(id++,$$[$0-1])); this.$.children.push($$[$0]);
break;
case 64:
this.$ = new Node(id++,"ASSVALUE"); this.$.children.push(new Node(id++,"epsilon"));
break;
case 65:
this.$ = new Node(id++,"BLOCK");this.$.children.push(new Node(id++,'{'));this.$.children.push($$[$0]);
break;
case 66:
this.$ = new Node(id++,"BLOCK2");this.$.children.push($$[$0-1]); this.$.children.push(new Node(id++,$$[$0]));
break;
case 67:
this.$ = new Node(id++,"BLOCK2"); this.$.children.push(new Node(id++,$$[$0])); 
break;
case 68:
this.$ = new Node(id++,"INSTRUCTION");this.$.children.push($$[$0-1]); this.$.children.push($$[$0]);
break;
case 69: case 71: case 72: case 73: case 74: case 76:
this.$ = new Node(id++,"INSTRUCTION");this.$.children.push($$[$0]);
break;
case 70: case 75: case 77: case 78:
this.$ = new Node(id++,"INSTRUCTION");this.$.children.push($$[$0-1]); this.$.children.push(new Node(id++,$$[$0]));
break;
case 79: case 80: case 82:
this.$ = new Node(id++,"INSTRUCTION"); this.$.children.push(new Node(id++,$$[$0-1])); this.$.children.push(new Node(id++,$$[$0]));
break;
case 81:
this.$ = new Node(id++,"INSTRUCTION"); this.$.children.push(new Node(id++,$$[$0-2])); this.$.children.push($$[$0-1]); this.$.children.push(new Node(id++,$$[$0]));
break;
case 84:
this.$ = new Node(id++,"ASSIGNMENT"); this.$.children.push($$[$0-3]); this.$.children.push($$[$0-2]); this.$.children.push(new Node(id++,$$[$0-1])); this.$.children.push($$[$0]);
break;
case 85:
this.$ = new Node(id++,"ASSIGNMENT"); this.$.children.push(new Node(id++,$$[$0-1])); this.$.children.push($$[$0]);
break;
case 86:
 this.$ = new Node(id++,"ASSIGNMENT"); this.$.children.push($$[$0-2]); this.$.children.push(new Node(id++,$$[$0-1])); this.$.children.push($$[$0]);
break;
case 87: case 88: case 89: case 90: case 91: case 92:
this.$ = new Node(id++,"OPERADOR"); this.$.children.push(new Node(id++,$$[$0])); 
break;
case 93:
this.$ = new Node(id++,"ASSIGMENTWITHTYPE"); this.$.children.push($$[$0-1]); this.$.children.push($$[$0]);
break;
case 94: case 95:
 this.$ = $$[$0-1]; this.$.children.push(new Node(id++,$$[$0]));
break;
case 96:
this.$ = new Node(id++,"CONTENTASWT"); this.$.children.push(new Node(id++,$$[$0-3])); this.$.children.push(new Node(id++,$$[$0-2])); this.$.children.push(new Node(id++,$$[$0-1])); this.$.children.push(new Node(id++,$$[$0]));
break;
case 98:
this.$ = new Node(id++,"DECASSTYPE"); this.$.children.push(new Node(id++,$$[$0-1])); this.$.children.push($$[$0]);
break;
case 99:
this.$ = new Node(id++,"ASSIGNMENTTYPE"); this.$.children.push(new Node(id++,$$[$0-3])); this.$.children.push(new Node(id++,$$[$0-2])); this.$.children.push($$[$0-1]); this.$.children.push($$[$0]);
break;
case 100:
this.$ = new Node(id++,"ASSIGNMENTTYPEPRIM"); this.$.children.push(new Node(id++,$$[$0-4])); this.$.children.push(new Node(id++,$$[$0-3])); this.$.children.push(new Node(id++,$$[$0-2])); this.$.children.push($$[$0-1]); this.$.children.push($$[$0]); 
break;
case 101:
this.$ = new Node(id++,"ASSIGNMENTTYPEPRIM"); this.$.children.push(new Node(id++,$$[$0])); 
break;
case 102: case 103:
this.$ = new Node(id++,"VALUETYPE"); this.$.children.push($$[$0]);
break;
case 104:
this.$ = new Node(id++,"PARAMETROUNITARIO"); this.$.children.push(new Node(id++,"(")); this.$.children.push($$[$0-1]); this.$.children.push(new Node(id++,")"));
break;
case 105:
this.$ = new Node(id++,"IF"); this.$.children.push($$[$0-1]); if(check_to_add($$[$0]) === true){this.$.children.push($$[$0]);}
break;
case 106:
this.$ = new Node(id++,"CELSE"); this.$.children.push($$[$0-2]); this.$.children.push(new Node(id++,"else")); this.$.children.push($$[$0]);
break;
case 107:
this.$ = new Node(id++,"CELSE"); this.$.children.push($$[$0]);
break;
case 108:
this.$ = new Node(id++,"ELSE"); this.$.children.push(new Node(id++,"else")); this.$.children.push($$[$0]);
break;
case 109:
this.$ = new Node(id++,"ELSE"); this.$.children.push(new Node(id++,"epsilon"));
break;
case 110:
this.$ = new Node(id++,"IFF"); this.$.children.push(new Node(id++,"if")); this.$.children.push($$[$0-1]); this.$.children.push($$[$0]);
break;
case 111:
this.$ = new Node(id++,"SWITCH"); this.$.children.push(new Node(id++,"switch")); this.$.children.push($$[$0-4]); this.$.children.push(new Node(id++,"{")); this.$.children.push($$[$0-2]); if(check_to_add($$[$0-1]) === true){this.$.children.push($$[$0-1]);} this.$.children.push(new Node(id++,"}"));
break;
case 112:
this.$ = new Node(id++,"CASES"); this.$.children.push($$[$0-4]); this.$.children.push(new Node(id++,"case")); this.$.children.push($$[$0-2]); this.$.children.push(new Node(id++,":")); this.$.children.push($$[$0]);
break;
case 113:
this.$ = new Node(id++,"CASES"); this.$.children.push($$[$0-3]); this.$.children.push(new Node(id++,"case")); this.$.children.push($$[$0-1]); this.$.children.push(new Node(id++,":"));
break;
case 114:
this.$ = new Node(id++,"CASES"); this.$.children.push(new Node(id++,"case")); this.$.children.push($$[$0-2]); this.$.children.push(new Node(id++,":")); this.$.children.push($$[$0]);
break;
case 115:
this.$ = new Node(id++,"CASES"); this.$.children.push(new Node(id++,"case")); this.$.children.push($$[$0-1]); this.$.children.push(new Node(id++,":")); 
break;
case 116:
this.$ = new Node(id++,"DEFAULT"); this.$.children.push(new Node(id++,"default")); this.$.children.push(new Node(id++,":")); this.$.children.push($$[$0]);
break;
case 117:
this.$ = new Node(id++,"DEFAULT"); this.$.children.push(new Node(id++,"default")); this.$.children.push(new Node(id++,":"));
break;
case 118:
this.$ = new Node(id++,"DEFAULT"); this.$.children.push(new Node(id++,"epsilon"));
break;
case 119:
this.$ = new Node(id++,"WHILE"); this.$.children.push(new Node(id++,"while")); this.$.children.push($$[$0-1]); this.$.children.push($$[$0]);
break;
case 120:
this.$ = new Node(id++,"DOWHILE"); this.$.children.push(new Node(id++,"do")); this.$.children.push($$[$0-2]); this.$.children.push(new Node(id++,"while")); this.$.children.push($$[$0]);
break;
case 121:
this.$ = new Node(id++,"FOR");this.$.children.push(new Node(id++,'for'));this.$.children.push(new Node(id++,'('));if(check_to_add($$[$0-6]) === true){this.$.children.push($$[$0-6]);}this.$.children.push(new Node(id++,';'));this.$.children.push($$[$0-4]);this.$.children.push(new Node(id++,';'));this.$.children.push($$[$0-2]);this.$.children.push(new Node(id++,')'));this.$.children.push($$[$0]);
break;
case 122:
this.$ = new Node(id++,"FOR");this.$.children.push(new Node(id++,'for'));this.$.children.push(new Node(id++,'('));this.$.children.push($$[$0-4]);this.$.children.push($$[$0-3]);this.$.children.push($$[$0-2]);this.$.children.push(new Node(id++,')'));this.$.children.push($$[$0]);
break;
case 123: case 124:
this.$ = new Node(id++,"DEC"); this.$.children.push($$[$0]);
break;
case 125:
this.$ = new Node(id++,"DEC"); this.$.children.push(new Node(id++,"epsilon"));
break;
case 126: case 127:
this.$ = new Node(id++,"FINON"); this.$.children.push(new Node(id++,$$[$0]));
break;
case 128: case 129:
this.$ = new Node(id++,"DECINC"); this.$.children.push(new Node(id++,$$[$0]));
break;
case 130:
this.$ = new Node(id++,"PRINT");this.$.children.push(new Node(id++,$$[$0-3]));this.$.children.push(new Node(id++,"("));this.$.children.push($$[$0-1]); this.$.children.push(new Node(id++,")"));
break;
case 131:
this.$ = new Node(id++,"DATAPRINT"); this.$.children.push($$[$0-2]); this.$.children.push(new Node(id++,$$[$0-1])); this.$.children.push($$[$0]);
break;
case 132:
this.$ = new Node(id++,"DATAPRINT"); this.$.children.push($$[$0]);
break;
case 133:
this.$ = new Node(id++,"EXPRT"); this.$.children.push($$[$0-2]); this.$.children.push(new Node(id++,$$[$0-1])); this.$.children.push($$[$0]);
break;
case 134:
this.$ = new Node(id++,"TERNARIO"); this.$.children.push($$[$0-4]); this.$.children.push(new Node(id++,$$[$0-3])); this.$.children.push($$[$0-2]); this.$.children.push(new Node(id++,$$[$0-1])); this.$.children.push($$[$0]);
break;
case 135:
this.$ = new Node(id++,"EXPRT"); this.$.children.push($$[$0]);
break;
case 136:
this.$ = new Node(id++,"EXPRT2"); this.$.children.push($$[$0-2]); this.$.children.push(new Node(id++,$$[$0-1])); this.$.children.push($$[$0]);
break;
case 137:
this.$ = new Node(id++,"EXPRT2"); this.$.children.push($$[$0]);
break;
case 138:
this.$ = new Node(id++,"EXPR"); this.$.children.push($$[$0-2]); this.$.children.push(new Node(id++,"!=")); this.$.children.push($$[$0]);
break;
case 139:
this.$ = new Node(id++,"EXPR"); this.$.children.push($$[$0-2]); this.$.children.push(new Node(id++,"==")); this.$.children.push($$[$0]);
break;
case 140:
this.$ = new Node(id++,"EXPR"); this.$.children.push($$[$0-2]); this.$.children.push(new Node(id++,"===")); this.$.children.push($$[$0]);
break;
case 141:
this.$ = new Node(id++,"EXPR"); this.$.children.push($$[$0]);
break;
case 142:
this.$ = new Node(id++,"EXPR1"); this.$.children.push($$[$0-2]); this.$.children.push(new Node(id++,">")); this.$.children.push($$[$0]);
break;
case 143:
this.$ = new Node(id++,"EXPR1"); this.$.children.push($$[$0-2]); this.$.children.push(new Node(id++,"<")); this.$.children.push($$[$0]);
break;
case 144:
this.$ = new Node(id++,"EXPR1"); this.$.children.push($$[$0-2]); this.$.children.push(new Node(id++,">=")); this.$.children.push($$[$0]);
break;
case 145:
this.$ = new Node(id++,"EXPR1"); this.$.children.push($$[$0-2]); this.$.children.push(new Node(id++,"<=")); this.$.children.push($$[$0]);
break;
case 146:
this.$ = new Node(id++,"EXPR1"); this.$.children.push($$[$0]);
break;
case 147:
this.$ = new Node(id++,"EXP"); this.$.children.push($$[$0-2]); this.$.children.push(new Node(id++,"+")); this.$.children.push($$[$0]);
break;
case 148:
this.$ = new Node(id++,"EXP"); this.$.children.push($$[$0-2]); this.$.children.push(new Node(id++,"-")); this.$.children.push($$[$0]);
break;
case 149:
this.$ = new Node(id++,"EXP"); this.$.children.push($$[$0]);
break;
case 150:
this.$ = new Node(id++,"EXP1"); this.$.children.push($$[$0-2]); this.$.children.push(new Node(id++,"*")); this.$.children.push($$[$0]);
break;
case 151:
this.$ = new Node(id++,"EXP1"); this.$.children.push($$[$0-2]); this.$.children.push(new Node(id++,"/")); this.$.children.push($$[$0]);
break;
case 152:
this.$ = new Node(id++,"EXP1"); this.$.children.push($$[$0-2]); this.$.children.push(new Node(id++,"%")); this.$.children.push($$[$0]);
break;
case 153:
this.$ = new Node(id++,"EXP1"); this.$.children.push($$[$0-2]); this.$.children.push(new Node(id++,"^")); this.$.children.push($$[$0]);
break;
case 154:
this.$= new Node(id++,"EXP1"); this.$.children.push($$[$0]);
break;
case 155:
this.$ = new Node(id++,"EXP2");this.$.children.push(new Node(id++,$$[$0-1])); this.$.children.push($$[$0]);
break;
case 156:
this.$ = new Node(id++,"EXP2"); this.$.children.push($$[$0]);
break;
case 157: case 165: case 166:
this.$ = new Node(id++,"EXP3");this.$.children.push(new Node(id++,$$[$0]));
break;
case 158:
this.$ = new Node(id++,"EXP3");this.$.children.push(new Node(id++,$$[$0-1])); this.$.children.push(new Node(id++,$$[$0]));
break;
case 159:
this.$ = new Node(id++,"EXP3");this.$.children.push(new Node(id++,$$[$0-1])); this.$.children.push($$[$0]);
break;
case 160:
this.$ = new Node(id++,"EXP3");this.$.children.push(new Node(id++,"("));this.$.children.push($$[$0-1]); this.$.children.push(new Node(id++,")"));
break;
case 161: case 162: case 163:
this.$ = new Node(id++,"EXP3"); this.$.children.push(new Node(id++,$$[$0]));
break;
case 164: case 167:
this.$ = new Node(id++,"EXP3"); this.$.children.push($$[$0]);
break;
case 168:
this.$ = new Node(id++,"EXP3"); this.$.children.push($$[$0-1]); this.$.children.push($$[$0]);
break;
case 169:
this.$ = new Node(id++,"IDVALOR");this.$.children.push(new Node(id++,$$[$0-1])); if(check_to_add($$[$0]) === true){this.$.children.push($$[$0]);}
break;
case 170:
this.$ = new Node(id++,"IDVALOR"); this.$.children.push(new Node(id++,$$[$0-2]));  this.$.children.push($$[$0-1]); this.$.children.push($$[$0]);
break;
case 171:
this.$ = new Node(id++,"ARREGLO"); this.$.children.push(new Node(id++,$$[$0-3])); this.$.children.push($$[$0-2]); this.$.children.push(new Node(id++,$$[$0-1])); this.$.children.push($$[$0]); 
break;
case 172:
this.$ = new Node(id++,"ARREGLO"); this.$.children.push(new Node(id++,$$[$0-2])); this.$.children.push($$[$0-1]); this.$.children.push(new Node(id++,$$[$0])); 
break;
case 173:
this.$ = new Node(id++,"IDVALOR2");this.$.children.push(new Node(id++,$$[$0-1])); this.$.children.push($$[$0]);
break;
case 174:
this.$ = new Node(id++,"IDVALOR2"); this.$.children.push(new Node(id++,$$[$0-3])); this.$.children.push(new Node(id++,$$[$0-2])); this.$.children.push(new Node(id++,$$[$0-1])); this.$.children.push(new Node(id++,$$[$0]));
break;
case 175:
this.$ = new Node(id++,"IDVALOR2"); this.$.children.push(new Node(id++,$$[$0-1])); this.$.children.push(new Node(id++,$$[$0]));
break;
case 176:
this.$ = new Node(id++,"IDVALOR2"); this.$.children.push(new Node(id++,"epsilon"));
break;
case 177:
this.$ = new Node(id++,"CALLF"); this.$.children.push(new Node(id++,$$[$0-2])); this.$.children.push(new Node(id++,$$[$0-1])); this.$.children.push($$[$0]); 
break;
case 178:
this.$ = new Node(id++,"PARAMETERS"); this.$.children.push($$[$0-1]); this.$.children.push($$[$0]); 
break;
case 179:
this.$ = new Node(id++,"PARAMETERS"); this.$.children.push(new Node(id++,$$[$0])); 
break;
case 180:
this.$ = new Node(id++,"IDVALOR"); this.$.children.push(new Node(id++,$$[$0-2])); this.$.children.push($$[$0-1]); this.$.children.push($$[$0]); 
break;
case 181:
this.$ = new Node(id++,"PARAMETERSPRIM"); this.$.children.push(new Node(id++,$$[$0])); 
break;
case 182:
this.$ = new Node(id++,"IDVALORASS");this.$.children.push(new Node(id++,$$[$0-1])); if(check_to_add($$[$0]) === true){this.$.children.push($$[$0]);}
break;
case 183:
this.$ = new Node(id++,"IDVALORASS"); this.$.children.push(new Node(id++,$$[$0-2]));  this.$.children.push($$[$0-1]); this.$.children.push($$[$0]);
break;
case 184:
this.$ = new Node(id++,"IDVALOR2ASS");this.$.children.push(new Node(id++,$$[$0-1])); this.$.children.push($$[$0]);
break;
case 185:
this.$ = new Node(id++,"IDVALOR2ASS"); this.$.children.push(new Node(id++,$$[$0-4])); this.$.children.push(new Node(id++,$$[$0-3])); this.$.children.push(new Node(id++,$$[$0-2])); this.$.children.push(new Node(id++,$$[$0-1])); this.$.children.push(new Node(id++,$$[$0]));
break;
case 186:
this.$ = new Node(id++,"GRAFICAR"); this.$.children.push(new Node(id++,$$[$0-2])); this.$.children.push(new Node(id++,$$[$0-1])); this.$.children.push(new Node(id++,$$[$0])); 
break;
}
},
table: [{2:$V0,3:1,4:2,5:[1,3],6:8,7:$V1,8:$V2,16:4,17:5,18:6,20:7,21:9,22:10,23:11,24:12,25:13,26:14,27:15,28:$V3,56:18,57:$V4,58:$V5,72:20,73:19,83:21,88:23,91:33,92:$V6,93:$V7,98:$V8,99:$V9,100:$Va,107:$Vb,132:$Vc},{1:[3]},{5:[1,35]},{1:[2,2]},{2:$V0,4:36,5:[2,7],6:8,7:$V1,8:$V2,16:4,17:5,18:6,20:7,21:9,22:10,23:11,24:12,25:13,26:14,27:15,28:$V3,56:18,57:$V4,58:$V5,72:20,73:19,83:21,88:23,91:33,92:$V6,93:$V7,98:$V8,99:$V9,100:$Va,107:$Vb,132:$Vc},o($Vd,[2,8]),{19:[1,37]},o($Vd,[2,10]),o($Vd,[2,11]),o($Vd,[2,12]),o($Vd,[2,13]),o($Vd,[2,14]),{19:[1,38]},o($Vd,[2,16]),{19:[1,39]},{19:[1,40]},o($Vd,[2,19]),{8:[1,41]},{8:[1,44],59:42,60:43},{9:[1,47],74:46,76:$Ve,77:$Vf,78:$Vg,79:$Vh,80:$Vi,81:$Vj,82:45},{19:[1,54]},{19:[1,55]},{8:[1,56]},o($Vk,[2,109],{89:57,90:[1,58]}),{29:$Vl,87:59},{29:$Vl,87:61},{10:$Vm,66:62},{29:[1,64]},{29:[1,65]},o($Vn,$Vo,{130:67,131:68,75:69,29:$Vp,51:$Vq,105:$Vr,106:$Vs,132:$Vt}),{8:[2,51]},{8:[2,52]},{8:[1,76],137:74,138:[1,75]},o($Vu,[2,107]),{29:$Vl,87:77},{1:[2,1]},{5:[2,6]},o($Vd,[2,9]),o($Vd,[2,15]),o($Vd,[2,17]),o($Vd,[2,18]),{29:[1,78]},o($Vv,[2,53]),o($Vv,$Vw,{61:79,62:80,13:$Vx}),o($Vy,$Vz,{63:82,9:$VA,14:[1,83]}),o($Vk,[2,93]),{9:[1,85]},{8:$VB,10:$VC,27:104,29:$VD,46:$VE,51:[1,87],64:86,65:88,73:107,77:$VF,111:89,113:91,117:92,120:93,121:94,122:95,123:$VG,124:97,125:$VH,126:$VI,127:$VJ,128:$VK,129:$VL},{9:[2,87]},{9:[2,88]},{9:[2,89]},{9:[2,90]},{9:[2,91]},{9:[2,92]},o($Vk,[2,94]),o($Vk,[2,95]),{9:[1,109]},o($Vk,[2,105]),{10:$Vm,66:111,91:110,92:$V6},{10:[1,112]},{8:$VB,27:104,29:$VD,46:$VE,64:113,73:107,77:$VF,111:89,113:91,117:92,120:93,121:94,122:95,123:$VG,124:97,125:$VH,126:$VI,127:$VJ,128:$VK,129:$VL},{10:$Vm,66:114},{98:[1,115]},{2:$VM,8:$V2,12:[1,118],18:120,20:121,21:122,22:123,23:124,24:125,25:126,26:127,27:128,38:119,56:18,57:$V4,58:$V5,67:116,68:117,69:$VN,70:$VO,71:$VP,72:20,73:19,83:21,88:23,91:33,92:$V6,93:$V7,98:$V8,99:$V9,100:$Va,107:$Vb,132:$Vc},{8:$VQ,18:134,19:[2,125],56:18,57:$V4,58:$V5,72:135,73:136,101:133},{8:$VB,27:104,29:$VD,46:$VE,64:139,73:107,77:$VF,108:138,111:89,113:91,117:92,120:93,121:94,122:95,123:$VG,124:97,125:$VH,126:$VI,127:$VJ,128:$VK,129:$VL},{8:$VB,27:104,29:$VD,31:[1,142],46:$VE,64:141,73:107,77:$VF,111:89,113:91,117:92,120:93,121:94,122:95,123:$VG,124:97,125:$VH,126:$VI,127:$VJ,128:$VK,129:$VL,135:140},o($VR,[2,169]),o($VR,$Vo,{130:143,132:$Vt}),o($VS,[2,85]),{8:$VT,73:144,133:[1,145],134:[1,146]},{8:$VB,27:104,29:$VD,46:$VE,64:148,73:107,77:$VF,111:89,113:91,117:92,120:93,121:94,122:95,123:$VG,124:97,125:$VH,126:$VI,127:$VJ,128:$VK,129:$VL},o($VU,[2,128]),o($VU,[2,129]),{19:[2,184]},{29:[1,149]},{51:$Vq,83:150,131:151,132:$Vc},{10:$Vm,66:152},{8:$VV,30:153,31:[1,154],53:155},o($Vv,[2,54]),o($Vv,$Vw,{62:80,61:157,13:$Vx}),{8:[1,158]},o($Vy,[2,57]),{8:$VW,15:159,41:161,42:$VX,43:$VY,44:$VZ,45:$V_,46:$V$,47:$V01},{8:$VB,10:$VC,27:104,29:$VD,46:$VE,51:[1,169],64:168,65:170,73:107,77:$VF,111:89,113:91,117:92,120:93,121:94,122:95,123:$VG,124:97,125:$VH,126:$VI,127:$VJ,128:$VK,129:$VL},{8:$VB,27:104,29:$VD,46:$VE,64:171,73:107,77:$VF,111:89,113:91,117:92,120:93,121:94,122:95,123:$VG,124:97,125:$VH,126:$VI,127:$VJ,128:$VK,129:$VL},o($VS,[2,86],{109:$V11,110:$V21}),{52:[1,174]},o($Vk,[2,97]),o($V31,[2,135],{112:[1,175]}),{8:[1,177],84:176},o($V41,[2,137],{114:[1,178],115:[1,179],116:[1,180]}),o($V51,[2,141],{48:[1,182],49:[1,181],118:[1,183],119:[1,184]}),o($V61,[2,146],{76:[1,185],77:[1,186]}),o($V71,[2,149],{78:$V81,79:[1,187],80:[1,188],81:[1,189]}),o($VU,[2,154]),{8:$VB,27:104,29:$VD,46:$VE,73:107,77:$VF,122:191,123:$VG,124:97,125:$VH,126:$VI,127:$VJ,128:$VK,129:$VL},o($VU,[2,156]),o($VU,[2,157]),{8:$VT,73:193,125:[1,192]},{8:$VB,27:104,29:$VD,46:$VE,64:194,73:107,77:$VF,111:89,113:91,117:92,120:93,121:94,122:95,123:$VG,124:97,125:$VH,126:$VI,127:$VJ,128:$VK,129:$VL},o($VU,[2,161]),o($VU,[2,162]),o($VU,[2,163]),o($VU,[2,164]),o($VU,[2,165]),o($VU,[2,166]),o($VU,[2,167],{75:195,105:$Vr,106:$Vs}),o([12,13,14,19,31,48,49,52,76,77,78,79,80,81,103,104,105,106,109,110,112,114,115,116,118,119],$Vo,{130:67,131:68,29:$Vp,51:$Vq,132:$Vt}),{10:[1,196]},o($Vu,[2,106]),o($Vk,[2,108]),{94:197,96:[1,198]},{31:[1,199],109:$V11,110:$V21},o($Vk,[2,119]),{29:$Vl,87:200},o($Vu,[2,65]),{12:[1,201]},o($Vu,[2,67]),o($V91,[2,69],{56:18,73:19,72:20,83:21,88:23,91:33,38:119,18:120,20:121,21:122,22:123,23:124,24:125,25:126,26:127,27:128,68:202,2:$VM,8:$V2,57:$V4,58:$V5,69:$VN,70:$VO,71:$VP,92:$V6,93:$V7,98:$V8,99:$V9,100:$Va,107:$Vb,132:$Vc}),{19:[1,203]},o($Va1,[2,71]),o($Va1,[2,72]),o($Va1,[2,73]),o($Va1,[2,74]),{19:[1,204]},o($Va1,[2,76]),{19:[1,205]},{19:[1,206]},{19:[1,207]},{19:[1,208]},{8:$VB,19:[1,210],27:104,29:$VD,46:$VE,64:209,73:107,77:$VF,111:89,113:91,117:92,120:93,121:94,122:95,123:$VG,124:97,125:$VH,126:$VI,127:$VJ,128:$VK,129:$VL},o($Va1,[2,83]),{19:[1,211]},{19:[2,123],102:212,103:[1,213],104:[1,214]},{19:[2,124]},{9:[1,215],74:46,76:$Ve,77:$Vf,78:$Vg,79:$Vh,80:$Vi,81:$Vj},o($Vn,$Vo,{130:67,131:68,75:69,51:$Vq,105:$Vr,106:$Vs,132:$Vt}),{31:[1,216]},{13:[1,217],31:[2,132],109:$V11,110:$V21},o($VU,[2,177]),{13:$Vb1,31:$Vc1,109:$V11,110:$V21,136:218},o($VU,[2,179]),o($VR,[2,170]),o($VR,[2,173]),{29:[1,221]},o($VR,[2,175]),o($VR,$Vo,{130:67,131:68,51:$Vq,132:$Vt}),{52:[1,222],109:$V11,110:$V21},{8:$VB,27:104,29:$VD,46:$VE,64:223,73:107,77:$VF,111:89,113:91,117:92,120:93,121:94,122:95,123:$VG,124:97,125:$VH,126:$VI,127:$VJ,128:$VK,129:$VL},{19:[2,182]},{83:224,132:$Vc},o($Vu,[2,110]),{31:[1,225]},{10:$Vd1,14:$Ve1,32:226},{13:$Vf1,31:$Vg1,54:228,55:229},{14:[1,231]},o($Vv,[2,55]),o($Vy,$Vz,{63:232,9:$VA,14:[1,233]}),o($Vy,$Vz,{63:234,9:$VA}),{48:[1,235]},o($Vh1,[2,43],{50:236,51:$Vi1}),o($Vj1,[2,35]),o($Vj1,[2,36]),o($Vj1,[2,37]),o($Vj1,[2,38]),o($Vj1,[2,39]),o($Vj1,[2,40]),o($Vy,[2,61],{109:$V11,110:$V21}),{52:[1,238]},o($Vy,[2,63]),o($VS,[2,84],{109:$V11,110:$V21}),{8:$VB,27:104,29:$VD,46:$VE,64:239,73:107,77:$VF,111:89,113:91,117:92,120:93,121:94,122:95,123:$VG,124:97,125:$VH,126:$VI,127:$VJ,128:$VK,129:$VL},{8:$VB,27:104,29:$VD,46:$VE,64:240,73:107,77:$VF,111:89,113:91,117:92,120:93,121:94,122:95,123:$VG,124:97,125:$VH,126:$VI,127:$VJ,128:$VK,129:$VL},{19:[1,241]},{8:$VB,27:104,29:$VD,46:$VE,73:107,77:$VF,111:242,113:91,117:92,120:93,121:94,122:95,123:$VG,124:97,125:$VH,126:$VI,127:$VJ,128:$VK,129:$VL},o($Vk1,[2,98]),{14:[1,243]},{8:$VB,27:104,29:$VD,46:$VE,73:107,77:$VF,113:244,117:92,120:93,121:94,122:95,123:$VG,124:97,125:$VH,126:$VI,127:$VJ,128:$VK,129:$VL},{8:$VB,27:104,29:$VD,46:$VE,73:107,77:$VF,113:245,117:92,120:93,121:94,122:95,123:$VG,124:97,125:$VH,126:$VI,127:$VJ,128:$VK,129:$VL},{8:$VB,27:104,29:$VD,46:$VE,73:107,77:$VF,113:246,117:92,120:93,121:94,122:95,123:$VG,124:97,125:$VH,126:$VI,127:$VJ,128:$VK,129:$VL},{8:$VB,27:104,29:$VD,46:$VE,73:107,77:$VF,117:247,120:93,121:94,122:95,123:$VG,124:97,125:$VH,126:$VI,127:$VJ,128:$VK,129:$VL},{8:$VB,27:104,29:$VD,46:$VE,73:107,77:$VF,117:248,120:93,121:94,122:95,123:$VG,124:97,125:$VH,126:$VI,127:$VJ,128:$VK,129:$VL},{8:$VB,27:104,29:$VD,46:$VE,73:107,77:$VF,117:249,120:93,121:94,122:95,123:$VG,124:97,125:$VH,126:$VI,127:$VJ,128:$VK,129:$VL},{8:$VB,27:104,29:$VD,46:$VE,73:107,77:$VF,117:250,120:93,121:94,122:95,123:$VG,124:97,125:$VH,126:$VI,127:$VJ,128:$VK,129:$VL},{8:$VB,27:104,29:$VD,46:$VE,73:107,77:$VF,120:251,121:94,122:95,123:$VG,124:97,125:$VH,126:$VI,127:$VJ,128:$VK,129:$VL},{8:$VB,27:104,29:$VD,46:$VE,73:107,77:$VF,120:252,121:94,122:95,123:$VG,124:97,125:$VH,126:$VI,127:$VJ,128:$VK,129:$VL},{8:$VB,27:104,29:$VD,46:$VE,73:107,77:$VF,121:253,122:95,123:$VG,124:97,125:$VH,126:$VI,127:$VJ,128:$VK,129:$VL},{8:$VB,27:104,29:$VD,46:$VE,73:107,77:$VF,121:254,122:95,123:$VG,124:97,125:$VH,126:$VI,127:$VJ,128:$VK,129:$VL},{8:$VB,27:104,29:$VD,46:$VE,73:107,77:$VF,121:255,122:95,123:$VG,124:97,125:$VH,126:$VI,127:$VJ,128:$VK,129:$VL},{8:$VB,27:104,29:$VD,46:$VE,73:107,77:$VF,121:256,122:95,123:$VG,124:97,125:$VH,126:$VI,127:$VJ,128:$VK,129:$VL},o($VU,[2,155]),o($VU,[2,158]),o($VU,[2,159]),{31:[1,257],109:$V11,110:$V21},o($VU,[2,168]),{8:[1,259],11:258},{12:[2,118],95:260,96:[1,261],97:[1,262]},{8:$VB,27:104,29:$VD,46:$VE,64:263,73:107,77:$VF,111:89,113:91,117:92,120:93,121:94,122:95,123:$VG,124:97,125:$VH,126:$VI,127:$VJ,128:$VK,129:$VL},o([10,19],[2,104]),{19:[2,120]},o($Vu,[2,66]),o($V91,[2,68]),o($Va1,[2,70]),o($Va1,[2,75]),o($Va1,[2,77]),o($Va1,[2,78]),o($Va1,[2,79]),o($Va1,[2,80]),{19:[1,264],109:$V11,110:$V21},o($Va1,[2,82]),{8:$VB,27:104,29:$VD,46:$VE,64:265,73:107,77:$VF,111:89,113:91,117:92,120:93,121:94,122:95,123:$VG,124:97,125:$VH,126:$VI,127:$VJ,128:$VK,129:$VL},{8:$VT,73:266},{8:[2,126]},{8:[2,127]},{8:$VB,27:104,29:$VD,46:$VE,64:86,73:107,77:$VF,111:89,113:91,117:92,120:93,121:94,122:95,123:$VG,124:97,125:$VH,126:$VI,127:$VJ,128:$VK,129:$VL},{19:[2,130]},{8:$VB,27:104,29:$VD,46:$VE,64:139,73:107,77:$VF,108:267,111:89,113:91,117:92,120:93,121:94,122:95,123:$VG,124:97,125:$VH,126:$VI,127:$VJ,128:$VK,129:$VL},o($VU,[2,178]),{8:$VB,27:104,29:$VD,46:$VE,64:268,73:107,77:$VF,111:89,113:91,117:92,120:93,121:94,122:95,123:$VG,124:97,125:$VH,126:$VI,127:$VJ,128:$VK,129:$VL},o($VU,[2,181]),{31:[1,269]},o($Vl1,[2,172],{131:270,51:$Vq}),{31:[1,271],109:$V11,110:$V21},{19:[2,183]},{10:$Vd1,14:$Ve1,32:272},{10:$Vm1,33:273},{8:$VW,15:276,39:275,40:[1,277],41:161,42:$VX,43:$VY,44:$VZ,45:$V_,46:$V$,47:$V01},{31:[2,46]},{13:$Vf1,31:$Vg1,54:278,55:229},{8:[1,279]},{8:$VW,15:280,41:161,42:$VX,43:$VY,44:$VZ,45:$V_,46:$V$,47:$V01},o($Vy,[2,59]),{8:$VW,15:281,41:161,42:$VX,43:$VY,44:$VZ,45:$V_,46:$V$,47:$V01},o($Vy,[2,58]),{8:$VW,15:282,41:161,42:$VX,43:$VY,44:$VZ,45:$V_,46:$V$,47:$V01},o($Vh1,[2,42]),{52:[1,283]},o($Vy,[2,62]),o($V31,[2,133]),{14:[1,284],109:$V11,110:$V21},o($Vk,[2,96]),o($V41,[2,136]),{8:$VB,10:$VC,27:104,29:$VD,46:$VE,64:286,65:287,73:107,77:$VF,85:285,111:89,113:91,117:92,120:93,121:94,122:95,123:$VG,124:97,125:$VH,126:$VI,127:$VJ,128:$VK,129:$VL},o($V51,[2,138]),o($V51,[2,139]),o($V51,[2,140]),o($V61,[2,142]),o($V61,[2,143]),o($V61,[2,144]),o($V61,[2,145]),o($V71,[2,147]),o($V71,[2,148]),o($Vn1,[2,150],{78:$V81}),o($Vn1,[2,151],{78:$V81}),o($Vn1,[2,152],{78:$V81}),o($Vn1,[2,153],{78:$V81}),o($VU,[2,160]),{12:[1,288],13:[1,289]},{14:[1,290]},{12:[1,291]},{8:$VB,27:104,29:$VD,46:$VE,64:292,73:107,77:$VF,111:89,113:91,117:92,120:93,121:94,122:95,123:$VG,124:97,125:$VH,126:$VI,127:$VJ,128:$VK,129:$VL},{14:[1,293]},{14:[1,294],109:$V11,110:$V21},o($Va1,[2,81]),{19:[1,295],109:$V11,110:$V21},{31:[1,296]},{31:[2,131]},{13:$Vb1,31:$Vc1,109:$V11,110:$V21,136:297},o($VR,[2,174]),o($Vl1,[2,171]),{19:[2,185]},{10:$Vm1,33:298},o($Vd,[2,21]),{2:$VM,8:$V2,12:[1,301],18:120,20:121,21:122,22:123,23:124,24:125,25:126,26:127,27:128,28:$Vo1,34:304,35:299,36:300,37:302,38:303,56:18,57:$V4,58:$V5,69:$VN,70:$VO,71:$VP,72:20,73:19,83:21,88:23,91:33,92:$V6,93:$V7,98:$V8,99:$V9,100:$Va,107:$Vb,132:$Vc},{10:[2,31]},{10:[2,33]},{10:[2,34]},{31:[2,47]},{14:[1,306]},o($Vp1,[2,49]),o($Vy,$Vz,{63:307,9:$VA}),{49:[1,308]},o($Vh1,[2,45],{50:309,51:$Vi1}),{8:$VB,27:104,29:$VD,46:$VE,64:310,73:107,77:$VF,111:89,113:91,117:92,120:93,121:94,122:95,123:$VG,124:97,125:$VH,126:$VI,127:$VJ,128:$VK,129:$VL},{12:$Vq1,13:$Vr1,86:311},o($Vs1,[2,102],{109:$V11,110:$V21}),o($Vs1,[2,103]),o($Vd,[2,3]),{8:[1,314]},{8:$VW,15:315,41:161,42:$VX,43:$VY,44:$VZ,45:$V_,46:$V$,47:$V01},o($Vk,[2,111]),{14:[1,316],109:$V11,110:$V21},{2:$VM,8:$V2,12:[2,117],18:120,20:121,21:122,22:123,23:124,24:125,25:126,26:127,27:128,38:119,56:18,57:$V4,58:$V5,68:317,69:$VN,70:$VO,71:$VP,72:20,73:19,83:21,88:23,91:33,92:$V6,93:$V7,98:$V8,99:$V9,100:$Va,107:$Vb,132:$Vc},o($V91,[2,115],{56:18,73:19,72:20,83:21,88:23,91:33,38:119,18:120,20:121,21:122,22:123,23:124,24:125,25:126,26:127,27:128,68:318,2:$VM,8:$V2,57:$V4,58:$V5,69:$VN,70:$VO,71:$VP,92:$V6,93:$V7,98:$V8,99:$V9,100:$Va,107:$Vb,132:$Vc}),{8:$VQ,72:319,73:136},{10:$Vm,66:320},o($VU,[2,180]),o($Vd,[2,20]),o($Vt1,[2,24]),{12:[1,321]},o($Vt1,[2,26]),{2:$VM,8:$V2,12:[2,28],18:120,20:121,21:122,22:123,23:124,24:125,25:126,26:127,27:128,28:$Vo1,34:304,36:322,37:302,38:303,56:18,57:$V4,58:$V5,69:$VN,70:$VO,71:$VP,72:20,73:19,83:21,88:23,91:33,92:$V6,93:$V7,98:$V8,99:$V9,100:$Va,107:$Vb,132:$Vc},o($Vu1,[2,29]),o($Vu1,[2,30]),{8:[1,323]},{8:$VW,15:324,41:161,42:$VX,43:$VY,44:$VZ,45:$V_,46:$V$,47:$V01},o($Vy,[2,60]),o($Vh1,[2,41]),o($Vh1,[2,44]),o($V31,[2,134]),o($Vk1,[2,99]),{8:[1,325]},o($Vk1,[2,101]),{14:[1,326]},o($Vs1,[2,5]),o($V91,[2,113],{56:18,73:19,72:20,83:21,88:23,91:33,38:119,18:120,20:121,21:122,22:123,23:124,24:125,25:126,26:127,27:128,68:327,2:$VM,8:$V2,57:$V4,58:$V5,69:$VN,70:$VO,71:$VP,92:$V6,93:$V7,98:$V8,99:$V9,100:$Va,107:$Vb,132:$Vc}),{12:[2,116]},o($V91,[2,114]),{31:[1,328]},o($Vk,[2,122]),o($Vt1,[2,25]),{12:[2,27]},{29:[1,329]},o($Vp1,[2,50]),{14:[1,330]},{8:$VW,15:331,41:161,42:$VX,43:$VY,44:$VZ,45:$V_,46:$V$,47:$V01},o($V91,[2,112]),{10:$Vm,66:332},{8:$VV,30:333,31:[1,334],53:155},{8:$VB,10:$VC,27:104,29:$VD,46:$VE,64:286,65:287,73:107,77:$VF,85:335,111:89,113:91,117:92,120:93,121:94,122:95,123:$VG,124:97,125:$VH,126:$VI,127:$VJ,128:$VK,129:$VL},o($Vs1,[2,4]),o($Vk,[2,121]),{31:[1,336]},{10:$Vd1,14:$Ve1,32:337},{12:$Vq1,13:$Vr1,86:338},{10:$Vd1,14:$Ve1,32:339},{10:$Vm1,33:340},o($Vk1,[2,100]),{10:$Vm1,33:341},o($Vu1,[2,23]),o($Vu1,[2,22])],
defaultActions: {3:[2,2],30:[2,51],31:[2,52],35:[2,1],36:[2,6],48:[2,87],49:[2,88],50:[2,89],51:[2,90],52:[2,91],53:[2,92],74:[2,184],135:[2,124],150:[2,182],200:[2,120],213:[2,126],214:[2,127],216:[2,130],224:[2,183],228:[2,46],267:[2,131],271:[2,185],275:[2,31],276:[2,33],277:[2,34],278:[2,47],317:[2,116],322:[2,27]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

     var id = 0;
     var root;
     var aux_node = [];

     function createAST(root) {
          var ret = "digraph G {node[shape=rectangle];\n";
          ret += loopAST(root);
          ret += "\n}";
          return ret;
     }

     function loopAST(root) {
          var ret = "";
          if (root != null) {
               //console.log(root.children.length);
               for (var i = 0; i < root.children.length; i++) {

                    if (root.children.length > 0) {
                         try
                         {
                         root.value = root.value.replace(/\"/g, "");
                         root.children[i].value = root.children[i].value.replace(/\"/g, "");
                         root.children[i].value = root.children[i].value.replace(/\\/g, "#");
                         ret += "\"" + root.id + ". " + root.value + "\"->\"" + root.children[i].id + ". " + root.children[i].value + "\"" + "\n";
                         ret += loopAST(root.children[i]);
                         }catch(e){console.log(e)}
                    }
               }
          }
          return ret;
     }


     function check_to_add(node)
     {
          if(node.children.length === 1 && node.children[0].value === "epsilon")
               return false;
          else 
               return true;
     }
     /*
import Node from './clases/Node';
export 
     */
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:// comentario simple línea
break;
case 1:// comentario multiple líneas
break;
case 2:return 105;
break;
case 3:return 106;
break;
case 4:return 76;
break;
case 5:return 77;   
break;
case 6:return 78;
break;
case 7:return 79;
break;
case 8:return 80;
break;
case 9:return 81;
break;
case 10:return 110;
break;
case 11:return 118;
break;
case 12:return 119;
break;
case 13:return 48;
break;
case 14:return 49;
break;
case 15:return 115;
break;
case 16:return 116;
break;
case 17:return 114;
break;
case 18:return 51;     
break;
case 19:return 52;
break;
case 20:return 10;     
break;
case 21:return 12;
break;
case 22:return 29;     
break;
case 23:return 31;
break;
case 24:return 13;
break;
case 25:return 132;
break;
case 26:return 9;
break;
case 27:return 19;
break;
case 28:return 14;
break;
case 29:return 123;
break;
case 30:return 112;
break;
case 31:return 109;
break;
case 32:return 129;
break;
case 33:return 46;
break;
case 34:return 28;
break;
case 35:return 47;
break;
case 36:return 45;
break;
case 37:return 58;
break;
case 38:return 57;
break;
case 39:return 7;
break;
case 40:return 44;
break;
case 41:return 127;
break;
case 42:return 128;
break;
case 43:return 92;
break;
case 44:return 90;
break;
case 45:return 93;
break;
case 46:return 96;
break;
case 47:return 97;
break;
case 48:return 69;
break;
case 49:return 70;
break;
case 50:return 71;
break;
case 51:return 107;
break;
case 52:return 40;
break;
case 53:return 100;
break;
case 54:return 98;
break;
case 55:return 99;
break;
case 56:return 43;
break;
case 57:return 104;
break;
case 58:return 103;
break;
case 59:return 138;
break;
case 60:return 133;
break;
case 61:return 134;
break;
case 62:return 140;
break;
case 63:
break;
case 64:return 125;
break;
case 65:return 126;
break;
case 66:return 8;
break;
case 67:return 5;
break;
case 68: 
break;
}
},
rules: [/^(?:\/\/.*)/,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/,/^(?:\+\+)/,/^(?:--)/,/^(?:\+)/,/^(?:-)/,/^(?:\*\*)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:\?)/,/^(?:>=)/,/^(?:<=)/,/^(?:<)/,/^(?:>)/,/^(?:==)/,/^(?:===)/,/^(?:!=)/,/^(?:\[)/,/^(?:\])/,/^(?:\{)/,/^(?:\})/,/^(?:\()/,/^(?:\))/,/^(?:,)/,/^(?:\.)/,/^(?:=)/,/^(?:;)/,/^(?::)/,/^(?:!)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:null\b)/,/^(?:undefined\b)/,/^(?:function\b)/,/^(?:Array\b)/,/^(?:number\b)/,/^(?:let\b)/,/^(?:const\b)/,/^(?:type\b)/,/^(?:string\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:default\b)/,/^(?:break\b)/,/^(?:continue\b)/,/^(?:return\b)/,/^(?:console\.log\b)/,/^(?:void\b)/,/^(?:for\b)/,/^(?:while\b)/,/^(?:do\b)/,/^(?:boolean\b)/,/^(?:in\b)/,/^(?:of\b)/,/^(?:push\b)/,/^(?:pop\b)/,/^(?:length\b)/,/^(?:graficar_ts\b)/,/^(?:[ \r\t\n]+)/,/^(?:[0-9]+\.[0-9]+\b|[0-9]+\b)/,/^(?:([\"](\\"|[^"])*[^\\][\"])|[\"][\"]|[\'][^']*[\']|`[^`]*`)/,/^(?:([a-zA-Z"_"])[a-z0-9A-Z"_""ñ""Ñ"]*)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = ast;
exports.Parser = ast.Parser;
exports.parse = function () { return ast.parse.apply(ast, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}
