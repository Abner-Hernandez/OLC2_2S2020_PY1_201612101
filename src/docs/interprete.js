/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
import Logical from './clases/Logical';
import Relational from './clases/Relational';
import Arithmetical from './clases/Arithmetical';
import Value from './clases/Value';
import Print from './clases/Print';
import Declaration from './clases/Declaration';
import Function from './clases/Function';
import Return from './clases/Return';
import Call from './clases/Call';
import IfList from './clases/IfList';
import Else from './clases/Else';
import If from './clases/If';
import While from './clases/While';
import DoWhile from './clases/DoWhile';
import Assignment from './clases/Assignment';
import Switch from './clases/Switch';
import For from './clases/For';
import Unary from './clases/Unary'; 
import Break from './clases/Break';
import Continue from './clases/Continue';
import Type from './clases/Type';
import SymbolTable from './clases/SymbolTable';
import TernaryOperator from './clases/TernaryOperator';
import { add_error_E } from './clases/Reports';
import UnaryNoReturn from './clases/UnaryNoReturn';
import { simbtable_E } from './clases/Reports';
export var interprete = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,17],$V1=[1,23],$V2=[1,30],$V3=[1,18],$V4=[1,32],$V5=[1,33],$V6=[1,36],$V7=[1,25],$V8=[1,26],$V9=[1,27],$Va=[1,28],$Vb=[1,29],$Vc=[1,31],$Vd=[2,5,7,14,30,52,53,88,89,94,95,96,105,139],$Ve=[1,52],$Vf=[1,53],$Vg=[1,54],$Vh=[1,55],$Vi=[1,56],$Vj=[1,57],$Vk=[2,5,7,12,14,30,52,53,65,66,67,88,89,92,93,94,95,96,105,139],$Vl=[1,63],$Vm=[1,66],$Vn=[9,72,73,74,75,76,77],$Vo=[2,171],$Vp=[1,69],$Vq=[1,77],$Vr=[1,75],$Vs=[1,76],$Vt=[1,74],$Vu=[2,5,7,12,14,30,52,53,65,66,67,86,88,89,92,93,94,95,96,105,139],$Vv=[13,101,102],$Vw=[2,47],$Vx=[1,85],$Vy=[13,15,101,102],$Vz=[2,56],$VA=[1,88],$VB=[1,94],$VC=[1,112],$VD=[1,104],$VE=[1,103],$VF=[1,100],$VG=[1,102],$VH=[1,105],$VI=[1,106],$VJ=[1,107],$VK=[1,108],$VL=[1,109],$VM=[1,138],$VN=[1,134],$VO=[1,135],$VP=[1,136],$VQ=[1,143],$VR=[9,12,13,15,16,33,43,44,47,72,73,74,75,76,77,101,102,103,104,106,107,109,111,112,113,115,116],$VS=[13,33],$VT=[9,12,13,15,16,33,43,44,47,72,73,74,75,76,77,101,102,103,104,106,107,109,111,112,113,115,116,130],$VU=[1,151],$VV=[1,152],$VW=[12,13,15,16,33,43,44,47,72,73,74,75,76,77,101,102,106,107,109,111,112,113,115,116],$VX=[1,171],$VY=[1,168],$VZ=[1,169],$V_=[1,170],$V$=[1,166],$V01=[1,176],$V11=[1,177],$V21=[12,13,15,16,33,47,101,102,106,107],$V31=[12,13,15,16,33,47,101,102,106,107,109],$V41=[12,13,15,16,33,47,101,102,106,107,109,111,112,113],$V51=[12,13,15,16,33,43,44,47,101,102,106,107,109,111,112,113,115,116],$V61=[1,189],$V71=[1,190],$V81=[12,13,15,16,33,43,44,47,72,73,101,102,106,107,109,111,112,113,115,116],$V91=[1,194],$Va1=[1,198],$Vb1=[1,201],$Vc1=[12,92,93],$Vd1=[2,12,14,52,53,65,66,67,88,89,92,93,94,95,96,105,139],$Ve1=[33,47],$Vf1=[1,229],$Vg1=[1,228],$Vh1=[15,33],$Vi1=[2,25],$Vj1=[1,235],$Vk1=[1,238],$Vl1=[2,39],$Vm1=[9,10,12,13,15,33,44,101,102],$Vn1=[1,245],$Vo1=[9,10,12,13,15,33,44,46,101,102],$Vp1=[12,13,15,101,102],$Vq1=[14,31,73,119,121,122,123,124,125,126],$Vr1=[12,13,15,16,33,43,44,47,72,73,75,76,77,101,102,106,107,109,111,112,113,115,116],$Vs1=[1,315],$Vt1=[1,314],$Vu1=[12,15];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"ini":3,"INSTRUCTIONSG":4,"EOF":5,"DEFTYPES":6,"restype":7,"TYPEDEFID":8,"igual":9,"corchetea":10,"ATTRIB":11,"corchetec":12,"puntocoma":13,"id":14,"coma":15,"dospuntos":16,"TYPES":17,"INSTRUCTIONG":18,"FUNCTION":19,"DECLARATION":20,"ASSIGMENTWITHTYPE":21,"IF":22,"SWITCH":23,"WHILE":24,"DOWHILE":25,"FOR":26,"PRINT":27,"CALLF":28,"GRAFICAR":29,"resfunction":30,"parenta":31,"LISTAPARAMETROS":32,"parentc":33,"RETURNT":34,"BLOCK":35,"TYPESF":36,"resvoid":37,"TYPE":38,"resnumber":39,"resboolean":40,"resstring":41,"resarray":42,"menor":43,"mayor":44,"MULTIDIMENSION":45,"llavea":46,"llavec":47,"BETHA":48,"LISTAPARAMETROSPRIMA":49,"ALPHA":50,"TYPEVAR":51,"resconst":52,"reslet":53,"LISTID":54,"DECBETHA":55,"LISTIDPRIM":56,"DECALPHA":57,"ASSVALUE":58,"EXPRT":59,"DATAPRINT":60,"DECASSTYPE":61,"BLOCK2":62,"INSTRUCTIONS":63,"INSTRUCTION":64,"resbreak":65,"rescontinue":66,"resreturn":67,"ASSIGNMENT":68,"IDVALOR":69,"OPERADOR":70,"DECINC":71,"suma":72,"resta":73,"potencia":74,"multiplicacion":75,"slash":76,"modulo":77,"CONTENTASWT":78,"IDVALORASS":79,"ASSIGNMENTTYPE":80,"VALUETYPE":81,"ASSIGNMENTTYPEPRIM":82,"PARAMETROUNITARIO":83,"CELSE":84,"ELSE":85,"reselse":86,"IFF":87,"resif":88,"resswitch":89,"CASES":90,"DEFAULT":91,"rescase":92,"resdefault":93,"reswhile":94,"resdo":95,"resfor":96,"DEC":97,"ASSIG":98,"FINON":99,"EXP":100,"resof":101,"resin":102,"incremento":103,"decremento":104,"resprint":105,"or":106,"quest":107,"EXPRT2":108,"and":109,"EXPR":110,"diferente":111,"identico":112,"referencias":113,"EXPR1":114,"mayorigual":115,"menorigual":116,"EXP1":117,"EXP2":118,"not":119,"EXP3":120,"number":121,"cadena":122,"restrue":123,"resfalse":124,"resnull":125,"resundefined":126,"IDVALOR2":127,"IDARR":128,"ARREGLO":129,"punto":130,"respop":131,"reslength":132,"PARAMETERS":133,"PARALPHA":134,"PARAMETERSPRIM":135,"PARBETHA":136,"IDVALOR2ASS":137,"respush":138,"resgraficar_ts":139,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"restype",9:"igual",10:"corchetea",12:"corchetec",13:"puntocoma",14:"id",15:"coma",16:"dospuntos",30:"resfunction",31:"parenta",33:"parentc",37:"resvoid",39:"resnumber",40:"resboolean",41:"resstring",42:"resarray",43:"menor",44:"mayor",46:"llavea",47:"llavec",52:"resconst",53:"reslet",65:"resbreak",66:"rescontinue",67:"resreturn",72:"suma",73:"resta",74:"potencia",75:"multiplicacion",76:"slash",77:"modulo",86:"reselse",88:"resif",89:"resswitch",92:"rescase",93:"resdefault",94:"reswhile",95:"resdo",96:"resfor",101:"resof",102:"resin",103:"incremento",104:"decremento",105:"resprint",106:"or",107:"quest",109:"and",111:"diferente",112:"identico",113:"referencias",115:"mayorigual",116:"menorigual",119:"not",121:"number",122:"cadena",123:"restrue",124:"resfalse",125:"resnull",126:"resundefined",130:"punto",131:"respop",132:"reslength",138:"respush",139:"resgraficar_ts"},
productions_: [0,[3,2],[3,1],[6,7],[8,1],[11,5],[11,3],[4,2],[4,1],[18,1],[18,2],[18,2],[18,1],[18,1],[18,1],[18,1],[18,2],[18,1],[18,2],[18,2],[18,2],[18,1],[19,7],[19,6],[34,2],[34,0],[36,1],[36,1],[38,1],[38,1],[38,1],[38,1],[17,4],[17,2],[17,1],[45,3],[45,2],[32,2],[49,2],[49,0],[48,3],[50,4],[51,1],[51,1],[20,2],[54,2],[56,2],[56,0],[55,4],[55,2],[57,5],[57,3],[58,2],[58,3],[58,4],[58,2],[58,0],[35,2],[62,2],[62,1],[63,2],[63,1],[64,2],[64,2],[64,1],[64,1],[64,1],[64,2],[64,1],[64,2],[64,2],[64,2],[64,2],[64,3],[64,2],[64,2],[64,1],[68,4],[68,2],[68,3],[70,1],[70,1],[70,1],[70,1],[70,1],[70,1],[21,2],[21,1],[21,1],[78,3],[78,2],[61,2],[80,4],[82,5],[82,1],[81,1],[81,1],[83,3],[22,2],[84,3],[84,1],[85,2],[85,0],[87,3],[23,6],[90,5],[90,4],[90,4],[90,3],[91,3],[91,2],[91,0],[24,3],[25,4],[26,9],[26,7],[98,1],[97,1],[97,1],[97,0],[99,1],[99,1],[71,1],[71,1],[27,4],[60,3],[60,1],[59,3],[59,5],[59,1],[108,3],[108,1],[110,3],[110,3],[110,3],[110,1],[114,3],[114,3],[114,3],[114,3],[114,1],[100,3],[100,3],[100,1],[117,3],[117,3],[117,3],[117,3],[117,1],[118,2],[118,1],[120,1],[120,2],[120,2],[120,3],[120,1],[120,1],[120,1],[120,1],[120,1],[120,1],[120,1],[120,2],[69,2],[69,2],[128,2],[129,4],[129,3],[127,2],[127,4],[127,2],[127,0],[28,3],[133,2],[133,1],[134,1],[135,2],[135,1],[136,2],[79,2],[79,2],[137,2],[137,5],[29,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

          try
          {
               console.log("todo termino bien")
               symbolt.add_types(structures);
               var tmp = $$[$0-1];
               for(let aux of tmp)
               {
                    aux.operate(symbolt);
               }
               structures = [];
               symbolt = new SymbolTable(null);
          }catch(e){console.log(e); structures = []; symbolt = new SymbolTable(null);}
     
break;
case 2:
 console.log("termino vacio") 
break;
case 3:
 
break;
case 4:
 existe = false; for(var d of structures){if(d.name === $$[$0]) { existe = true; break;}} if(!existe) structures.push({name: $$[$0], atributes: []}); else try{ add_error_E( {error: "Ya existe un type con el nombre" + $$[$0], type: 'SINTACTICO', line: this.row, column: this.column} ); }catch(e){ console.log(e); } 
break;
case 5: case 6:
 if(!existe) structures[structures.length - 1].atributes.push({name: $$[$0-2], type: $$[$0].id}); 
break;
case 7:
 if(Array.isArray($$[$0-1])){ for(var a of $$[$0-1]){ if(a !== null)$$[$0].unshift(a); }}else{if($$[$0-1] !== null)$$[$0].unshift($$[$0-1]);}  this.$ = $$[$0]; /*deb*/
break;
case 8:
 if(Array.isArray($$[$0])){ this.$ = $$[$0]; }else{ if($$[$0] !== null)this.$ = [$$[$0]];else this.$ = [];  } /*deb*/
break;
case 9:
 symbolt.addFunction($$[$0]); this.$ = null; 
break;
case 10:
 if($$[$0-1] != null){$$[$0-1].type_var = Type.GLOBAL; /*global_var.push($$[$0-1]);*/} this.$ = $$[$0-1];/* declaration inst */
break;
case 11: case 16: case 18: case 19: case 20: case 62: case 63: case 67: case 69: case 70: case 75: case 154:
 this.$ = $$[$0-1]; 
break;
case 12: case 174:
 this.$ = null; 
break;
case 13: case 14: case 15: case 17: case 24: case 26: case 31: case 37: case 52: case 55: case 64: case 65: case 66: case 68: case 87: case 95: case 96: case 120: case 121: case 160:
 this.$ = $$[$0]; 
break;
case 21: case 76:
 try{ add_error_E( {error: yytext, type: 'SINTACTICO', line: _$[$0].first_line, column: _$[$0].first_column} ); }catch(e){ console.log(e); } 
break;
case 22:
 this.$ = new Function(/*0,*/$$[$0-1].id,$$[$0-1].access,$$[$0-5],$$[$0-3],$$[$0],this._$.first_line,this._$.first_column); 
break;
case 23:
 this.$ = new Function(/*0,*/$$[$0-1].id,$$[$0-1].access,$$[$0-4],null,$$[$0],this._$.first_line,this._$.first_column); 
break;
case 25: case 27:
 this.$ = {id: Type.VOID, access: Type.VALOR, type: Type.VALOR}; 
break;
case 28:
 this.$ = Type.ENTERO; 
break;
case 29:
 this.$ = Type.BOOL; 
break;
case 30:
 this.$ = Type.CADENA; 
break;
case 32:
 this.$ = {id: Type.ARREGLO, access: Type.ARREGLO, type: Type.PRIMITIVO}; 
break;
case 33:
 this.$ = {id: Type.ARREGLO, access: Type.ARREGLO, type: Type.PRIMITIVO}; if($$[$0-1] != Type.ENTERO && $$[$0-1] != Type.BOOL && $$[$0-1] != Type.CADENA) this.$.type = Type.OBJETO; 
break;
case 34:
 this.$ = {id: $$[$0], access: Type.VALOR, type: Type.VALOR}; if($$[$0] != Type.ENTERO && $$[$0] != Type.BOOL && $$[$0] != Type.CADENA) this.$.type = Type.OBJETO; 
break;
case 35:
 this.$ = $$[$0-2] + $$[$0-1] + $$[$0]; 
break;
case 36:
 this.$ = $$[$0-1] + $$[$0]; 
break;
case 38:
 this.$ = $$[$0-2];
break;
case 39: case 109: case 116: case 118: case 129: case 131: case 135: case 140: case 143: case 148: case 150:
this.$ = $$[$0];
break;
case 40:
 this.$ = []; this.$.push(new Declaration($$[$0-2],null,$$[$0].id,$$[$0].access,Type.LOCAL,Type.VAR,/*Type.PRIMITIVO,*/this._$.first_line,this._$.first_column)); 
break;
case 41:
 this.$ = $$[$0-4]; this.$.push(new Declaration($$[$0-2],null,$$[$0].id,$$[$0].access,Type.LOCAL,Type.VAR,/*Type.PRIMITIVO,*/this._$.first_line,this._$.first_column)); 
break;
case 42:
this.$ = Type.CONST;
break;
case 43:
this.$ = Type.VAR;
break;
case 44:
 for(var a of $$[$0]){a.type_c = $$[$0-1];} this.$ = $$[$0]; this.$ = $$[$0]; 
break;
case 45:
 this.$ = $$[$0];  /*testdec*/ 
break;
case 46:
 this.$ = $$[$0-1]; /*testdec*/ 
break;
case 47:
 this.$ = $$[$0];
break;
case 48:
 this.$ = []; this.$.push(new Declaration($$[$0-3],$$[$0],$$[$0-1].id,Type.VALOR,Type.LOCAL,null,/*Type.PRIMITIVO,0,*/this._$.first_line,this._$.first_column)); if(nuevo_arreglo) {this.$[this.$.length-1].type = Type.ARREGLO; this.$[this.$.length-1].type_exp = Type.ARREGLO;} nuevo_arreglo = false;
break;
case 49:
 this.$ = []; this.$.push(new Declaration($$[$0-1],$$[$0],undefined,Type.VALOR,Type.LOCAL,null,/*Type.PRIMITIVO,0,*/this._$.first_line,this._$.first_column)); if(nuevo_arreglo) {this.$[this.$.length-1].type = Type.ARREGLO; this.$[this.$.length-1].type_exp = Type.ARREGLO;} nuevo_arreglo = false;
break;
case 50:
 this.$ = $$[$0-5]; this.$.push(new Declaration($$[$0-3],$$[$0],$$[$0-1].id,Type.VALOR,Type.LOCAL,null,/*Type.PRIMITIVO,0,*/this._$.first_line,this._$.first_column)); /*testdec*/  if(nuevo_arreglo) {this.$[this.$.length-1].type = Type.ARREGLO; this.$[this.$.length-1].type_exp = Type.ARREGLO;} nuevo_arreglo = false;  
break;
case 51:
 this.$ = $$[$0-3]; this.$.push(new Declaration($$[$0-1],$$[$0],undefined,Type.VALOR,Type.LOCAL,null,/*Type.PRIMITIVO,0,*/this._$.first_line,this._$.first_column)); /*testdec*/ if(nuevo_arreglo) {this.$[this.$.length-1].type = Type.ARREGLO; this.$[this.$.length-1].type_exp = Type.ARREGLO;} nuevo_arreglo = false;
break;
case 53:
 this.$ = undefined; nuevo_arreglo = true; 
break;
case 54:
 this.$ = $$[$0-1]; nuevo_arreglo = true; 
break;
case 56:
 this.$ = undefined; 
break;
case 57: case 168: case 181:
 this.$ = $$[$0];  
break;
case 58:
 this.$ = $$[$0-1]; /*here*/
break;
case 59: case 94: case 171:
 this.$ = []; 
break;
case 60:
 if(Array.isArray($$[$0-1])){ for(var a of $$[$0-1]){ $$[$0].unshift(a); }}else{$$[$0].unshift($$[$0-1]);}  this.$ = $$[$0]; /*deb*/
break;
case 61:
 if(Array.isArray($$[$0])){ this.$ = $$[$0]; }else{ this.$ = [$$[$0]]; } /*deb*/
break;
case 71:
this.$ = new Break(Type.BREAK,this._$.first_line,this._$.first_column)
break;
case 72:
this.$ = new Continue(Type.CONTINUE,this._$.first_line,this._$.first_column)
break;
case 73:
this.$ = new Return($$[$0-1],Type.RETURN,Type.RETURN,this._$.first_line,this._$.first_column);
break;
case 74:
this.$ = new Return(null,Type.RETURN,Type.RETURN,this._$.first_line,this._$.first_column);
break;
case 77:
 if($$[$0-3].length === 1 && $$[$0-3][0].type === Type.ID){ $$[$0-3] = $$[$0-3][0]; } this.$ = new Assignment($$[$0-3],new Arithmetical($$[$0-3],$$[$0],$$[$0-2],Type.VALOR,this._$.first_line,this._$.first_column),this._$.first_line,this._$.first_column); this.$.change_tipe($$[$0-2]);
break;
case 78:
 this.$ = new UnaryNoReturn($$[$0-1],$$[$0],this._$.first_line,this._$.first_column); 
break;
case 79:
 /*DEBERIA AQUI*/if($$[$0-2].length === 1 && $$[$0-2][0].type === Type.ID){ $$[$0-2] = $$[$0-2][0]; } this.$ = new Assignment($$[$0-2],$$[$0],this._$.first_line,this._$.first_column); 
break;
case 80:
 this.$ = Type.SUMA; 
break;
case 81:
 this.$ = Type.RESTA; 
break;
case 82:
 this.$ = Type.POTENCIA; 
break;
case 83:
 this.$ = Type.MULTIPLICACION; 
break;
case 84:
 this.$ = Type.DIVISION; 
break;
case 85:
 this.$ = Type.MODULO; 
break;
case 86:
 this.$ = $$[$0]; this.$.id = $$[$0-1]; 
break;
case 88:
 this.$ = new UnaryNoReturn($$[$0],".push()",this._$.first_line,this._$.first_column); 
break;
case 89:
 this.$ = new Assignment(undefined,undefined,this._$.first_line,this._$.first_column); this.$.change_tipe(Type.ARREGLO);
break;
case 90:
 this.$ = new Assignment(undefined,$$[$0],this._$.first_line,this._$.first_column); 
break;
case 91:
 this.$ = new Value($$[$0],Type.OBJETO,Type.VALOR,this._$.first_line,this._$.first_column); 
break;
case 92: case 93:
 this.$ = $$[$0]; this.$.unshift([$$[$0-3], $$[$0-1]]); 
break;
case 97:
this.$ = $$[$0-1];
break;
case 98:
var tf = $$[$0-1];tf.elsebody = $$[$0];this.$ = tf;
break;
case 99:
var tc = $$[$0-2]; tc.lif.push($$[$0]); this.$ = tc;
break;
case 100:
var t = new IfList();t.lif.push($$[$0]);this.$ = t;
break;
case 101:
this.$ = new Else($$[$0],this._$.first_line,this._$.first_column);
break;
case 102: case 111:
this.$ = null;
break;
case 103:
this.$ = new If($$[$0-1],$$[$0],Type.IF,this._$.first_line,this._$.first_column);
break;
case 104:
var ts = new Switch($$[$0-4],$$[$0-2],$$[$0-1],this._$.first_line,this._$.first_column);console.log("entrooo");this.$ = ts;
break;
case 105:
$$[$0-4].push(new If($$[$0-2],$$[$0],Type.IF,this._$.first_line,this._$.first_column));
break;
case 106:
$$[$0-3].push(new If($$[$0-1],[],Type.IF,this._$.first_line,this._$.first_column));
break;
case 107:
 this.$ = []; this.$.push(new If($$[$0-2],$$[$0],Type.IF,this._$.first_line,this._$.first_column));
break;
case 108:
 this.$ = []; this.$.push(new If($$[$0-1],[],Type.IF,this._$.first_line,this._$.first_column));
break;
case 110:
this.$ = []
break;
case 112:
this.$ = new While($$[$0-1],$$[$0],this._$.first_line,this._$.first_column);
break;
case 113:
this.$ = new DoWhile($$[$0],$$[$0-2],this._$.first_line,this._$.first_column);
break;
case 114:
 this.$ = new For($$[$0-6],$$[$0-4],$$[$0-2],$$[$0],this._$.first_line,this._$.first_column); 
break;
case 115:
 this.$ = new For($$[$0-4][0],$$[$0-3],$$[$0-2],$$[$0],this._$.first_line,this._$.first_column); 
break;
case 117:
this.$ = $$[$0][0];
break;
case 119:
this.$ = "";
break;
case 122:
this.$ = Type.INCREMENTO;
break;
case 123:
this.$ = Type.DECREMENTO;
break;
case 124:
this.$ = new Print($$[$0-1],Type.IMPRIMIR, Type.IMPRIMIR,this._$.first_line,this._$.first_column);
break;
case 125:
 $$[$0].unshift($$[$0-2]); this.$ = $$[$0]; /*print*/
break;
case 126:
 this.$ = [$$[$0]]; /*print*/
break;
case 127:
this.$ = new Logical($$[$0-2],$$[$0],Type.OR,Type.VALOR,this._$.first_line,this._$.first_column);
break;
case 128:
 this.$ = new TernaryOperator($$[$0-4], $$[$0-2], $$[$0], this._$.first_line,this._$.first_column); 
break;
case 130:
this.$ = new Logical($$[$0-2],$$[$0],Type.AND,Type.VALOR,this._$.first_line,this._$.first_column);
break;
case 132:
this.$ = new Relational($$[$0-2],$$[$0],Type.DIFERENTE,Type.VALOR,this._$.first_line,this._$.first_column);
break;
case 133:
this.$ = new Relational($$[$0-2],$$[$0],Type.IDENTICO,Type.VALOR,this._$.first_line,this._$.first_column);
break;
case 134:
this.$ = new Relational($$[$0-2],$$[$0],Type.REFERENCIA,Type.VALOR,this._$.first_line,this._$.first_column);
break;
case 136:
this.$ = new Relational($$[$0-2],$$[$0],Type.MAYOR,Type.VALOR,this._$.first_line,this._$.first_column);
break;
case 137:
this.$ = new Relational($$[$0-2],$$[$0],Type.MENOR,Type.VALOR,this._$.first_line,this._$.first_column);
break;
case 138:
this.$ = new Relational($$[$0-2],$$[$0],Type.MAYORIGUAL,Type.VALOR,this._$.first_line,this._$.first_column);
break;
case 139:
this.$ = new Relational($$[$0-2],$$[$0],Type.MENORIGUAL,Type.VALOR,this._$.first_line,this._$.first_column);
break;
case 141:
this.$ = new Arithmetical($$[$0-2],$$[$0],Type.SUMA,Type.VALOR,this._$.first_line,this._$.first_column);
break;
case 142:
this.$ = new Arithmetical($$[$0-2],$$[$0],Type.RESTA,Type.VALOR,this._$.first_line,this._$.first_column);
break;
case 144:
this.$ = new Arithmetical($$[$0-2],$$[$0],Type.MULTIPLICACION,Type.VALOR,this._$.first_line,this._$.first_column);
break;
case 145:
this.$ = new Arithmetical($$[$0-2],$$[$0],Type.DIVISION,Type.VALOR,this._$.first_line,this._$.first_column);
break;
case 146:
this.$ = new Arithmetical($$[$0-2],$$[$0],Type.MODULO,Type.VALOR,this._$.first_line,this._$.first_column);
break;
case 147:
this.$ = new Arithmetical($$[$0-2],$$[$0],Type.POTENCIA,Type.VALOR,this._$.first_line,this._$.first_column);
break;
case 149:
this.$ = new Logical($$[$0],null,Type.NOT,Type.VALOR,this._$.first_line,this._$.first_column);
break;
case 151:
this.$ = new Value(Number($$[$0]),Type.ENTERO,Type.VALOR,this._$.first_line,this._$.first_column); 
break;
case 152:
 if($$[$0].length === 1 && $$[$0][0].type === Type.ID){ this.$ = new Unary($$[$0][0],Type.RESTA,this._$.first_line,this._$.first_column); }else{ this.$ = new Unary($$[$0-1],Type.RESTA,this._$.first_line,this._$.first_column); } 
break;
case 153:
 this.$ = new Value(-1*Number($$[$0]),Type.ENTERO,Type.VALOR,this._$.first_line,this._$.first_column); 
break;
case 155:
this.$ = new Value($$[$0],Type.CADENA,Type.VALOR,this._$.first_line,this._$.first_column);
break;
case 156:
this.$ = new Value(true,Type.BOOL,Type.VALOR,this._$.first_line,this._$.first_column);
break;
case 157:
this.$ = new Value(false,Type.BOOL,Type.VALOR,this._$.first_line,this._$.first_column);
break;
case 158: case 159:
this.$ = new Value(null,Type.NULL,Type.VALOR,this._$.first_line,this._$.first_column);
break;
case 161:
 if($$[$0].length === 1 && $$[$0][0].type === Type.ID){ this.$ = $$[$0][0]; }else{ this.$ = new Value($$[$0],Type.ARREGLO,Type.VALOR,this._$.first_line,this._$.first_column); } 
break;
case 162:
 if($$[$0-1].length === 1 && $$[$0-1][0].type === Type.ID){ this.$ = new Unary($$[$0-1][0],$$[$0],this._$.first_line,this._$.first_column); }else{ this.$ = new Unary($$[$0-1],$$[$0],this._$.first_line,this._$.first_column); } 
break;
case 163: case 179:
 this.$ = $$[$0]; this.$.unshift(new Value($$[$0-1],Type.ID,Type.VALOR,this._$.first_line,this._$.first_column)); 
break;
case 164: case 180:
 this.$ = $$[$0]; this.$.unshift($$[$0-1]); 
break;
case 165:
 this.$ = new Value($$[$0-1],Type.ARREGLO,Type.VALOR,this._$.first_line,this._$.first_column); this.$.add_positions($$[$0]); 
break;
case 166:
 this.$ = $$[$0]; this.$.unshift($$[$0-2]);
break;
case 167:
 this.$ = []; this.$.push($$[$0-1]); 
break;
case 169:
 this.$ = [new Value(".pop()",Type.ID,Type.VALOR,this._$.first_line,this._$.first_column)];  
break;
case 170:
 this.$ = [new Value($$[$0],Type.ID,Type.VALOR,this._$.first_line,this._$.first_column)];  
break;
case 172:
 this.$ = new Call($$[$0-2],Type.LLAMADA,null,$$[$0],this._$.first_line,this._$.first_column); 
break;
case 173:
 this.$ = $$[$0]; /*return parametros*/
break;
case 175:
 this.$ = []; this.$.push($$[$0]); 
break;
case 176: case 177:
 this.$ = $$[$0-1]; /*parametros call*/
break;
case 178:
 this.$ = $$[$0-2]; this.$.push($$[$0]); 
break;
case 182:
 this.$ = [$$[$0-1]]; 
break;
case 183:
 this.$ = new UnaryNoReturn($$[$0-2],Type.GRAFICAR,this._$.first_line,this._$.first_column); 
break;
}
},
table: [{2:$V0,3:1,4:2,5:[1,3],6:8,7:$V1,14:$V2,18:4,19:5,20:6,21:7,22:9,23:10,24:11,25:12,26:13,27:14,28:15,29:16,30:$V3,51:19,52:$V4,53:$V5,68:21,69:20,79:22,84:24,87:35,88:$V6,89:$V7,94:$V8,95:$V9,96:$Va,105:$Vb,128:34,139:$Vc},{1:[3]},{5:[1,37]},{1:[2,2]},{2:$V0,4:38,5:[2,8],6:8,7:$V1,14:$V2,18:4,19:5,20:6,21:7,22:9,23:10,24:11,25:12,26:13,27:14,28:15,29:16,30:$V3,51:19,52:$V4,53:$V5,68:21,69:20,79:22,84:24,87:35,88:$V6,89:$V7,94:$V8,95:$V9,96:$Va,105:$Vb,128:34,139:$Vc},o($Vd,[2,9]),{13:[1,39]},{13:[1,40]},o($Vd,[2,12]),o($Vd,[2,13]),o($Vd,[2,14]),o($Vd,[2,15]),{13:[1,41]},o($Vd,[2,17]),{13:[1,42]},{13:[1,43]},{13:[1,44]},o($Vd,[2,21]),{14:[1,45]},{14:[1,48],54:46,55:47},{9:[1,51],70:50,72:$Ve,73:$Vf,74:$Vg,75:$Vh,76:$Vi,77:$Vj,78:49},{13:[2,87]},{13:[2,88]},{8:58,14:[1,59]},o($Vk,[2,102],{85:60,86:[1,61]}),{31:$Vl,83:62},{31:$Vl,83:64},{10:$Vm,35:65},{31:[1,67]},{31:[1,68]},o($Vn,$Vo,{127:70,71:71,137:72,129:73,31:$Vp,46:$Vq,103:$Vr,104:$Vs,130:$Vt}),{31:[1,78]},{14:[2,42]},{14:[2,43]},o($Vn,$Vo,{127:79,137:80,130:$Vt}),o($Vu,[2,100]),{31:$Vl,83:81},{1:[2,1]},{5:[2,7]},o($Vd,[2,10]),o($Vd,[2,11]),o($Vd,[2,16]),o($Vd,[2,18]),o($Vd,[2,19]),o($Vd,[2,20]),{31:[1,82]},o($Vv,[2,44]),o($Vv,$Vw,{56:83,57:84,15:$Vx}),o($Vy,$Vz,{58:87,9:$VA,16:[1,86]}),{13:[2,86]},{9:[1,89]},{10:$VB,14:$VC,28:110,31:$VD,46:[1,91],59:90,61:92,69:111,73:$VE,100:97,108:93,110:95,114:96,117:98,118:99,119:$VF,120:101,121:$VG,122:$VH,123:$VI,124:$VJ,125:$VK,126:$VL,128:113},{9:[2,80]},{9:[2,81]},{9:[2,82]},{9:[2,83]},{9:[2,84]},{9:[2,85]},{9:[1,114]},{9:[2,4]},o($Vk,[2,98]),{10:$Vm,35:116,87:115,88:$V6},{10:[1,117]},{14:$VC,28:110,31:$VD,59:118,69:111,73:$VE,100:97,108:93,110:95,114:96,117:98,118:99,119:$VF,120:101,121:$VG,122:$VH,123:$VI,124:$VJ,125:$VK,126:$VL,128:113},{10:$Vm,35:119},{94:[1,120]},{2:$VM,12:[1,123],14:$V2,20:125,21:126,22:127,23:128,24:129,25:130,26:131,27:132,28:133,29:137,51:19,52:$V4,53:$V5,62:121,63:122,64:124,65:$VN,66:$VO,67:$VP,68:21,69:20,79:22,84:24,87:35,88:$V6,89:$V7,94:$V8,95:$V9,96:$Va,105:$Vb,128:34,139:$Vc},{13:[2,119],14:$VQ,20:140,51:19,52:$V4,53:$V5,68:141,69:142,97:139,128:113},{14:$VC,28:110,31:$VD,59:145,60:144,69:111,73:$VE,100:97,108:93,110:95,114:96,117:98,118:99,119:$VF,120:101,121:$VG,122:$VH,123:$VI,124:$VJ,125:$VK,126:$VL,128:113},{14:$VC,28:110,31:$VD,33:[1,148],59:149,69:111,73:$VE,100:97,108:93,110:95,114:96,117:98,118:99,119:$VF,120:101,121:$VG,122:$VH,123:$VI,124:$VJ,125:$VK,126:$VL,128:113,133:146,134:147},o($VR,[2,163]),o($VS,[2,78]),{13:[2,179]},o($VT,[2,165]),{14:[1,155],69:150,79:153,128:34,131:$VU,132:$VV,138:[1,154]},o($VW,[2,122]),o($VW,[2,123]),{14:$VC,28:110,31:$VD,59:156,69:111,73:$VE,100:97,108:93,110:95,114:96,117:98,118:99,119:$VF,120:101,121:$VG,122:$VH,123:$VI,124:$VJ,125:$VK,126:$VL,128:113},{33:[1,157]},o($VR,[2,164]),{13:[2,180]},{10:$Vm,35:158},{14:[1,162],32:159,33:[1,160],48:161},o($Vv,[2,45]),o($Vv,$Vw,{57:84,56:163,15:$Vx}),{14:[1,164]},{14:$VX,17:165,38:167,39:$VY,40:$VZ,41:$V_,42:$V$},o($Vy,[2,49]),{10:$VB,14:$VC,28:110,31:$VD,46:[1,173],59:172,61:174,69:111,73:$VE,100:97,108:93,110:95,114:96,117:98,118:99,119:$VF,120:101,121:$VG,122:$VH,123:$VI,124:$VJ,125:$VK,126:$VL,128:113},{14:$VC,28:110,31:$VD,59:175,69:111,73:$VE,100:97,108:93,110:95,114:96,117:98,118:99,119:$VF,120:101,121:$VG,122:$VH,123:$VI,124:$VJ,125:$VK,126:$VL,128:113},o($VS,[2,79],{106:$V01,107:$V11}),{47:[1,178]},{13:[2,90]},o($V21,[2,129],{109:[1,179]}),{14:[1,181],80:180},o($V31,[2,131],{111:[1,182],112:[1,183],113:[1,184]}),o($V41,[2,135],{43:[1,186],44:[1,185],115:[1,187],116:[1,188]}),o($V51,[2,140],{72:$V61,73:$V71}),o($V81,[2,143],{74:$V91,75:[1,191],76:[1,192],77:[1,193]}),o($VW,[2,148]),{14:$VC,28:110,31:$VD,69:111,73:$VE,118:195,119:$VF,120:101,121:$VG,122:$VH,123:$VI,124:$VJ,125:$VK,126:$VL,128:113},o($VW,[2,150]),o($VW,[2,151]),{14:$Va1,69:196,121:[1,197],128:113},{14:$VC,28:110,31:$VD,59:199,69:111,73:$VE,100:97,108:93,110:95,114:96,117:98,118:99,119:$VF,120:101,121:$VG,122:$VH,123:$VI,124:$VJ,125:$VK,126:$VL,128:113},o($VW,[2,155]),o($VW,[2,156]),o($VW,[2,157]),o($VW,[2,158]),o($VW,[2,159]),o($VW,[2,160]),o($VW,[2,161],{71:200,103:$Vr,104:$Vs}),o([12,13,15,16,33,43,44,47,72,73,74,75,76,77,101,102,103,104,106,107,109,111,112,113,115,116],$Vo,{127:70,129:73,31:$Vp,46:$Vq,130:$Vb1}),o($VR,$Vo,{127:79,130:$Vb1}),{10:[1,202]},o($Vu,[2,99]),o($Vk,[2,101]),{90:203,92:[1,204]},{33:[1,205],106:$V01,107:$V11},o($Vk,[2,112]),{31:$Vl,83:206},o($Vu,[2,57]),{12:[1,207]},o($Vu,[2,59]),o($Vc1,[2,61],{51:19,69:20,68:21,79:22,84:24,128:34,87:35,64:124,20:125,21:126,22:127,23:128,24:129,25:130,26:131,27:132,28:133,29:137,63:208,2:$VM,14:$V2,52:$V4,53:$V5,65:$VN,66:$VO,67:$VP,88:$V6,89:$V7,94:$V8,95:$V9,96:$Va,105:$Vb,139:$Vc}),{13:[1,209]},{13:[1,210]},o($Vd1,[2,64]),o($Vd1,[2,65]),o($Vd1,[2,66]),{13:[1,211]},o($Vd1,[2,68]),{13:[1,212]},{13:[1,213]},{13:[1,214]},{13:[1,215]},{13:[1,217],14:$VC,28:110,31:$VD,59:216,69:111,73:$VE,100:97,108:93,110:95,114:96,117:98,118:99,119:$VF,120:101,121:$VG,122:$VH,123:$VI,124:$VJ,125:$VK,126:$VL,128:113},{13:[1,218]},o($Vd1,[2,76]),{13:[1,219]},{13:[2,117],99:220,101:[1,221],102:[1,222]},{13:[2,118]},{9:[1,223],70:50,72:$Ve,73:$Vf,74:$Vg,75:$Vh,76:$Vi,77:$Vj},o($Vn,$Vo,{127:70,71:71,129:73,46:$Vq,103:$Vr,104:$Vs,130:$Vb1}),{33:[1,224]},o($Ve1,[2,126],{15:[1,225],106:$V01,107:$V11}),o($VW,[2,172]),{15:$Vf1,33:$Vg1,135:226,136:227},o($VW,[2,174]),o($Vh1,[2,175],{106:$V01,107:$V11}),o($VR,[2,168]),{31:[1,230]},o($VR,[2,170]),{13:[2,181]},{31:[1,231]},o($Vn,$Vo,{127:70,137:72,129:73,46:$Vq,130:$Vt}),{47:[1,232],106:$V01,107:$V11},{13:[2,183]},o($Vu,[2,103]),{33:[1,233]},{10:$Vi1,16:$Vj1,34:234},{15:$Vk1,33:$Vl1,49:236,50:237},{16:[1,239]},o($Vv,[2,46]),o($Vy,$Vz,{58:241,9:$VA,16:[1,240]}),o($Vy,$Vz,{58:242,9:$VA}),{43:[1,243]},o($Vm1,[2,34],{45:244,46:$Vn1}),o($Vo1,[2,28]),o($Vo1,[2,29]),o($Vo1,[2,30]),o($Vo1,[2,31]),o($Vy,[2,52],{106:$V01,107:$V11}),{14:$VC,28:110,31:$VD,47:[1,246],59:145,60:247,69:111,73:$VE,100:97,108:93,110:95,114:96,117:98,118:99,119:$VF,120:101,121:$VG,122:$VH,123:$VI,124:$VJ,125:$VK,126:$VL,128:113},o($Vy,[2,55]),o($VS,[2,77],{106:$V01,107:$V11}),{14:$VC,28:110,31:$VD,59:248,69:111,73:$VE,100:97,108:93,110:95,114:96,117:98,118:99,119:$VF,120:101,121:$VG,122:$VH,123:$VI,124:$VJ,125:$VK,126:$VL,128:113},{14:$VC,28:110,31:$VD,59:249,69:111,73:$VE,100:97,108:93,110:95,114:96,117:98,118:99,119:$VF,120:101,121:$VG,122:$VH,123:$VI,124:$VJ,125:$VK,126:$VL,128:113},{13:[2,89]},{14:$VC,28:110,31:$VD,69:111,73:$VE,100:97,108:250,110:95,114:96,117:98,118:99,119:$VF,120:101,121:$VG,122:$VH,123:$VI,124:$VJ,125:$VK,126:$VL,128:113},o($Vp1,[2,91]),{16:[1,251]},{14:$VC,28:110,31:$VD,69:111,73:$VE,100:97,110:252,114:96,117:98,118:99,119:$VF,120:101,121:$VG,122:$VH,123:$VI,124:$VJ,125:$VK,126:$VL,128:113},{14:$VC,28:110,31:$VD,69:111,73:$VE,100:97,110:253,114:96,117:98,118:99,119:$VF,120:101,121:$VG,122:$VH,123:$VI,124:$VJ,125:$VK,126:$VL,128:113},{14:$VC,28:110,31:$VD,69:111,73:$VE,100:97,110:254,114:96,117:98,118:99,119:$VF,120:101,121:$VG,122:$VH,123:$VI,124:$VJ,125:$VK,126:$VL,128:113},{14:$VC,28:110,31:$VD,69:111,73:$VE,100:97,114:255,117:98,118:99,119:$VF,120:101,121:$VG,122:$VH,123:$VI,124:$VJ,125:$VK,126:$VL,128:113},{14:$VC,28:110,31:$VD,69:111,73:$VE,100:97,114:256,117:98,118:99,119:$VF,120:101,121:$VG,122:$VH,123:$VI,124:$VJ,125:$VK,126:$VL,128:113},{14:$VC,28:110,31:$VD,69:111,73:$VE,100:97,114:257,117:98,118:99,119:$VF,120:101,121:$VG,122:$VH,123:$VI,124:$VJ,125:$VK,126:$VL,128:113},{14:$VC,28:110,31:$VD,69:111,73:$VE,100:97,114:258,117:98,118:99,119:$VF,120:101,121:$VG,122:$VH,123:$VI,124:$VJ,125:$VK,126:$VL,128:113},{14:$VC,28:110,31:$VD,69:111,73:$VE,100:259,117:98,118:99,119:$VF,120:101,121:$VG,122:$VH,123:$VI,124:$VJ,125:$VK,126:$VL,128:113},{14:$VC,28:110,31:$VD,69:111,73:$VE,100:260,117:98,118:99,119:$VF,120:101,121:$VG,122:$VH,123:$VI,124:$VJ,125:$VK,126:$VL,128:113},{14:$VC,28:110,31:$VD,69:111,73:$VE,117:261,118:99,119:$VF,120:101,121:$VG,122:$VH,123:$VI,124:$VJ,125:$VK,126:$VL,128:113},{14:$VC,28:110,31:$VD,69:111,73:$VE,117:262,118:99,119:$VF,120:101,121:$VG,122:$VH,123:$VI,124:$VJ,125:$VK,126:$VL,128:113},{14:$VC,28:110,31:$VD,69:111,73:$VE,117:263,118:99,119:$VF,120:101,121:$VG,122:$VH,123:$VI,124:$VJ,125:$VK,126:$VL,128:113},{14:$VC,28:110,31:$VD,69:111,73:$VE,117:264,118:99,119:$VF,120:101,121:$VG,122:$VH,123:$VI,124:$VJ,125:$VK,126:$VL,128:113},o($VW,[2,149]),o($VW,[2,152]),o($VW,[2,153]),o($VR,$Vo,{127:70,129:73,46:$Vq,130:$Vb1}),{33:[1,265],106:$V01,107:$V11},o($VW,[2,162]),{14:$Va1,69:150,128:113,131:$VU,132:$VV},{11:266,14:[1,267]},{12:[2,111],91:268,92:[1,269],93:[1,270]},{14:$VC,28:110,31:$VD,59:271,69:111,73:$VE,100:97,108:93,110:95,114:96,117:98,118:99,119:$VF,120:101,121:$VG,122:$VH,123:$VI,124:$VJ,125:$VK,126:$VL,128:113},o([10,13],[2,97]),{13:[2,113]},o($Vu,[2,58]),o($Vc1,[2,60]),o($Vd1,[2,62]),o($Vd1,[2,63]),o($Vd1,[2,67]),o($Vd1,[2,69]),o($Vd1,[2,70]),o($Vd1,[2,71]),o($Vd1,[2,72]),{13:[1,272],106:$V01,107:$V11},o($Vd1,[2,74]),o($Vd1,[2,75]),{14:$VC,28:110,31:$VD,59:273,69:111,73:$VE,100:97,108:93,110:95,114:96,117:98,118:99,119:$VF,120:101,121:$VG,122:$VH,123:$VI,124:$VJ,125:$VK,126:$VL,128:113},{14:$VC,28:110,31:$VD,69:111,73:$VE,100:274,117:98,118:99,119:$VF,120:101,121:$VG,122:$VH,123:$VI,124:$VJ,125:$VK,126:$VL,128:113},o($Vq1,[2,120]),o($Vq1,[2,121]),{14:$VC,28:110,31:$VD,59:90,69:111,73:$VE,100:97,108:93,110:95,114:96,117:98,118:99,119:$VF,120:101,121:$VG,122:$VH,123:$VI,124:$VJ,125:$VK,126:$VL,128:113},{13:[2,124]},{14:$VC,28:110,31:$VD,59:145,60:275,69:111,73:$VE,100:97,108:93,110:95,114:96,117:98,118:99,119:$VF,120:101,121:$VG,122:$VH,123:$VI,124:$VJ,125:$VK,126:$VL,128:113},o($VW,[2,173]),{15:$Vf1,33:$Vg1,135:276,136:227},o($VW,[2,177]),{14:$VC,28:110,31:$VD,59:277,69:111,73:$VE,100:97,108:93,110:95,114:96,117:98,118:99,119:$VF,120:101,121:$VG,122:$VH,123:$VI,124:$VJ,125:$VK,126:$VL,128:113},{33:[1,278]},{14:$VC,28:110,31:$VD,59:279,69:111,73:$VE,100:97,108:93,110:95,114:96,117:98,118:99,119:$VF,120:101,121:$VG,122:$VH,123:$VI,124:$VJ,125:$VK,126:$VL,128:113},o($VT,[2,167],{129:280,46:$Vq}),{10:$Vi1,16:$Vj1,34:281},{10:$Vm,35:282},{14:$VX,17:284,36:283,37:[1,285],38:167,39:$VY,40:$VZ,41:$V_,42:$V$},{33:[2,37]},{15:$Vk1,33:$Vl1,49:286,50:237},{14:[1,287]},{14:$VX,17:288,38:167,39:$VY,40:$VZ,41:$V_,42:$V$},{14:$VX,17:289,38:167,39:$VY,40:$VZ,41:$V_,42:$V$},o($Vy,[2,51]),o($Vy,[2,48]),{14:$VX,17:290,38:167,39:$VY,40:$VZ,41:$V_,42:$V$},o($Vm1,[2,33]),{47:[1,291]},o($Vy,[2,53]),{47:[1,292]},o($V21,[2,127]),{16:[1,293],106:$V01,107:$V11},o($V31,[2,130]),{10:$VB,14:$VC,28:110,31:$VD,59:295,61:296,69:111,73:$VE,81:294,100:97,108:93,110:95,114:96,117:98,118:99,119:$VF,120:101,121:$VG,122:$VH,123:$VI,124:$VJ,125:$VK,126:$VL,128:113},o($V41,[2,132]),o($V41,[2,133]),o($V41,[2,134]),o($V51,[2,136]),o($V51,[2,137]),o($V51,[2,138]),o($V51,[2,139]),o($V81,[2,141]),o($V81,[2,142]),o($Vr1,[2,144],{74:$V91}),o($Vr1,[2,145],{74:$V91}),o($Vr1,[2,146],{74:$V91}),o($Vr1,[2,147],{74:$V91}),o($VW,[2,154]),{12:[1,297],15:[1,298]},{16:[1,299]},{12:[1,300]},{14:$VC,28:110,31:$VD,59:301,69:111,73:$VE,100:97,108:93,110:95,114:96,117:98,118:99,119:$VF,120:101,121:$VG,122:$VH,123:$VI,124:$VJ,125:$VK,126:$VL,128:113},{16:[1,302]},{16:[1,303],106:$V01,107:$V11},o($Vd1,[2,73]),{13:[1,304],106:$V01,107:$V11},{33:[1,305],72:$V61,73:$V71},o($Ve1,[2,125]),o($VW,[2,176]),o($Vh1,[2,178],{106:$V01,107:$V11}),o($VR,[2,169]),{33:[1,306],106:$V01,107:$V11},o($VT,[2,166]),{10:$Vm,35:307},o($Vd,[2,23]),{10:[2,24]},{10:[2,26]},{10:[2,27]},{33:[2,38]},{16:[1,308]},o($Vh1,[2,40]),o($Vy,$Vz,{58:309,9:$VA}),{44:[1,310]},o($Vm1,[2,36],{45:311,46:$Vn1}),o($Vy,[2,54]),{14:$VC,28:110,31:$VD,59:312,69:111,73:$VE,100:97,108:93,110:95,114:96,117:98,118:99,119:$VF,120:101,121:$VG,122:$VH,123:$VI,124:$VJ,125:$VK,126:$VL,128:113},{12:$Vs1,15:$Vt1,82:313},o($Vu1,[2,95],{106:$V01,107:$V11}),o($Vu1,[2,96]),{13:[1,316]},{14:[1,317]},{14:$VX,17:318,38:167,39:$VY,40:$VZ,41:$V_,42:$V$},o($Vk,[2,104]),{16:[1,319],106:$V01,107:$V11},{2:$VM,12:[2,110],14:$V2,20:125,21:126,22:127,23:128,24:129,25:130,26:131,27:132,28:133,29:137,51:19,52:$V4,53:$V5,63:320,64:124,65:$VN,66:$VO,67:$VP,68:21,69:20,79:22,84:24,87:35,88:$V6,89:$V7,94:$V8,95:$V9,96:$Va,105:$Vb,128:34,139:$Vc},o($Vc1,[2,108],{51:19,69:20,68:21,79:22,84:24,128:34,87:35,64:124,20:125,21:126,22:127,23:128,24:129,25:130,26:131,27:132,28:133,29:137,63:321,2:$VM,14:$V2,52:$V4,53:$V5,65:$VN,66:$VO,67:$VP,88:$V6,89:$V7,94:$V8,95:$V9,96:$Va,105:$Vb,139:$Vc}),{14:$VQ,68:323,69:142,98:322,128:113},{10:$Vm,35:324},{13:[2,182]},o($Vd,[2,22]),{14:$VX,17:325,38:167,39:$VY,40:$VZ,41:$V_,42:$V$},o($Vy,[2,50]),o($Vm1,[2,32]),o($Vm1,[2,35]),o($V21,[2,128]),o($Vp1,[2,92]),{14:[1,326]},o($Vp1,[2,94]),o($Vd,[2,3]),{16:[1,327]},o($Vu1,[2,6]),o($Vc1,[2,106],{51:19,69:20,68:21,79:22,84:24,128:34,87:35,64:124,20:125,21:126,22:127,23:128,24:129,25:130,26:131,27:132,28:133,29:137,63:328,2:$VM,14:$V2,52:$V4,53:$V5,65:$VN,66:$VO,67:$VP,88:$V6,89:$V7,94:$V8,95:$V9,96:$Va,105:$Vb,139:$Vc}),{12:[2,109]},o($Vc1,[2,107]),{33:[1,329]},{33:[2,116]},o($Vk,[2,115]),o($Vh1,[2,41]),{16:[1,330]},{14:$VX,17:331,38:167,39:$VY,40:$VZ,41:$V_,42:$V$},o($Vc1,[2,105]),{10:$Vm,35:332},{10:$VB,14:$VC,28:110,31:$VD,59:295,61:296,69:111,73:$VE,81:333,100:97,108:93,110:95,114:96,117:98,118:99,119:$VF,120:101,121:$VG,122:$VH,123:$VI,124:$VJ,125:$VK,126:$VL,128:113},o($Vu1,[2,5]),o($Vk,[2,114]),{12:$Vs1,15:$Vt1,82:334},o($Vp1,[2,93])],
defaultActions: {3:[2,2],21:[2,87],22:[2,88],32:[2,42],33:[2,43],37:[2,1],38:[2,7],49:[2,86],52:[2,80],53:[2,81],54:[2,82],55:[2,83],56:[2,84],57:[2,85],59:[2,4],72:[2,179],80:[2,180],92:[2,90],141:[2,118],153:[2,181],157:[2,183],178:[2,89],206:[2,113],224:[2,124],236:[2,37],283:[2,24],284:[2,26],285:[2,27],286:[2,38],306:[2,182],320:[2,109],323:[2,116]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

     var symbolt = new SymbolTable(null);
     //var global_var = [];
     var structures = [];
     var nuevo_arreglo = false;
     var existe = false;
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:// comentario simple línea
break;
case 1:// comentario multiple líneas
break;
case 2:return 103;
break;
case 3:return 104;
break;
case 4:return 74;
break;
case 5:return 72;
break;
case 6:return 73;   
break;
case 7:return 75;
break;
case 8:return 76;
break;
case 9:return 77;
break;
case 10:return 107;
break;
case 11:return 115;
break;
case 12:return 116;
break;
case 13:return 43;
break;
case 14:return 44;
break;
case 15:return 113;
break;
case 16:return 112;
break;
case 17:return 111;
break;
case 18:return 46;     
break;
case 19:return 47;
break;
case 20:return 10;     
break;
case 21:return 12;
break;
case 22:return 31;     
break;
case 23:return 33;
break;
case 24:return 15;
break;
case 25:return 130;
break;
case 26:return 9;
break;
case 27:return 13;
break;
case 28:return 16;
break;
case 29:return 119;
break;
case 30:return 109;
break;
case 31:return 106;
break;
case 32:return 126;
break;
case 33:return 125;
break;
case 34:return 30;
break;
case 35:return 42;
break;
case 36:return 39;
break;
case 37:return 53;
break;
case 38:return 52;
break;
case 39:return 7;
break;
case 40:return 41;
break;
case 41:return 123;
break;
case 42:return 124;
break;
case 43:return 88;
break;
case 44:return 86;
break;
case 45:return 89;
break;
case 46:return 92;
break;
case 47:return 93;
break;
case 48:return 65;
break;
case 49:return 66;
break;
case 50:return 67;
break;
case 51:return 105;
break;
case 52:return 37;
break;
case 53:return 96;
break;
case 54:return 94;
break;
case 55:return 95;
break;
case 56:return 40;
break;
case 57:return 102;
break;
case 58:return 101;
break;
case 59:return 138;
break;
case 60:return 131;
break;
case 61:return 132;
break;
case 62:return 139;
break;
case 63:
break;
case 64:return 121;
break;
case 65:return 122;
break;
case 66:return 14;
break;
case 67:return 5;
break;
case 68: try{ add_error_E( {error: yy_.yytext, type: 'LEXICO', line: yy_.yylloc.first_line, column: yy_.yylloc.first_column} ); }catch(e){ console.log(e); } 
break;
}
},
rules: [/^(?:\/\/.*)/,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/,/^(?:\+\+)/,/^(?:--)/,/^(?:\*\*)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:\?)/,/^(?:>=)/,/^(?:<=)/,/^(?:<)/,/^(?:>)/,/^(?:===)/,/^(?:==)/,/^(?:!=)/,/^(?:\[)/,/^(?:\])/,/^(?:\{)/,/^(?:\})/,/^(?:\()/,/^(?:\))/,/^(?:,)/,/^(?:\.)/,/^(?:=)/,/^(?:;)/,/^(?::)/,/^(?:!)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:undefined\b)/,/^(?:null\b)/,/^(?:function\b)/,/^(?:Array\b)/,/^(?:number\b)/,/^(?:let\b)/,/^(?:const\b)/,/^(?:type\b)/,/^(?:string\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:default\b)/,/^(?:break\b)/,/^(?:continue\b)/,/^(?:return\b)/,/^(?:console\.log\b)/,/^(?:void\b)/,/^(?:for\b)/,/^(?:while\b)/,/^(?:do\b)/,/^(?:boolean\b)/,/^(?:in\b)/,/^(?:of\b)/,/^(?:push\b)/,/^(?:pop\b)/,/^(?:length\b)/,/^(?:graficar_ts\b)/,/^(?:[ \r\t\n]+)/,/^(?:[0-9]+\.[0-9]+\b|[0-9]+\b)/,/^(?:([\"](\\"|[^"])*[^\\][\"])|[\"][\"]|[\'][^']*[\']|`[^`]*`)/,/^(?:([a-zA-Z"_"])[a-z0-9A-Z"_""ñ""Ñ"]*)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = interprete;
exports.Parser = interprete.Parser;
exports.parse = function () { return interprete.parse.apply(interprete, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}
