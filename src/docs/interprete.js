/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
import Logical from './clases/Logical';
import Relational from './clases/Relational';
import Arithmetical from './clases/Arithmetical';
import Value from './clases/Value';
import Print from './clases/Print';
import Declaration from './clases/Declaration';
import Function from './clases/Function';
import Return from './clases/Return';
import Call from './clases/Call';
import IfList from './clases/IfList';
import Else from './clases/Else';
import If from './clases/If';
import While from './clases/While';
import DoWhile from './clases/DoWhile';
import Assignment from './clases/Assignment';
import Switch from './clases/Switch';
import For from './clases/For';
import Unary from './clases/Unary'; 
import Break from './clases/Break';
import Continue from './clases/Continue';
import Cast from './clases/Cast';
import Type from './clases/Type';
import Count from './clases/Counters';
import SymbolTable from './clases/SymbolTable';
import TernaryOperator from './clases/TernaryOperator';
import { add_error_E } from './clases/Reports';
import { simbtable_E } from './clases/Reports';
export var interprete = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,16],$V1=[1,26],$V2=[1,27],$V3=[1,28],$V4=[1,13],$V5=[1,14],$V6=[1,15],$V7=[1,31],$V8=[1,22],$V9=[1,23],$Va=[1,24],$Vb=[1,25],$Vc=[5,12,91,92],$Vd=[2,5,12,13,52,53,64,66,67,87,88,91,92,93,94,103],$Ve=[1,60],$Vf=[1,52],$Vg=[1,51],$Vh=[1,48],$Vi=[1,50],$Vj=[1,53],$Vk=[1,54],$Vl=[1,55],$Vm=[1,56],$Vn=[1,57],$Vo=[1,79],$Vp=[1,82],$Vq=[9,71,72,73,74,75,76],$Vr=[2,164],$Vs=[1,84],$Vt=[1,92],$Vu=[1,90],$Vv=[1,91],$Vw=[1,89],$Vx=[2,5,12,13,52,53,64,66,67,85,87,88,91,92,93,94,103],$Vy=[1,97],$Vz=[1,98],$VA=[12,14,15,21,33,46,65,105,106],$VB=[12,14,15,21,33,46,65,105,106,108],$VC=[12,14,15,21,33,46,65,105,106,108,110,111,112],$VD=[12,14,15,21,33,43,44,46,65,105,106,108,110,111,112,114,115],$VE=[12,14,15,21,33,43,44,46,65,71,72,105,106,108,110,111,112,114,115],$VF=[1,112],$VG=[12,14,15,21,33,43,44,46,65,71,72,73,74,75,76,105,106,108,110,111,112,114,115],$VH=[12,14,15,21,33,43,44,46,65,71,72,73,74,75,76,101,102,105,106,108,110,111,112,114,115],$VI=[1,117],$VJ=[1,120],$VK=[2,46],$VL=[14,21],$VM=[2,54],$VN=[1,123],$VO=[1,128],$VP=[9,12,14,15,21,33,43,44,46,65,71,72,73,74,75,76,101,102,105,106,108,110,111,112,114,115],$VQ=[9,12,14,15,21,33,43,44,46,65,71,72,73,74,75,76,101,102,105,106,108,110,111,112,114,115,130],$VR=[1,176],$VS=[1,173],$VT=[1,174],$VU=[1,175],$VV=[1,171],$VW=[1,194],$VX=[1,193],$VY=[14,33],$VZ=[12,14,15,21,33,43,44,46,65,71,72,74,75,76,105,106,108,110,111,112,114,115],$V_=[9,14,21,44],$V$=[9,14,21,44,45],$V01=[2,5,12,13,14,21,52,53,64,66,67,87,88,91,92,93,94,103],$V11=[1,231],$V21=[1,230],$V31=[12,14],$V41=[12,91,92];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"ini":3,"INSTRUCTIONS":4,"EOF":5,"DEFTYPES":6,"restype":7,"TYPEDEFID":8,"igual":9,"corchetea":10,"ATTRIB":11,"corchetec":12,"id":13,"coma":14,"dospuntos":15,"TYPES":16,"INSTRUCTIONSG":17,"INSTRUCTIONG":18,"FUNCTION":19,"DECLARATION":20,"puntocoma":21,"ASSIGNMENT":22,"IF":23,"SWITCH":24,"WHILE":25,"DOWHILE":26,"FOR":27,"PRINT":28,"CALLF":29,"resfunction":30,"parenta":31,"LISTAPARAMETROS":32,"parentc":33,"RETURNT":34,"BLOCK":35,"TYPESF":36,"resvoid":37,"TYPE":38,"resnumber":39,"resboolean":40,"resstring":41,"resarray":42,"menor":43,"mayor":44,"llavea":45,"llavec":46,"MULTIDIMENSION":47,"BETHA":48,"LISTAPARAMETROSPRIMA":49,"ALPHA":50,"TYPEVAR":51,"resconst":52,"reslet":53,"LISTID":54,"DECBETHA":55,"LISTIDPRIM":56,"DECALPHA":57,"ASSVALUE":58,"EXPRT":59,"DECASSTYPE":60,"BLOCK2":61,"INSTRUCTION":62,"ASSIGMENTWITHTYPE":63,"resbreak":64,"SEMICOLON":65,"rescontinue":66,"resreturn":67,"IDVALOR":68,"OPERADOR":69,"DECINC":70,"suma":71,"resta":72,"potencia":73,"multiplicacion":74,"slash":75,"modulo":76,"CONTENTASWT":77,"IDVALORASS":78,"ASSIGNMENTTYPE":79,"VALUETYPE":80,"ASSIGNMENTTYPEPRIM":81,"PARAMETROUNITARIO":82,"CELSE":83,"ELSE":84,"reselse":85,"IFF":86,"resif":87,"resswitch":88,"CASES":89,"DEFAULT":90,"rescase":91,"resdefault":92,"reswhile":93,"resdo":94,"resfor":95,"DEC":96,"ASSIG":97,"FINON":98,"resof":99,"resin":100,"incremento":101,"decremento":102,"resprint":103,"DATAPRINT":104,"or":105,"quest":106,"EXPRT2":107,"and":108,"EXPR":109,"diferente":110,"identico":111,"referencias":112,"EXPR1":113,"mayorigual":114,"menorigual":115,"EXP":116,"EXP1":117,"EXP2":118,"not":119,"EXP3":120,"number":121,"cadena":122,"restrue":123,"resfalse":124,"resnull":125,"resundefined":126,"IDVALOR2":127,"IDARR":128,"ARREGLO":129,"punto":130,"PARAMETERS":131,"PARALPHA":132,"PARAMETERSPRIM":133,"PARBETHA":134,"IDVALOR2ASS":135,"respush":136,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"restype",9:"igual",10:"corchetea",12:"corchetec",13:"id",14:"coma",15:"dospuntos",21:"puntocoma",30:"resfunction",31:"parenta",33:"parentc",37:"resvoid",39:"resnumber",40:"resboolean",41:"resstring",42:"resarray",43:"menor",44:"mayor",45:"llavea",46:"llavec",52:"resconst",53:"reslet",64:"resbreak",65:"SEMICOLON",66:"rescontinue",67:"resreturn",71:"suma",72:"resta",73:"potencia",74:"multiplicacion",75:"slash",76:"modulo",85:"reselse",87:"resif",88:"resswitch",91:"rescase",92:"resdefault",93:"reswhile",94:"resdo",95:"resfor",99:"resof",100:"resin",101:"incremento",102:"decremento",103:"resprint",105:"or",106:"quest",108:"and",110:"diferente",111:"identico",112:"referencias",114:"mayorigual",115:"menorigual",119:"not",121:"number",122:"cadena",123:"restrue",124:"resfalse",125:"resnull",126:"resundefined",130:"punto",136:"respush"},
productions_: [0,[3,2],[3,1],[6,6],[8,1],[11,5],[11,3],[17,2],[17,1],[18,1],[18,2],[18,2],[18,1],[18,1],[18,1],[18,1],[18,2],[18,1],[18,2],[18,2],[18,1],[19,7],[19,6],[34,2],[34,0],[36,1],[36,1],[38,1],[38,1],[38,1],[38,1],[16,4],[16,3],[16,1],[47,3],[47,2],[32,2],[49,2],[49,0],[48,3],[50,4],[51,1],[51,1],[20,2],[54,2],[56,2],[56,0],[55,4],[55,2],[57,5],[57,3],[58,2],[58,3],[58,2],[58,0],[35,2],[61,2],[61,1],[4,2],[4,1],[62,2],[62,1],[62,1],[62,1],[62,1],[62,2],[62,2],[62,2],[62,2],[62,2],[62,3],[62,2],[62,1],[22,4],[22,2],[22,3],[69,1],[69,1],[69,1],[69,1],[69,1],[69,1],[63,2],[63,2],[63,2],[77,4],[77,2],[60,2],[79,4],[81,5],[81,1],[80,1],[80,1],[82,3],[23,2],[83,3],[83,1],[84,2],[84,0],[86,3],[24,6],[89,5],[89,4],[89,4],[89,3],[90,3],[90,2],[90,0],[25,3],[26,4],[27,9],[27,7],[97,1],[96,1],[96,1],[96,0],[98,1],[98,1],[70,1],[70,1],[28,4],[104,3],[104,1],[59,3],[59,5],[59,1],[107,3],[107,1],[109,3],[109,3],[109,3],[109,1],[113,3],[113,3],[113,3],[113,3],[113,1],[116,3],[116,3],[116,1],[117,3],[117,3],[117,3],[117,3],[117,1],[118,2],[118,1],[120,1],[120,2],[120,3],[120,1],[120,1],[120,1],[120,1],[120,1],[120,1],[120,1],[120,2],[68,2],[68,2],[128,2],[129,4],[129,3],[127,2],[127,0],[29,3],[131,2],[131,1],[132,1],[133,2],[133,1],[134,2],[78,2],[78,2],[135,2],[135,5]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

          console.log("todo termino bien")
          var tab = new SymbolTable(null);
          var tmp = $$[$0-1];
          for(let aux of tmp)
          {
               aux.operate(tab);
          }
          /*
          for(var i = 0; i< tmp.length; i++){
               tmp[i].operate(tab);
          }*/
     
break;
case 2:
 console.log("termino vacio") 
break;
case 3: case 11: case 12: case 13: case 14: case 15: case 16: case 17: case 18: case 19:
 
break;
case 4:
 structures.push({name: $$[$0], atributes: []}); 
break;
case 5: case 6:
 structures[structures.length - 1].atributes.push({name: $$[$0-2], type: $$[$0]}); 
break;
case 7: case 35:
 this.$ = $$[$0-1] + $$[$0]; 
break;
case 8: case 23: case 25: case 30: case 36: case 51: case 53: case 61: case 62: case 63: case 64: case 76: case 77: case 78: case 79: case 80: case 81: case 87: case 91: case 92: case 116: case 117: case 155:
 this.$ = $$[$0]; 
break;
case 9:
 symbolt.addFunction($$[$0]); 
break;
case 10:
 if($$[$0-1] != null){$$[$0-1].type_var = Type.GLOBAL; global_var.push($$[$0-1]);} /* declaration inst */
break;
case 20: case 72:
 try{ add_error_E( {error: yytext, type: 'SINTACTICO', line: _$[$0].first_line, column: _$[$0].first_column} ); }catch(e){} 
break;
case 21:
 this.$ = new Function(/*0,*/$$[$0-1].id,$$[$0-1].access,$$[$0-5],$$[$0-3],$$[$0],this._$.first_line,this._$.first_column); 
break;
case 22:
 this.$ = new Function(/*0,*/$$[$0-1].id,$$[$0-1].access,$$[$0-4],null,$$[$0],this._$.first_line,this._$.first_column); 
break;
case 24: case 26:
 this.$ = {id: Type.VOID, access: Type.VALOR, type: Type.VALOR}; 
break;
case 27:
 this.$ = Type.ENTERO; 
break;
case 28:
 this.$ = Type.BOOL; 
break;
case 29:
 this.$ = Type.CARACTER; 
break;
case 31:
 this.$ = {id: $$[$0-1], access: Type.VECTOR, type: Type.PRIMITIVO}; 
break;
case 32:
 this.$ = {id: $$[$0-2], access: Type.VECTOR, type: Type.PRIMITIVO}; if($$[$0-2] != Type.ENTERO && $$[$0-2] != Type.BOOL && $$[$0-2] != Type.CARACTER) this.$.type = Type.OBJETO; 
break;
case 33:
 this.$ = {id: $$[$0], access: Type.VALOR, type: Type.VALOR}; if($$[$0] != Type.ENTERO && $$[$0] != Type.BOOL && $$[$0] != Type.CARACTER) this.$.type = Type.OBJETO; 
break;
case 34:
 this.$ = $$[$0-2] + $$[$0-1] + $$[$0]; 
break;
case 37:
 this.$ = $$[$0-2];
break;
case 39:
 this.$ = []; this.$.push(new Declaration([$$[$0-2]],null,$$[$0].id,$$[$0].access,Type.LOCAL,Type.VAR,/*Type.PRIMITIVO,*/this._$.first_line,this._$.first_column)); 
break;
case 40:
 this.$ = $$[$0-4]; this.$.push(new Declaration([$$[$0-2]],null,$$[$0].id,$$[$0].access,Type.LOCAL,Type.VAR,/*Type.PRIMITIVO,*/this._$.first_line,this._$.first_column)); 
break;
case 41:
this.$ = Type.CONST;
break;
case 42:
this.$ = Type.VAR;
break;
case 43:
 for(var a of $$[$0]){a.type_c = $$[$0-1];} this.$ = $$[$0]; this.$ = $$[$0]; 
break;
case 44:
 this.$ = $$[$0];  /*testdec*/ 
break;
case 45:
 this.$ = $$[$0-1]; /*testdec*/ 
break;
case 46:
 this.$ = $$[$0];
break;
case 47:
 this.$ = []; this.$.push(new Declaration($$[$0-3],$$[$0],$$[$0-1].id,Type.VALOR,Type.LOCAL,null,/*Type.PRIMITIVO,0,*/this._$.first_line,this._$.first_column)); if(nuevo_arreglo) this.$[this.$.length-1].type = Type.ARREGLO; nuevo_arreglo = false;
break;
case 48:
 this.$ = []; this.$.push(new Declaration($$[$0-1],$$[$0],undefined,Type.VALOR,Type.LOCAL,null,/*Type.PRIMITIVO,0,*/this._$.first_line,this._$.first_column)); if(nuevo_arreglo) this.$[this.$.length-1].type = Type.ARREGLO; nuevo_arreglo = false;
break;
case 49:
 this.$ = $$[$0-5]; this.$.push(new Declaration($$[$0-3],$$[$0],$$[$0-1].id,Type.VALOR,Type.LOCAL,null,/*Type.PRIMITIVO,0,*/this._$.first_line,this._$.first_column)); /*testdec*/  if(nuevo_arreglo) this.$[this.$.length-1].type = Type.ARREGLO; nuevo_arreglo = false;  
break;
case 50:
 this.$ = $$[$0-3]; this.$.push(new Declaration($$[$0-1],$$[$0],undefined,Type.VALOR,Type.LOCAL,null,/*Type.PRIMITIVO,0,*/this._$.first_line,this._$.first_column)); /*testdec*/ if(nuevo_arreglo) this.$[this.$.length-1].type = Type.ARREGLO; nuevo_arreglo = false;
break;
case 52:
 this.$ = undefined; nuevo_arreglo = true; 
break;
case 54:
 this.$ = undefined; 
break;
case 55: case 163: case 174:
 this.$ = $$[$0];  
break;
case 56:
 this.$ = $$[$0-1]; /*here*/
break;
case 57: case 90: case 164:
 this.$ = []; 
break;
case 58:
 if(Array.isArray($$[$0-1])){ for(var a of $$[$0-1]){ $$[$0].unshift(a); }}else{$$[$0].unshift($$[$0-1]);}  this.$ = $$[$0]; /*deb*/
break;
case 59:
 if(Array.isArray($$[$0])){ this.$ = $$[$0]; }else{ this.$ = [$$[$0]]; } /*deb*/
break;
case 60: case 65: case 66: case 67: case 83: case 149:
 this.$ = $$[$0-1]; 
break;
case 68:
this.$ = new Break(Type.BREAK,this._$.first_line,this._$.first_column)
break;
case 69:
this.$ = new Continue(Type.CONTINUE,this._$.first_line,this._$.first_column)
break;
case 70:
this.$ = new Return(count.getP(),$$[$0-1],null,Type.VALOR,this._$.first_line,this._$.first_column);
break;
case 71:
this.$ = new Return(count.getP(),null,null,Type.VALOR,this._$.first_line,this._$.first_column);
break;
case 73:
 this.$ = new Assignment($$[$0-3],$$[$0],this._$.first_line,this._$.first_column); this.$.change_tipe($$[$0-2]);
break;
case 74:
 this.$ = new Unary($$[$0-1],$$[$0],this._$.first_line,this._$.first_column); 
break;
case 75:
 this.$ = new Assignment($$[$0-2],$$[$0],this._$.first_line,this._$.first_column); 
break;
case 82:
 this.$ = $$[$0]; this.$.id = $$[$0-1]; 
break;
case 85:
 this.$ = new Assignment($$[$0-3],new Value(null,Type.ARREGLO,Type.VALOR,this._$.first_line,this._$.first_column),this._$.first_line,this._$.first_column); 
break;
case 86:
 this.$ = new Assignment(null,new Value($$[$0],Type.OBJETO,Type.VALOR,this._$.first_line,this._$.first_column),this._$.first_line,this._$.first_column); 
break;
case 88: case 89:
 this.$ = $$[$0]; this.$.unshift([$$[$0-3], $$[$0-1]]); 
break;
case 93:
this.$ = $$[$0-1];
break;
case 94:
var tf = $$[$0-1];tf.elsebody = $$[$0];this.$ = tf;
break;
case 95:
var tc = $$[$0-2]; tc.lif.push($$[$0]); this.$ = tc;
break;
case 96:
var t = new IfList();t.lif.push($$[$0]);this.$ = t;
break;
case 97:
this.$ = new Else($$[$0],this._$.first_line,this._$.first_column);
break;
case 98: case 107:
this.$ = null;
break;
case 99:
this.$ = new If($$[$0-1],$$[$0],Type.IF,this._$.first_line,this._$.first_column);
break;
case 100:
var ts = new Switch($$[$0-4],$$[$0-2],$$[$0-1],this._$.first_line,this._$.first_column);console.log("entrooo");this.$ = ts;
break;
case 101:
$$[$0-4].push(new If($$[$0-2],$$[$0],Type.IF,this._$.first_line,this._$.first_column));
break;
case 102:
$$[$0-3].push(new If($$[$0-1],[],Type.IF,this._$.first_line,this._$.first_column));
break;
case 103:
 this.$ = []; this.$.push(new If($$[$0-2],$$[$0],Type.IF,this._$.first_line,this._$.first_column));
break;
case 104:
 this.$ = []; this.$.push(new If($$[$0-1],[],Type.IF,this._$.first_line,this._$.first_column));
break;
case 105: case 112: case 113: case 114: case 125: case 127: case 131: case 136: case 139: case 144: case 146:
this.$ = $$[$0];
break;
case 106:
this.$ = []
break;
case 108:
this.$ = new While($$[$0-1],$$[$0],this._$.first_line,this._$.first_column);
break;
case 109:
this.$ = new DoWhile($$[$0],$$[$0-2],this._$.first_line,this._$.first_column);
break;
case 110:
 if($$[$0-6][0] instanceof Declaration){$$[$0-6].type_var = Type.PRIMITIVO;} this.$ = new For($$[$0-6],$$[$0-4],$$[$0-2],$$[$0],this._$.first_line,this._$.first_column);  
break;
case 111:
 if($$[$0-4][0] instanceof Declaration){$$[$0-4].type_var = Type.PRIMITIVO;} this.$ = new For($$[$0-4],null,$$[$0-2],$$[$0],this._$.first_line,this._$.first_column); 
break;
case 115:
this.$ = "";
break;
case 118:
this.$ = Type.INCREMENTO;
break;
case 119:
this.$ = Type.DECREMENTO;
break;
case 120:
this.$ = new Print($$[$0-1],null, Type.IMPRIMIR,this._$.first_line,this._$.first_column);
break;
case 121:
 $$[$0].push($$[$0-2]); this.$ = $$[$0]; /*print*/
break;
case 122:
 this.$ = [$$[$0]]; /*print*/
break;
case 123:
this.$ = new Logical($$[$0-2],$$[$0],Type.OR,Type.VALOR,this._$.first_line,this._$.first_column);
break;
case 124:
 this.$ = new TernaryOperator($$[$0-4], $$[$0-2], $$[$0], this._$.first_line,this._$.first_column); 
break;
case 126:
this.$ = new Logical($$[$0-2],$$[$0],Type.AND,Type.VALOR,this._$.first_line,this._$.first_column);
break;
case 128:
this.$ = new Relational($$[$0-2],$$[$0],Type.DIFERENTE,Type.VALOR,this._$.first_line,this._$.first_column);
break;
case 129:
this.$ = new Relational($$[$0-2],$$[$0],Type.IDENTICO,Type.VALOR,this._$.first_line,this._$.first_column);
break;
case 130:
this.$ = new Relational($$[$0-2],$$[$0],Type.REFERENCIA,Type.VALOR,this._$.first_line,this._$.first_column);
break;
case 132:
this.$ = new Relational($$[$0-2],$$[$0],Type.MAYOR,Type.VALOR,this._$.first_line,this._$.first_column);
break;
case 133:
this.$ = new Relational($$[$0-2],$$[$0],Type.MENOR,Type.VALOR,this._$.first_line,this._$.first_column);
break;
case 134:
this.$ = new Relational($$[$0-2],$$[$0],Type.MAYORIGUAL,Type.VALOR,this._$.first_line,this._$.first_column);
break;
case 135:
this.$ = new Relational($$[$0-2],$$[$0],Type.MENORIGUAL,Type.VALOR,this._$.first_line,this._$.first_column);
break;
case 137:
this.$ = new Arithmetical($$[$0-2],$$[$0],Type.SUMA,Type.VALOR,this._$.first_line,this._$.first_column);
break;
case 138:
this.$ = new Arithmetical($$[$0-2],$$[$0],Type.RESTA,Type.VALOR,this._$.first_line,this._$.first_column);
break;
case 140:
this.$ = new Arithmetical($$[$0-2],$$[$0],Type.MULTIPLICACION,Type.VALOR,this._$.first_line,this._$.first_column);
break;
case 141:
this.$ = new Arithmetical($$[$0-2],$$[$0],Type.DIVISION,Type.VALOR,this._$.first_line,this._$.first_column);
break;
case 142:
this.$ = new Arithmetical($$[$0-2],$$[$0],Type.MODULO,Type.VALOR,this._$.first_line,this._$.first_column);
break;
case 143:
this.$ = new Arithmetical($$[$0-2],$$[$0],Type.POTENCIA,Type.VALOR,this._$.first_line,this._$.first_column);
break;
case 145:
this.$ = new Logical($$[$0],null,Type.NOT,Type.VALOR,this._$.first_line,this._$.first_column);
break;
case 147:
this.$ = new Value(Number($$[$0]),Type.ENTERO,Type.VALOR,this._$.first_line,this._$.first_column); 
break;
case 148:
 this.$ = new Value(-1*Number($$[$0]),Type.ENTERO,Type.VALOR,this._$.first_line,this._$.first_column); 
break;
case 150:
this.$ = new Value($$[$0],Type.CADENA,Type.VALOR,this._$.first_line,this._$.first_column);
break;
case 151:
this.$ = new Value(true,Type.BOOL,Type.VALOR,this._$.first_line,this._$.first_column);
break;
case 152:
this.$ = new Value(false,Type.BOOL,Type.VALOR,this._$.first_line,this._$.first_column);
break;
case 153: case 154:
this.$ = new Value($$[$0],Type.NULL,Type.VALOR,this._$.first_line,this._$.first_column);
break;
case 156:
 if($$[$0].length === 1 && $$[$0][0].type === Type.ID){ this.$ = $$[$0][0]; }else{ this.$ = new Value($$[$0],Type.ARREGLO,Type.VALOR,this._$.first_line,this._$.first_column); } 
break;
case 157:
 if($$[$0-1].length == 1){ this.$ = new Unary($$[$0-1][0],$$[$0],this._$.first_line,this._$.first_column); }else{ this.$ = new Unary($$[$0-1][0],$$[$0],this._$.first_line,this._$.first_column);  }  
break;
case 158: case 172:
 this.$ = $$[$0]; this.$.unshift(new Value($$[$0-1],Type.ID,Type.VALOR,this._$.first_line,this._$.first_column)); 
break;
case 159: case 173:
 this.$ = $$[$0]; this.$.unshift($$[$0-1]); 
break;
case 160:
 this.$ = new Value($$[$0-1],Type.ARREGLO,Type.VALOR,this._$.first_line,this._$.first_column); this.$.add_positions($$[$0]); 
break;
case 161:
 this.$ = $$[$0]; this.$.unshift($$[$0-2]);
break;
case 162:
 this.$ = []; this.$.push($$[$0-1]); 
break;
case 165:
 this.$ = new Call($$[$0-2],Type.LLAMADA,null,$$[$0],this._$.first_line,this._$.first_column); 
break;
case 166:
 this.$ = $$[$0]; /*return parametros*/
break;
case 167:
 this.$ = null; 
break;
case 168:
 this.$ = []; this.$.push($$[$0]); 
break;
case 169:
 this.$ = $$[$0-1]; /*parametros call*/
break;
case 170:
 this.$ = $$[$0]; /*parametros call*/
break;
case 171:
 this.$ = $$[$0-2]; this.$.push($$[$0]); 
break;
case 175:
 this.$ = $$[$0-4] + $$[$0-3] + $$[$0-2] + $$[$0-1] + $$[$0]; 
break;
}
},
table: [{2:$V0,3:1,4:2,5:[1,3],13:$V1,20:5,22:19,23:7,24:8,25:9,26:10,28:11,29:12,51:17,52:$V2,53:$V3,62:4,63:6,64:$V4,66:$V5,67:$V6,68:18,78:20,83:21,86:30,87:$V7,88:$V8,93:$V9,94:$Va,103:$Vb,128:29},{1:[3]},{5:[1,32]},{1:[2,2]},o($Vc,[2,59],{62:4,20:5,63:6,23:7,24:8,25:9,26:10,28:11,29:12,51:17,68:18,22:19,78:20,83:21,128:29,86:30,4:33,2:$V0,13:$V1,52:$V2,53:$V3,64:$V4,66:$V5,67:$V6,87:$V7,88:$V8,93:$V9,94:$Va,103:$Vb}),{21:[1,34]},o($Vd,[2,61]),o($Vd,[2,62]),o($Vd,[2,63]),o($Vd,[2,64]),{21:[1,35]},{21:[1,36]},{21:[1,37]},{65:[1,38]},{65:[1,39]},{13:$Ve,21:[1,41],29:58,31:$Vf,59:40,68:59,72:$Vg,107:42,109:43,113:44,116:45,117:46,118:47,119:$Vh,120:49,121:$Vi,122:$Vj,123:$Vk,124:$Vl,125:$Vm,126:$Vn,128:61},o($Vd,[2,72]),{13:[1,64],54:62,55:63},{9:[1,67],69:66,71:[1,68],72:[1,69],73:[1,70],74:[1,71],75:[1,72],76:[1,73],77:65},{21:[1,74]},{21:[1,75]},o($Vd,[2,98],{84:76,85:[1,77]}),{31:$Vo,82:78},{31:$Vo,82:80},{10:$Vp,35:81},{31:[1,83]},o($Vq,$Vr,{127:85,70:86,135:87,129:88,31:$Vs,45:$Vt,101:$Vu,102:$Vv,130:$Vw}),{13:[2,41]},{13:[2,42]},o($Vq,$Vr,{127:93,135:94,130:$Vw}),o($Vx,[2,96]),{31:$Vo,82:95},{1:[2,1]},o($Vc,[2,58]),o($Vd,[2,60]),o($Vd,[2,65]),o($Vd,[2,66]),o($Vd,[2,67]),o($Vd,[2,68]),o($Vd,[2,69]),{65:[1,96],105:$Vy,106:$Vz},o($Vd,[2,71]),o($VA,[2,125],{108:[1,99]}),o($VB,[2,127],{110:[1,100],111:[1,101],112:[1,102]}),o($VC,[2,131],{43:[1,104],44:[1,103],114:[1,105],115:[1,106]}),o($VD,[2,136],{71:[1,107],72:[1,108]}),o($VE,[2,139],{73:$VF,74:[1,109],75:[1,110],76:[1,111]}),o($VG,[2,144]),{13:$Ve,29:58,31:$Vf,68:59,72:$Vg,118:113,119:$Vh,120:49,121:$Vi,122:$Vj,123:$Vk,124:$Vl,125:$Vm,126:$Vn,128:61},o($VG,[2,146]),o($VG,[2,147]),{121:[1,114]},{13:$Ve,29:58,31:$Vf,59:115,68:59,72:$Vg,107:42,109:43,113:44,116:45,117:46,118:47,119:$Vh,120:49,121:$Vi,122:$Vj,123:$Vk,124:$Vl,125:$Vm,126:$Vn,128:61},o($VG,[2,150]),o($VG,[2,151]),o($VG,[2,152]),o($VG,[2,153]),o($VG,[2,154]),o($VG,[2,155]),o($VG,[2,156],{70:116,101:$Vu,102:$Vv}),o($VH,$Vr,{127:85,129:88,31:$Vs,45:$Vt,130:$VI}),o($VH,$Vr,{127:93,130:$VI}),{21:[2,43]},{14:$VJ,21:$VK,56:118,57:119},o($VL,$VM,{58:122,9:$VN,15:[1,121]}),o($Vd,[2,82]),{9:[1,124]},{10:$VO,13:$Ve,29:58,31:$Vf,45:[1,126],59:125,60:127,68:59,72:$Vg,107:42,109:43,113:44,116:45,117:46,118:47,119:$Vh,120:49,121:$Vi,122:$Vj,123:$Vk,124:$Vl,125:$Vm,126:$Vn,128:61},{9:[2,76]},{9:[2,77]},{9:[2,78]},{9:[2,79]},{9:[2,80]},{9:[2,81]},o($Vd,[2,83]),o($Vd,[2,84]),o($Vd,[2,94]),{10:$Vp,35:130,86:129,87:$V7},{10:[1,131]},{13:$Ve,29:58,31:$Vf,59:132,68:59,72:$Vg,107:42,109:43,113:44,116:45,117:46,118:47,119:$Vh,120:49,121:$Vi,122:$Vj,123:$Vk,124:$Vl,125:$Vm,126:$Vn,128:61},{10:$Vp,35:133},{93:[1,134]},{2:$V0,4:136,12:[1,137],13:$V1,20:5,22:19,23:7,24:8,25:9,26:10,28:11,29:12,51:17,52:$V2,53:$V3,61:135,62:4,63:6,64:$V4,66:$V5,67:$V6,68:18,78:20,83:21,86:30,87:$V7,88:$V8,93:$V9,94:$Va,103:$Vb,128:29},{13:$Ve,29:58,31:$Vf,59:139,68:59,72:$Vg,104:138,107:42,109:43,113:44,116:45,117:46,118:47,119:$Vh,120:49,121:$Vi,122:$Vj,123:$Vk,124:$Vl,125:$Vm,126:$Vn,128:61},{13:$Ve,29:58,31:$Vf,33:[1,142],59:143,68:59,72:$Vg,107:42,109:43,113:44,116:45,117:46,118:47,119:$Vh,120:49,121:$Vi,122:$Vj,123:$Vk,124:$Vl,125:$Vm,126:$Vn,128:61,131:140,132:141},o($VP,[2,158]),{21:[2,74]},{21:[2,172]},o($VQ,[2,160]),{13:[1,147],68:144,78:145,128:29,136:[1,146]},o($VG,[2,118]),o($VG,[2,119]),{13:$Ve,29:58,31:$Vf,59:148,68:59,72:$Vg,107:42,109:43,113:44,116:45,117:46,118:47,119:$Vh,120:49,121:$Vi,122:$Vj,123:$Vk,124:$Vl,125:$Vm,126:$Vn,128:61},o($VP,[2,159]),{21:[2,173]},{10:$Vp,35:149},o($Vd,[2,70]),{13:$Ve,29:58,31:$Vf,59:150,68:59,72:$Vg,107:42,109:43,113:44,116:45,117:46,118:47,119:$Vh,120:49,121:$Vi,122:$Vj,123:$Vk,124:$Vl,125:$Vm,126:$Vn,128:61},{13:$Ve,29:58,31:$Vf,59:151,68:59,72:$Vg,107:42,109:43,113:44,116:45,117:46,118:47,119:$Vh,120:49,121:$Vi,122:$Vj,123:$Vk,124:$Vl,125:$Vm,126:$Vn,128:61},{13:$Ve,29:58,31:$Vf,68:59,72:$Vg,107:152,109:43,113:44,116:45,117:46,118:47,119:$Vh,120:49,121:$Vi,122:$Vj,123:$Vk,124:$Vl,125:$Vm,126:$Vn,128:61},{13:$Ve,29:58,31:$Vf,68:59,72:$Vg,109:153,113:44,116:45,117:46,118:47,119:$Vh,120:49,121:$Vi,122:$Vj,123:$Vk,124:$Vl,125:$Vm,126:$Vn,128:61},{13:$Ve,29:58,31:$Vf,68:59,72:$Vg,109:154,113:44,116:45,117:46,118:47,119:$Vh,120:49,121:$Vi,122:$Vj,123:$Vk,124:$Vl,125:$Vm,126:$Vn,128:61},{13:$Ve,29:58,31:$Vf,68:59,72:$Vg,109:155,113:44,116:45,117:46,118:47,119:$Vh,120:49,121:$Vi,122:$Vj,123:$Vk,124:$Vl,125:$Vm,126:$Vn,128:61},{13:$Ve,29:58,31:$Vf,68:59,72:$Vg,113:156,116:45,117:46,118:47,119:$Vh,120:49,121:$Vi,122:$Vj,123:$Vk,124:$Vl,125:$Vm,126:$Vn,128:61},{13:$Ve,29:58,31:$Vf,68:59,72:$Vg,113:157,116:45,117:46,118:47,119:$Vh,120:49,121:$Vi,122:$Vj,123:$Vk,124:$Vl,125:$Vm,126:$Vn,128:61},{13:$Ve,29:58,31:$Vf,68:59,72:$Vg,113:158,116:45,117:46,118:47,119:$Vh,120:49,121:$Vi,122:$Vj,123:$Vk,124:$Vl,125:$Vm,126:$Vn,128:61},{13:$Ve,29:58,31:$Vf,68:59,72:$Vg,113:159,116:45,117:46,118:47,119:$Vh,120:49,121:$Vi,122:$Vj,123:$Vk,124:$Vl,125:$Vm,126:$Vn,128:61},{13:$Ve,29:58,31:$Vf,68:59,72:$Vg,116:160,117:46,118:47,119:$Vh,120:49,121:$Vi,122:$Vj,123:$Vk,124:$Vl,125:$Vm,126:$Vn,128:61},{13:$Ve,29:58,31:$Vf,68:59,72:$Vg,116:161,117:46,118:47,119:$Vh,120:49,121:$Vi,122:$Vj,123:$Vk,124:$Vl,125:$Vm,126:$Vn,128:61},{13:$Ve,29:58,31:$Vf,68:59,72:$Vg,117:162,118:47,119:$Vh,120:49,121:$Vi,122:$Vj,123:$Vk,124:$Vl,125:$Vm,126:$Vn,128:61},{13:$Ve,29:58,31:$Vf,68:59,72:$Vg,117:163,118:47,119:$Vh,120:49,121:$Vi,122:$Vj,123:$Vk,124:$Vl,125:$Vm,126:$Vn,128:61},{13:$Ve,29:58,31:$Vf,68:59,72:$Vg,117:164,118:47,119:$Vh,120:49,121:$Vi,122:$Vj,123:$Vk,124:$Vl,125:$Vm,126:$Vn,128:61},{13:$Ve,29:58,31:$Vf,68:59,72:$Vg,117:165,118:47,119:$Vh,120:49,121:$Vi,122:$Vj,123:$Vk,124:$Vl,125:$Vm,126:$Vn,128:61},o($VG,[2,145]),o($VG,[2,148]),{33:[1,166],105:$Vy,106:$Vz},o($VG,[2,157]),{13:[1,167],68:144,128:61},{21:[2,44]},{14:$VJ,21:$VK,56:168,57:119},{13:[1,169]},{13:$VR,16:170,38:172,39:$VS,40:$VT,41:$VU,42:$VV},o($VL,[2,48]),{10:$VO,13:$Ve,29:58,31:$Vf,45:[1,178],59:177,60:179,68:59,72:$Vg,107:42,109:43,113:44,116:45,117:46,118:47,119:$Vh,120:49,121:$Vi,122:$Vj,123:$Vk,124:$Vl,125:$Vm,126:$Vn,128:61},{13:$Ve,29:58,31:$Vf,59:180,68:59,72:$Vg,107:42,109:43,113:44,116:45,117:46,118:47,119:$Vh,120:49,121:$Vi,122:$Vj,123:$Vk,124:$Vl,125:$Vm,126:$Vn,128:61},{21:[2,75],105:$Vy,106:$Vz},{46:[1,181]},o($Vd,[2,86]),{13:[1,183],79:182},o($Vx,[2,95]),o($Vd,[2,97]),{89:184,91:[1,185]},{33:[1,186],105:$Vy,106:$Vz},o($Vd,[2,108]),{31:$Vo,82:187},o($Vx,[2,55]),{12:[1,188]},o($Vx,[2,57]),{33:[1,189]},{14:[1,190],33:[2,122],105:$Vy,106:$Vz},o($VG,[2,165]),{14:$VW,33:$VX,133:191,134:192},o($VG,[2,167]),o($VY,[2,168],{105:$Vy,106:$Vz}),o($VP,[2,163]),{21:[2,174]},{31:[1,195]},o($Vq,$Vr,{127:85,135:87,129:88,45:$Vt,130:$Vw}),{46:[1,196],105:$Vy,106:$Vz},o($Vx,[2,99]),o($VA,[2,123]),{15:[1,197],105:$Vy,106:$Vz},o($VB,[2,126]),o($VC,[2,128]),o($VC,[2,129]),o($VC,[2,130]),o($VD,[2,132]),o($VD,[2,133]),o($VD,[2,134]),o($VD,[2,135]),o($VE,[2,137]),o($VE,[2,138]),o($VZ,[2,140],{73:$VF}),o($VZ,[2,141],{73:$VF}),o($VZ,[2,142],{73:$VF}),o($VZ,[2,143],{73:$VF}),o($VG,[2,149]),o($VH,$Vr,{127:85,129:88,45:$Vt,130:$VI}),{21:[2,45]},o($VL,$VM,{58:199,9:$VN,15:[1,198]}),o($VL,$VM,{58:200,9:$VN}),{43:[1,201]},o($V_,[2,33],{45:[1,202]}),o($V$,[2,27]),o($V$,[2,28]),o($V$,[2,29]),o($V$,[2,30]),o($VL,[2,51],{105:$Vy,106:$Vz}),{46:[1,203]},o($VL,[2,53]),{21:[2,73],105:$Vy,106:$Vz},{21:[1,204]},o($V01,[2,87]),{15:[1,205]},{12:[2,107],90:206,91:[1,207],92:[1,208]},{13:$Ve,29:58,31:$Vf,59:209,68:59,72:$Vg,107:42,109:43,113:44,116:45,117:46,118:47,119:$Vh,120:49,121:$Vi,122:$Vj,123:$Vk,124:$Vl,125:$Vm,126:$Vn,128:61},o([10,21],[2,93]),{21:[2,109]},o($Vx,[2,56]),{21:[2,120]},{13:$Ve,29:58,31:$Vf,59:139,68:59,72:$Vg,104:210,107:42,109:43,113:44,116:45,117:46,118:47,119:$Vh,120:49,121:$Vi,122:$Vj,123:$Vk,124:$Vl,125:$Vm,126:$Vn,128:61},o($VG,[2,166]),{14:$VW,33:$VX,133:211,134:192},o($VG,[2,170]),{13:$Ve,29:58,31:$Vf,59:212,68:59,72:$Vg,107:42,109:43,113:44,116:45,117:46,118:47,119:$Vh,120:49,121:$Vi,122:$Vj,123:$Vk,124:$Vl,125:$Vm,126:$Vn,128:61},{13:$Ve,29:58,31:$Vf,59:213,68:59,72:$Vg,107:42,109:43,113:44,116:45,117:46,118:47,119:$Vh,120:49,121:$Vi,122:$Vj,123:$Vk,124:$Vl,125:$Vm,126:$Vn,128:61},o($VQ,[2,162],{129:214,45:$Vt}),{13:$Ve,29:58,31:$Vf,59:215,68:59,72:$Vg,107:42,109:43,113:44,116:45,117:46,118:47,119:$Vh,120:49,121:$Vi,122:$Vj,123:$Vk,124:$Vl,125:$Vm,126:$Vn,128:61},{13:$VR,16:216,38:172,39:$VS,40:$VT,41:$VU,42:$VV},o($VL,[2,50]),o($VL,[2,47]),{13:$VR,16:217,38:172,39:$VS,40:$VT,41:$VU,42:$VV},{46:[1,218]},o($VL,[2,52]),o($Vd,[2,85]),{10:$VO,13:$Ve,29:58,31:$Vf,59:220,60:221,68:59,72:$Vg,80:219,107:42,109:43,113:44,116:45,117:46,118:47,119:$Vh,120:49,121:$Vi,122:$Vj,123:$Vk,124:$Vl,125:$Vm,126:$Vn,128:61},{12:[1,222]},{13:$Ve,29:58,31:$Vf,59:223,68:59,72:$Vg,107:42,109:43,113:44,116:45,117:46,118:47,119:$Vh,120:49,121:$Vi,122:$Vj,123:$Vk,124:$Vl,125:$Vm,126:$Vn,128:61},{15:[1,224]},{15:[1,225],105:$Vy,106:$Vz},{33:[2,121]},o($VG,[2,169]),o($VY,[2,171],{105:$Vy,106:$Vz}),{33:[1,226],105:$Vy,106:$Vz},o($VQ,[2,161]),o($VA,[2,124]),o($VL,$VM,{58:227,9:$VN}),{44:[1,228]},o($V_,[2,32]),{12:$V11,14:$V21,81:229},o($V31,[2,91],{105:$Vy,106:$Vz}),o($V31,[2,92]),o($Vd,[2,100]),{15:[1,232],105:$Vy,106:$Vz},{2:$V0,4:233,12:[2,106],13:$V1,20:5,22:19,23:7,24:8,25:9,26:10,28:11,29:12,51:17,52:$V2,53:$V3,62:4,63:6,64:$V4,66:$V5,67:$V6,68:18,78:20,83:21,86:30,87:$V7,88:$V8,93:$V9,94:$Va,103:$Vb,128:29},o($V41,[2,104],{62:4,20:5,63:6,23:7,24:8,25:9,26:10,28:11,29:12,51:17,68:18,22:19,78:20,83:21,128:29,86:30,4:234,2:$V0,13:$V1,52:$V2,53:$V3,64:$V4,66:$V5,67:$V6,87:$V7,88:$V8,93:$V9,94:$Va,103:$Vb}),{21:[2,175]},o($VL,[2,49]),o($V_,[2,31]),o($V01,[2,88]),{13:[1,235]},o($V01,[2,90]),o($V41,[2,102],{62:4,20:5,63:6,23:7,24:8,25:9,26:10,28:11,29:12,51:17,68:18,22:19,78:20,83:21,128:29,86:30,4:236,2:$V0,13:$V1,52:$V2,53:$V3,64:$V4,66:$V5,67:$V6,87:$V7,88:$V8,93:$V9,94:$Va,103:$Vb}),{12:[2,105]},o($V41,[2,103]),{15:[1,237]},o($V41,[2,101]),{10:$VO,13:$Ve,29:58,31:$Vf,59:220,60:221,68:59,72:$Vg,80:238,107:42,109:43,113:44,116:45,117:46,118:47,119:$Vh,120:49,121:$Vi,122:$Vj,123:$Vk,124:$Vl,125:$Vm,126:$Vn,128:61},{12:$V11,14:$V21,81:239},o($V01,[2,89])],
defaultActions: {3:[2,2],27:[2,41],28:[2,42],32:[2,1],62:[2,43],68:[2,76],69:[2,77],70:[2,78],71:[2,79],72:[2,80],73:[2,81],86:[2,74],87:[2,172],94:[2,173],118:[2,44],145:[2,174],168:[2,45],187:[2,109],189:[2,120],210:[2,121],226:[2,175],233:[2,105]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};


//in file of react i need to put all import to start file and export the function of parser

/*
import Logical from './clases/Logical';
import Relational from './clases/Relational';
import Arithmetical from './clases/Arithmetical';
import Value from './clases/Value';
import Print from './clases/Print';
import Declaration from './clases/Declaration.js';
import Function from './clases/Function';
import Return from './clases/Return';
import Call from './clases/Call';
import IfList from './clases/IfList';
import Else from './clases/Else';
import If from './clases/If';
import While from './clases/While';
import DoWhile from './clases/DoWhile';
import Assignment from './clases/Assignment';
import Switch from './clases/Switch';
import For from './clases/For';
import Unary from './clases/Unary'; 
import Break from './clases/Break';
import Continue from './clases/Continue';
import Cast from './clases/Cast';
import Type from './clases/Type';
import Count from './clases/Counters';
import SymbolTable from './clases/SymbolTable';
export 
*/

     var symbolt = new SymbolTable(null);
     var count = new Count();
     var errores = [];
     var global_var = [];
     var structures = [];
     var nuevo_arreglo = false;
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:// comentario simple línea
break;
case 1:// comentario multiple líneas
break;
case 2:return 101;
break;
case 3:return 102;
break;
case 4:return 71;
break;
case 5:return 72;   
break;
case 6:return 74;
break;
case 7:return 73;
break;
case 8:return 75;
break;
case 9:return 76;
break;
case 10:return 106;
break;
case 11:return 114;
break;
case 12:return 115;
break;
case 13:return 43;
break;
case 14:return 44;
break;
case 15:return 111;
break;
case 16:return 112;
break;
case 17:return 110;
break;
case 18:return 45;     
break;
case 19:return 46;
break;
case 20:return 10;     
break;
case 21:return 12;
break;
case 22:return 31;     
break;
case 23:return 33;
break;
case 24:return 14;
break;
case 25:return 130;
break;
case 26:return 9;
break;
case 27:return 21;
break;
case 28:return 15;
break;
case 29:return 119;
break;
case 30:return 108;
break;
case 31:return 105;
break;
case 32:return 126;
break;
case 33:return 30;
break;
case 34:return 42;
break;
case 35:return 39;
break;
case 36:return 53;
break;
case 37:return 52;
break;
case 38:return 7;
break;
case 39:return 41;
break;
case 40:return 123;
break;
case 41:return 124;
break;
case 42:return 87;
break;
case 43:return 85;
break;
case 44:return 88;
break;
case 45:return 91;
break;
case 46:return 92;
break;
case 47:return 64;
break;
case 48:return 66;
break;
case 49:return 67;
break;
case 50:return 103;
break;
case 51:return 37;
break;
case 52:return 95;
break;
case 53:return 93;
break;
case 54:return 94;
break;
case 55:return 40;
break;
case 56:return 100;
break;
case 57:return 99;
break;
case 58:return 136;
break;
case 59:return 'respop';
break;
case 60:return 'reslength';
break;
case 61:return 'resgraficar_ts';
break;
case 62:
break;
case 63:return 121;
break;
case 64:return 122;
break;
case 65:return 13;
break;
case 66:return 5;
break;
case 67: try{ add_error_E( {error: yy_.yytext, type: 'LEXICO', line: yy_.yylloc.first_line, column: yy_.yylloc.first_column} ); }catch(e){} 
break;
}
},
rules: [/^(?:\/\/.*)/,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/,/^(?:\+\+)/,/^(?:--)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\*\*)/,/^(?:\/)/,/^(?:%)/,/^(?:\?)/,/^(?:>=)/,/^(?:<=)/,/^(?:<)/,/^(?:>)/,/^(?:==)/,/^(?:===)/,/^(?:!=)/,/^(?:\[)/,/^(?:\])/,/^(?:\{)/,/^(?:\})/,/^(?:\()/,/^(?:\))/,/^(?:,)/,/^(?:\.)/,/^(?:=)/,/^(?:;)/,/^(?::)/,/^(?:!)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:undefined\b)/,/^(?:function\b)/,/^(?:Array\b)/,/^(?:number\b)/,/^(?:let\b)/,/^(?:const\b)/,/^(?:type\b)/,/^(?:string\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:default\b)/,/^(?:break\b)/,/^(?:continue\b)/,/^(?:return\b)/,/^(?:console\.log\b)/,/^(?:void\b)/,/^(?:for\b)/,/^(?:while\b)/,/^(?:do\b)/,/^(?:boolean\b)/,/^(?:in\b)/,/^(?:of\b)/,/^(?:push\b)/,/^(?:pop\b)/,/^(?:length\b)/,/^(?:graficar_ts\b)/,/^(?:[ \r\t\n]+)/,/^(?:[0-9]+\.[0-9]+\b|[0-9]+\b)/,/^(?:([\"](\\"|[^"])*[^\\][\"])|[\"][\"]|'[^]')/,/^(?:([a-zA-Z"_"])[a-z0-9A-Z"_""ñ""Ñ"]*)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = interprete;
exports.Parser = interprete.Parser;
exports.parse = function () { return interprete.parse.apply(interprete, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}
