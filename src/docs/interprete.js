/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
import Logical from './clases/Logical';
import Relational from './clases/Relational';
import Arithmetical from './clases/Arithmetical';
import Value from './clases/Value';
import Print from './clases/Print';
import Declaration from './clases/Declaration';
import Function from './clases/Function';
import Return from './clases/Return';
import Call from './clases/Call';
import IfList from './clases/IfList';
import Else from './clases/Else';
import If from './clases/If';
import While from './clases/While';
import DoWhile from './clases/DoWhile';
import Assignment from './clases/Assignment';
import Switch from './clases/Switch';
import For from './clases/For';
import Unary from './clases/Unary'; 
import Break from './clases/Break';
import Continue from './clases/Continue';
import Type from './clases/Type';
import SymbolTable from './clases/SymbolTable';
import TernaryOperator from './clases/TernaryOperator';
import { add_error_E } from './clases/Reports';
import UnaryNoReturn from './clases/UnaryNoReturn';
import { simbtable_E } from './clases/Reports';
export var interprete = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,16],$V1=[1,22],$V2=[1,29],$V3=[1,17],$V4=[1,30],$V5=[1,31],$V6=[1,34],$V7=[1,24],$V8=[1,25],$V9=[1,26],$Va=[1,27],$Vb=[1,28],$Vc=[2,5,7,14,29,51,52,87,88,93,94,95,104],$Vd=[1,49],$Ve=[1,50],$Vf=[1,51],$Vg=[1,52],$Vh=[1,53],$Vi=[1,54],$Vj=[2,5,7,12,14,29,51,52,64,65,66,87,88,91,92,93,94,95,104],$Vk=[1,60],$Vl=[1,63],$Vm=[9,71,72,73,74,75,76],$Vn=[2,169],$Vo=[1,66],$Vp=[1,74],$Vq=[1,72],$Vr=[1,73],$Vs=[1,71],$Vt=[2,5,7,12,14,29,51,52,64,65,66,85,87,88,91,92,93,94,95,104],$Vu=[13,100,101],$Vv=[2,46],$Vw=[1,81],$Vx=[13,15,100,101],$Vy=[2,55],$Vz=[1,84],$VA=[1,90],$VB=[1,108],$VC=[1,100],$VD=[1,99],$VE=[1,96],$VF=[1,98],$VG=[1,101],$VH=[1,102],$VI=[1,103],$VJ=[1,104],$VK=[1,105],$VL=[1,133],$VM=[1,130],$VN=[1,131],$VO=[1,132],$VP=[1,138],$VQ=[9,12,13,15,16,32,42,43,46,71,72,73,74,75,76,100,101,102,103,105,106,108,110,111,112,114,115],$VR=[13,32],$VS=[9,12,13,15,16,32,42,43,46,71,72,73,74,75,76,100,101,102,103,105,106,108,110,111,112,114,115,129],$VT=[1,146],$VU=[1,147],$VV=[12,13,15,16,32,42,43,46,71,72,73,74,75,76,100,101,105,106,108,110,111,112,114,115],$VW=[1,165],$VX=[1,162],$VY=[1,163],$VZ=[1,164],$V_=[1,160],$V$=[1,170],$V01=[1,171],$V11=[12,13,15,16,32,46,100,101,105,106],$V21=[12,13,15,16,32,46,100,101,105,106,108],$V31=[12,13,15,16,32,46,100,101,105,106,108,110,111,112],$V41=[12,13,15,16,32,42,43,46,100,101,105,106,108,110,111,112,114,115],$V51=[1,183],$V61=[1,184],$V71=[12,13,15,16,32,42,43,46,71,72,100,101,105,106,108,110,111,112,114,115],$V81=[1,188],$V91=[1,192],$Va1=[1,195],$Vb1=[12,91,92],$Vc1=[2,12,14,51,52,64,65,66,87,88,91,92,93,94,95,104],$Vd1=[32,46],$Ve1=[1,222],$Vf1=[1,221],$Vg1=[15,32],$Vh1=[2,24],$Vi1=[1,228],$Vj1=[1,231],$Vk1=[2,38],$Vl1=[9,10,12,13,15,32,43,100,101],$Vm1=[1,238],$Vn1=[9,10,12,13,15,32,43,45,100,101],$Vo1=[12,13,15,100,101],$Vp1=[14,30,72,118,120,121,122,123,124,125],$Vq1=[12,13,15,16,32,42,43,46,71,72,74,75,76,100,101,105,106,108,110,111,112,114,115],$Vr1=[1,308],$Vs1=[1,307],$Vt1=[12,15];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"ini":3,"INSTRUCTIONSG":4,"EOF":5,"DEFTYPES":6,"restype":7,"TYPEDEFID":8,"igual":9,"corchetea":10,"ATTRIB":11,"corchetec":12,"puntocoma":13,"id":14,"coma":15,"dospuntos":16,"TYPES":17,"INSTRUCTIONG":18,"FUNCTION":19,"DECLARATION":20,"ASSIGMENTWITHTYPE":21,"IF":22,"SWITCH":23,"WHILE":24,"DOWHILE":25,"FOR":26,"PRINT":27,"CALLF":28,"resfunction":29,"parenta":30,"LISTAPARAMETROS":31,"parentc":32,"RETURNT":33,"BLOCK":34,"TYPESF":35,"resvoid":36,"TYPE":37,"resnumber":38,"resboolean":39,"resstring":40,"resarray":41,"menor":42,"mayor":43,"MULTIDIMENSION":44,"llavea":45,"llavec":46,"BETHA":47,"LISTAPARAMETROSPRIMA":48,"ALPHA":49,"TYPEVAR":50,"resconst":51,"reslet":52,"LISTID":53,"DECBETHA":54,"LISTIDPRIM":55,"DECALPHA":56,"ASSVALUE":57,"EXPRT":58,"DATAPRINT":59,"DECASSTYPE":60,"BLOCK2":61,"INSTRUCTIONS":62,"INSTRUCTION":63,"resbreak":64,"rescontinue":65,"resreturn":66,"ASSIGNMENT":67,"IDVALOR":68,"OPERADOR":69,"DECINC":70,"suma":71,"resta":72,"potencia":73,"multiplicacion":74,"slash":75,"modulo":76,"CONTENTASWT":77,"IDVALORASS":78,"ASSIGNMENTTYPE":79,"VALUETYPE":80,"ASSIGNMENTTYPEPRIM":81,"PARAMETROUNITARIO":82,"CELSE":83,"ELSE":84,"reselse":85,"IFF":86,"resif":87,"resswitch":88,"CASES":89,"DEFAULT":90,"rescase":91,"resdefault":92,"reswhile":93,"resdo":94,"resfor":95,"DEC":96,"ASSIG":97,"FINON":98,"EXP":99,"resof":100,"resin":101,"incremento":102,"decremento":103,"resprint":104,"or":105,"quest":106,"EXPRT2":107,"and":108,"EXPR":109,"diferente":110,"identico":111,"referencias":112,"EXPR1":113,"mayorigual":114,"menorigual":115,"EXP1":116,"EXP2":117,"not":118,"EXP3":119,"number":120,"cadena":121,"restrue":122,"resfalse":123,"resnull":124,"resundefined":125,"IDVALOR2":126,"IDARR":127,"ARREGLO":128,"punto":129,"respop":130,"reslength":131,"PARAMETERS":132,"PARALPHA":133,"PARAMETERSPRIM":134,"PARBETHA":135,"IDVALOR2ASS":136,"respush":137,"GRAFICAR":138,"resgraficar_ts":139,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"restype",9:"igual",10:"corchetea",12:"corchetec",13:"puntocoma",14:"id",15:"coma",16:"dospuntos",29:"resfunction",30:"parenta",32:"parentc",36:"resvoid",38:"resnumber",39:"resboolean",40:"resstring",41:"resarray",42:"menor",43:"mayor",45:"llavea",46:"llavec",51:"resconst",52:"reslet",64:"resbreak",65:"rescontinue",66:"resreturn",71:"suma",72:"resta",73:"potencia",74:"multiplicacion",75:"slash",76:"modulo",85:"reselse",87:"resif",88:"resswitch",91:"rescase",92:"resdefault",93:"reswhile",94:"resdo",95:"resfor",100:"resof",101:"resin",102:"incremento",103:"decremento",104:"resprint",105:"or",106:"quest",108:"and",110:"diferente",111:"identico",112:"referencias",114:"mayorigual",115:"menorigual",118:"not",120:"number",121:"cadena",122:"restrue",123:"resfalse",124:"resnull",125:"resundefined",129:"punto",130:"respop",131:"reslength",137:"respush",139:"resgraficar_ts"},
productions_: [0,[3,2],[3,1],[6,7],[8,1],[11,5],[11,3],[4,2],[4,1],[18,1],[18,2],[18,2],[18,1],[18,1],[18,1],[18,1],[18,2],[18,1],[18,2],[18,2],[18,1],[19,7],[19,6],[33,2],[33,0],[35,1],[35,1],[37,1],[37,1],[37,1],[37,1],[17,4],[17,2],[17,1],[44,3],[44,2],[31,2],[48,2],[48,0],[47,3],[49,4],[50,1],[50,1],[20,2],[53,2],[55,2],[55,0],[54,4],[54,2],[56,5],[56,3],[57,2],[57,3],[57,4],[57,2],[57,0],[34,2],[61,2],[61,1],[62,2],[62,1],[63,2],[63,2],[63,1],[63,1],[63,1],[63,2],[63,1],[63,2],[63,2],[63,2],[63,2],[63,3],[63,2],[63,1],[67,4],[67,2],[67,3],[69,1],[69,1],[69,1],[69,1],[69,1],[69,1],[21,2],[21,1],[21,1],[77,3],[77,2],[60,2],[79,4],[81,5],[81,1],[80,1],[80,1],[82,3],[22,2],[83,3],[83,1],[84,2],[84,0],[86,3],[23,6],[89,5],[89,4],[89,4],[89,3],[90,3],[90,2],[90,0],[24,3],[25,4],[26,9],[26,7],[97,1],[96,1],[96,1],[96,0],[98,1],[98,1],[70,1],[70,1],[27,4],[59,3],[59,1],[58,3],[58,5],[58,1],[107,3],[107,1],[109,3],[109,3],[109,3],[109,1],[113,3],[113,3],[113,3],[113,3],[113,1],[99,3],[99,3],[99,1],[116,3],[116,3],[116,3],[116,3],[116,1],[117,2],[117,1],[119,1],[119,2],[119,2],[119,3],[119,1],[119,1],[119,1],[119,1],[119,1],[119,1],[119,1],[119,2],[68,2],[68,2],[127,2],[128,4],[128,3],[126,2],[126,4],[126,2],[126,0],[28,3],[132,2],[132,1],[133,1],[134,2],[134,1],[135,2],[78,2],[78,2],[136,2],[136,5],[138,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

          try
          {
               console.log("todo termino bien")
               symbolt.add_types(structures);
               var tmp = $$[$0-1];
               for(let aux of tmp)
               {
                    aux.operate(symbolt);
               }
               structures = [];
               symbolt = new SymbolTable(null);
          }catch(e){console.log(e); structures = []; symbolt = new SymbolTable(null);}
     
break;
case 2:
 console.log("termino vacio") 
break;
case 3:
 
break;
case 4:
 existe = false; for(var d of structures){if(d.name === $$[$0]) { existe = true; break;}} if(!existe) structures.push({name: $$[$0], atributes: []}); else try{ add_error_E( {error: "Ya existe un type con el nombre" + $$[$0], type: 'SINTACTICO', line: this.row, column: this.column} ); }catch(e){ console.log(e); } 
break;
case 5: case 6:
 if(!existe) structures[structures.length - 1].atributes.push({name: $$[$0-2], type: $$[$0].id}); 
break;
case 7:
 if(Array.isArray($$[$0-1])){ for(var a of $$[$0-1]){ if(a !== null)$$[$0].unshift(a); }}else{if($$[$0-1] !== null)$$[$0].unshift($$[$0-1]);}  this.$ = $$[$0]; /*deb*/
break;
case 8:
 if(Array.isArray($$[$0])){ this.$ = $$[$0]; }else{ if($$[$0] !== null)this.$ = [$$[$0]];else this.$ = [];  } /*deb*/
break;
case 9:
 symbolt.addFunction($$[$0]); this.$ = null; 
break;
case 10:
 if($$[$0-1] != null){$$[$0-1].type_var = Type.GLOBAL; /*global_var.push($$[$0-1]);*/} this.$ = $$[$0-1];/* declaration inst */
break;
case 11: case 16: case 18: case 19: case 61: case 62: case 66: case 68: case 69: case 152:
 this.$ = $$[$0-1]; 
break;
case 12: case 172:
 this.$ = null; 
break;
case 13: case 14: case 15: case 17: case 23: case 25: case 30: case 36: case 51: case 54: case 63: case 64: case 65: case 67: case 85: case 93: case 94: case 118: case 119: case 158:
 this.$ = $$[$0]; 
break;
case 20: case 74:
 try{ add_error_E( {error: yytext, type: 'SINTACTICO', line: _$[$0].first_line, column: _$[$0].first_column} ); }catch(e){ console.log(e); } 
break;
case 21:
 this.$ = new Function(/*0,*/$$[$0-1].id,$$[$0-1].access,$$[$0-5],$$[$0-3],$$[$0],this._$.first_line,this._$.first_column); 
break;
case 22:
 this.$ = new Function(/*0,*/$$[$0-1].id,$$[$0-1].access,$$[$0-4],null,$$[$0],this._$.first_line,this._$.first_column); 
break;
case 24: case 26:
 this.$ = {id: Type.VOID, access: Type.VALOR, type: Type.VALOR}; 
break;
case 27:
 this.$ = Type.ENTERO; 
break;
case 28:
 this.$ = Type.BOOL; 
break;
case 29:
 this.$ = Type.CADENA; 
break;
case 31:
 this.$ = {id: Type.ARREGLO, access: Type.ARREGLO, type: Type.PRIMITIVO}; 
break;
case 32:
 this.$ = {id: Type.ARREGLO, access: Type.ARREGLO, type: Type.PRIMITIVO}; if($$[$0-1] != Type.ENTERO && $$[$0-1] != Type.BOOL && $$[$0-1] != Type.CADENA) this.$.type = Type.OBJETO; 
break;
case 33:
 this.$ = {id: $$[$0], access: Type.VALOR, type: Type.VALOR}; if($$[$0] != Type.ENTERO && $$[$0] != Type.BOOL && $$[$0] != Type.CADENA) this.$.type = Type.OBJETO; 
break;
case 34:
 this.$ = $$[$0-2] + $$[$0-1] + $$[$0]; 
break;
case 35:
 this.$ = $$[$0-1] + $$[$0]; 
break;
case 37:
 this.$ = $$[$0-2];
break;
case 38: case 107: case 114: case 116: case 127: case 129: case 133: case 138: case 141: case 146: case 148:
this.$ = $$[$0];
break;
case 39:
 this.$ = []; this.$.push(new Declaration($$[$0-2],null,$$[$0].id,$$[$0].access,Type.LOCAL,Type.VAR,/*Type.PRIMITIVO,*/this._$.first_line,this._$.first_column)); 
break;
case 40:
 this.$ = $$[$0-4]; this.$.push(new Declaration($$[$0-2],null,$$[$0].id,$$[$0].access,Type.LOCAL,Type.VAR,/*Type.PRIMITIVO,*/this._$.first_line,this._$.first_column)); 
break;
case 41:
this.$ = Type.CONST;
break;
case 42:
this.$ = Type.VAR;
break;
case 43:
 for(var a of $$[$0]){a.type_c = $$[$0-1];} this.$ = $$[$0]; this.$ = $$[$0]; 
break;
case 44:
 this.$ = $$[$0];  /*testdec*/ 
break;
case 45:
 this.$ = $$[$0-1]; /*testdec*/ 
break;
case 46:
 this.$ = $$[$0];
break;
case 47:
 this.$ = []; this.$.push(new Declaration($$[$0-3],$$[$0],$$[$0-1].id,Type.VALOR,Type.LOCAL,null,/*Type.PRIMITIVO,0,*/this._$.first_line,this._$.first_column)); if(nuevo_arreglo) {this.$[this.$.length-1].type = Type.ARREGLO; this.$[this.$.length-1].type_exp = Type.ARREGLO;} nuevo_arreglo = false;
break;
case 48:
 this.$ = []; this.$.push(new Declaration($$[$0-1],$$[$0],undefined,Type.VALOR,Type.LOCAL,null,/*Type.PRIMITIVO,0,*/this._$.first_line,this._$.first_column)); if(nuevo_arreglo) {this.$[this.$.length-1].type = Type.ARREGLO; this.$[this.$.length-1].type_exp = Type.ARREGLO;} nuevo_arreglo = false;
break;
case 49:
 this.$ = $$[$0-5]; this.$.push(new Declaration($$[$0-3],$$[$0],$$[$0-1].id,Type.VALOR,Type.LOCAL,null,/*Type.PRIMITIVO,0,*/this._$.first_line,this._$.first_column)); /*testdec*/  if(nuevo_arreglo) {this.$[this.$.length-1].type = Type.ARREGLO; this.$[this.$.length-1].type_exp = Type.ARREGLO;} nuevo_arreglo = false;  
break;
case 50:
 this.$ = $$[$0-3]; this.$.push(new Declaration($$[$0-1],$$[$0],undefined,Type.VALOR,Type.LOCAL,null,/*Type.PRIMITIVO,0,*/this._$.first_line,this._$.first_column)); /*testdec*/ if(nuevo_arreglo) {this.$[this.$.length-1].type = Type.ARREGLO; this.$[this.$.length-1].type_exp = Type.ARREGLO;} nuevo_arreglo = false;
break;
case 52:
 this.$ = undefined; nuevo_arreglo = true; 
break;
case 53:
 this.$ = $$[$0-1]; nuevo_arreglo = true; 
break;
case 55:
 this.$ = undefined; 
break;
case 56: case 166: case 179:
 this.$ = $$[$0];  
break;
case 57:
 this.$ = $$[$0-1]; /*here*/
break;
case 58: case 92: case 169:
 this.$ = []; 
break;
case 59:
 if(Array.isArray($$[$0-1])){ for(var a of $$[$0-1]){ $$[$0].unshift(a); }}else{$$[$0].unshift($$[$0-1]);}  this.$ = $$[$0]; /*deb*/
break;
case 60:
 if(Array.isArray($$[$0])){ this.$ = $$[$0]; }else{ this.$ = [$$[$0]]; } /*deb*/
break;
case 70:
this.$ = new Break(Type.BREAK,this._$.first_line,this._$.first_column)
break;
case 71:
this.$ = new Continue(Type.CONTINUE,this._$.first_line,this._$.first_column)
break;
case 72:
this.$ = new Return($$[$0-1],Type.RETURN,Type.RETURN,this._$.first_line,this._$.first_column);
break;
case 73:
this.$ = new Return(null,Type.RETURN,Type.RETURN,this._$.first_line,this._$.first_column);
break;
case 75:
 if($$[$0-3].length === 1 && $$[$0-3][0].type === Type.ID){ $$[$0-3] = $$[$0-3][0]; } this.$ = new Assignment($$[$0-3],new Arithmetical($$[$0-3],$$[$0],$$[$0-2],Type.VALOR,this._$.first_line,this._$.first_column),this._$.first_line,this._$.first_column); this.$.change_tipe($$[$0-2]);
break;
case 76:
 this.$ = new UnaryNoReturn($$[$0-1],$$[$0],this._$.first_line,this._$.first_column); 
break;
case 77:
 /*DEBERIA AQUI*/if($$[$0-2].length === 1 && $$[$0-2][0].type === Type.ID){ $$[$0-2] = $$[$0-2][0]; } this.$ = new Assignment($$[$0-2],$$[$0],this._$.first_line,this._$.first_column); 
break;
case 78:
 this.$ = Type.SUMA; 
break;
case 79:
 this.$ = Type.RESTA; 
break;
case 80:
 this.$ = Type.POTENCIA; 
break;
case 81:
 this.$ = Type.MULTIPLICACION; 
break;
case 82:
 this.$ = Type.DIVISION; 
break;
case 83:
 this.$ = Type.MODULO; 
break;
case 84:
 this.$ = $$[$0]; this.$.id = $$[$0-1]; 
break;
case 86:
 this.$ = new UnaryNoReturn($$[$0],".push()",this._$.first_line,this._$.first_column); 
break;
case 87:
 this.$ = new Assignment(undefined,undefined,this._$.first_line,this._$.first_column); this.$.change_tipe(Type.ARREGLO);
break;
case 88:
 this.$ = new Assignment(undefined,$$[$0],this._$.first_line,this._$.first_column); 
break;
case 89:
 this.$ = new Value($$[$0],Type.OBJETO,Type.VALOR,this._$.first_line,this._$.first_column); 
break;
case 90: case 91:
 this.$ = $$[$0]; this.$.unshift([$$[$0-3], $$[$0-1]]); 
break;
case 95:
this.$ = $$[$0-1];
break;
case 96:
var tf = $$[$0-1];tf.elsebody = $$[$0];this.$ = tf;
break;
case 97:
var tc = $$[$0-2]; tc.lif.push($$[$0]); this.$ = tc;
break;
case 98:
var t = new IfList();t.lif.push($$[$0]);this.$ = t;
break;
case 99:
this.$ = new Else($$[$0],this._$.first_line,this._$.first_column);
break;
case 100: case 109:
this.$ = null;
break;
case 101:
this.$ = new If($$[$0-1],$$[$0],Type.IF,this._$.first_line,this._$.first_column);
break;
case 102:
var ts = new Switch($$[$0-4],$$[$0-2],$$[$0-1],this._$.first_line,this._$.first_column);console.log("entrooo");this.$ = ts;
break;
case 103:
$$[$0-4].push(new If($$[$0-2],$$[$0],Type.IF,this._$.first_line,this._$.first_column));
break;
case 104:
$$[$0-3].push(new If($$[$0-1],[],Type.IF,this._$.first_line,this._$.first_column));
break;
case 105:
 this.$ = []; this.$.push(new If($$[$0-2],$$[$0],Type.IF,this._$.first_line,this._$.first_column));
break;
case 106:
 this.$ = []; this.$.push(new If($$[$0-1],[],Type.IF,this._$.first_line,this._$.first_column));
break;
case 108:
this.$ = []
break;
case 110:
this.$ = new While($$[$0-1],$$[$0],this._$.first_line,this._$.first_column);
break;
case 111:
this.$ = new DoWhile($$[$0],$$[$0-2],this._$.first_line,this._$.first_column);
break;
case 112:
 this.$ = new For($$[$0-6],$$[$0-4],$$[$0-2],$$[$0],this._$.first_line,this._$.first_column); 
break;
case 113:
 this.$ = new For($$[$0-4],$$[$0-3],$$[$0-2],$$[$0],this._$.first_line,this._$.first_column); 
break;
case 115:
this.$ = $$[$0][0];
break;
case 117:
this.$ = "";
break;
case 120:
this.$ = Type.INCREMENTO;
break;
case 121:
this.$ = Type.DECREMENTO;
break;
case 122:
this.$ = new Print($$[$0-1],Type.IMPRIMIR, Type.IMPRIMIR,this._$.first_line,this._$.first_column);
break;
case 123:
 $$[$0].unshift($$[$0-2]); this.$ = $$[$0]; /*print*/
break;
case 124:
 this.$ = [$$[$0]]; /*print*/
break;
case 125:
this.$ = new Logical($$[$0-2],$$[$0],Type.OR,Type.VALOR,this._$.first_line,this._$.first_column);
break;
case 126:
 this.$ = new TernaryOperator($$[$0-4], $$[$0-2], $$[$0], this._$.first_line,this._$.first_column); 
break;
case 128:
this.$ = new Logical($$[$0-2],$$[$0],Type.AND,Type.VALOR,this._$.first_line,this._$.first_column);
break;
case 130:
this.$ = new Relational($$[$0-2],$$[$0],Type.DIFERENTE,Type.VALOR,this._$.first_line,this._$.first_column);
break;
case 131:
this.$ = new Relational($$[$0-2],$$[$0],Type.IDENTICO,Type.VALOR,this._$.first_line,this._$.first_column);
break;
case 132:
this.$ = new Relational($$[$0-2],$$[$0],Type.REFERENCIA,Type.VALOR,this._$.first_line,this._$.first_column);
break;
case 134:
this.$ = new Relational($$[$0-2],$$[$0],Type.MAYOR,Type.VALOR,this._$.first_line,this._$.first_column);
break;
case 135:
this.$ = new Relational($$[$0-2],$$[$0],Type.MENOR,Type.VALOR,this._$.first_line,this._$.first_column);
break;
case 136:
this.$ = new Relational($$[$0-2],$$[$0],Type.MAYORIGUAL,Type.VALOR,this._$.first_line,this._$.first_column);
break;
case 137:
this.$ = new Relational($$[$0-2],$$[$0],Type.MENORIGUAL,Type.VALOR,this._$.first_line,this._$.first_column);
break;
case 139:
this.$ = new Arithmetical($$[$0-2],$$[$0],Type.SUMA,Type.VALOR,this._$.first_line,this._$.first_column);
break;
case 140:
this.$ = new Arithmetical($$[$0-2],$$[$0],Type.RESTA,Type.VALOR,this._$.first_line,this._$.first_column);
break;
case 142:
this.$ = new Arithmetical($$[$0-2],$$[$0],Type.MULTIPLICACION,Type.VALOR,this._$.first_line,this._$.first_column);
break;
case 143:
this.$ = new Arithmetical($$[$0-2],$$[$0],Type.DIVISION,Type.VALOR,this._$.first_line,this._$.first_column);
break;
case 144:
this.$ = new Arithmetical($$[$0-2],$$[$0],Type.MODULO,Type.VALOR,this._$.first_line,this._$.first_column);
break;
case 145:
this.$ = new Arithmetical($$[$0-2],$$[$0],Type.POTENCIA,Type.VALOR,this._$.first_line,this._$.first_column);
break;
case 147:
this.$ = new Logical($$[$0],null,Type.NOT,Type.VALOR,this._$.first_line,this._$.first_column);
break;
case 149:
this.$ = new Value(Number($$[$0]),Type.ENTERO,Type.VALOR,this._$.first_line,this._$.first_column); 
break;
case 150:
 if($$[$0].length === 1 && $$[$0][0].type === Type.ID){ this.$ = new Unary($$[$0][0],Type.RESTA,this._$.first_line,this._$.first_column); }else{ this.$ = new Unary($$[$0-1],Type.RESTA,this._$.first_line,this._$.first_column); } 
break;
case 151:
 this.$ = new Value(-1*Number($$[$0]),Type.ENTERO,Type.VALOR,this._$.first_line,this._$.first_column); 
break;
case 153:
this.$ = new Value($$[$0],Type.CADENA,Type.VALOR,this._$.first_line,this._$.first_column);
break;
case 154:
this.$ = new Value(true,Type.BOOL,Type.VALOR,this._$.first_line,this._$.first_column);
break;
case 155:
this.$ = new Value(false,Type.BOOL,Type.VALOR,this._$.first_line,this._$.first_column);
break;
case 156: case 157:
this.$ = new Value(null,Type.NULL,Type.VALOR,this._$.first_line,this._$.first_column);
break;
case 159:
 if($$[$0].length === 1 && $$[$0][0].type === Type.ID){ this.$ = $$[$0][0]; }else{ this.$ = new Value($$[$0],Type.ARREGLO,Type.VALOR,this._$.first_line,this._$.first_column); } 
break;
case 160:
 if($$[$0-1].length === 1 && $$[$0-1][0].type === Type.ID){ this.$ = new Unary($$[$0-1][0],$$[$0],this._$.first_line,this._$.first_column); }else{ this.$ = new Unary($$[$0-1],$$[$0],this._$.first_line,this._$.first_column); } 
break;
case 161: case 177:
 this.$ = $$[$0]; this.$.unshift(new Value($$[$0-1],Type.ID,Type.VALOR,this._$.first_line,this._$.first_column)); 
break;
case 162: case 178:
 this.$ = $$[$0]; this.$.unshift($$[$0-1]); 
break;
case 163:
 this.$ = new Value($$[$0-1],Type.ARREGLO,Type.VALOR,this._$.first_line,this._$.first_column); this.$.add_positions($$[$0]); 
break;
case 164:
 this.$ = $$[$0]; this.$.unshift($$[$0-2]);
break;
case 165:
 this.$ = []; this.$.push($$[$0-1]); 
break;
case 167:
 this.$ = [new Value(".pop()",Type.ID,Type.VALOR,this._$.first_line,this._$.first_column)];  
break;
case 168:
 this.$ = [new Value($$[$0],Type.ID,Type.VALOR,this._$.first_line,this._$.first_column)];  
break;
case 170:
 this.$ = new Call($$[$0-2],Type.LLAMADA,null,$$[$0],this._$.first_line,this._$.first_column); 
break;
case 171:
 this.$ = $$[$0]; /*return parametros*/
break;
case 173:
 this.$ = []; this.$.push($$[$0]); 
break;
case 174: case 175:
 this.$ = $$[$0-1]; /*parametros call*/
break;
case 176:
 this.$ = $$[$0-2]; this.$.push($$[$0]); 
break;
case 180:
 this.$ = [$$[$0-1]]; 
break;
case 181:
 this.$ = new UnaryNoReturn($$[$0-2],$$[$0-1],this._$.first_line,this._$.first_column); 
break;
}
},
table: [{2:$V0,3:1,4:2,5:[1,3],6:8,7:$V1,14:$V2,18:4,19:5,20:6,21:7,22:9,23:10,24:11,25:12,26:13,27:14,28:15,29:$V3,50:18,51:$V4,52:$V5,67:20,68:19,78:21,83:23,86:33,87:$V6,88:$V7,93:$V8,94:$V9,95:$Va,104:$Vb,127:32},{1:[3]},{5:[1,35]},{1:[2,2]},{2:$V0,4:36,5:[2,8],6:8,7:$V1,14:$V2,18:4,19:5,20:6,21:7,22:9,23:10,24:11,25:12,26:13,27:14,28:15,29:$V3,50:18,51:$V4,52:$V5,67:20,68:19,78:21,83:23,86:33,87:$V6,88:$V7,93:$V8,94:$V9,95:$Va,104:$Vb,127:32},o($Vc,[2,9]),{13:[1,37]},{13:[1,38]},o($Vc,[2,12]),o($Vc,[2,13]),o($Vc,[2,14]),o($Vc,[2,15]),{13:[1,39]},o($Vc,[2,17]),{13:[1,40]},{13:[1,41]},o($Vc,[2,20]),{14:[1,42]},{14:[1,45],53:43,54:44},{9:[1,48],69:47,71:$Vd,72:$Ve,73:$Vf,74:$Vg,75:$Vh,76:$Vi,77:46},{13:[2,85]},{13:[2,86]},{8:55,14:[1,56]},o($Vj,[2,100],{84:57,85:[1,58]}),{30:$Vk,82:59},{30:$Vk,82:61},{10:$Vl,34:62},{30:[1,64]},{30:[1,65]},o($Vm,$Vn,{126:67,70:68,136:69,128:70,30:$Vo,45:$Vp,102:$Vq,103:$Vr,129:$Vs}),{14:[2,41]},{14:[2,42]},o($Vm,$Vn,{126:75,136:76,129:$Vs}),o($Vt,[2,98]),{30:$Vk,82:77},{1:[2,1]},{5:[2,7]},o($Vc,[2,10]),o($Vc,[2,11]),o($Vc,[2,16]),o($Vc,[2,18]),o($Vc,[2,19]),{30:[1,78]},o($Vu,[2,43]),o($Vu,$Vv,{55:79,56:80,15:$Vw}),o($Vx,$Vy,{57:83,9:$Vz,16:[1,82]}),{13:[2,84]},{9:[1,85]},{10:$VA,14:$VB,28:106,30:$VC,45:[1,87],58:86,60:88,68:107,72:$VD,99:93,107:89,109:91,113:92,116:94,117:95,118:$VE,119:97,120:$VF,121:$VG,122:$VH,123:$VI,124:$VJ,125:$VK,127:109},{9:[2,78]},{9:[2,79]},{9:[2,80]},{9:[2,81]},{9:[2,82]},{9:[2,83]},{9:[1,110]},{9:[2,4]},o($Vj,[2,96]),{10:$Vl,34:112,86:111,87:$V6},{10:[1,113]},{14:$VB,28:106,30:$VC,58:114,68:107,72:$VD,99:93,107:89,109:91,113:92,116:94,117:95,118:$VE,119:97,120:$VF,121:$VG,122:$VH,123:$VI,124:$VJ,125:$VK,127:109},{10:$Vl,34:115},{93:[1,116]},{2:$VL,12:[1,119],14:$V2,20:121,21:122,22:123,23:124,24:125,25:126,26:127,27:128,28:129,50:18,51:$V4,52:$V5,61:117,62:118,63:120,64:$VM,65:$VN,66:$VO,67:20,68:19,78:21,83:23,86:33,87:$V6,88:$V7,93:$V8,94:$V9,95:$Va,104:$Vb,127:32},{13:[2,117],14:$VP,20:135,50:18,51:$V4,52:$V5,67:136,68:137,96:134,127:109},{14:$VB,28:106,30:$VC,58:140,59:139,68:107,72:$VD,99:93,107:89,109:91,113:92,116:94,117:95,118:$VE,119:97,120:$VF,121:$VG,122:$VH,123:$VI,124:$VJ,125:$VK,127:109},{14:$VB,28:106,30:$VC,32:[1,143],58:144,68:107,72:$VD,99:93,107:89,109:91,113:92,116:94,117:95,118:$VE,119:97,120:$VF,121:$VG,122:$VH,123:$VI,124:$VJ,125:$VK,127:109,132:141,133:142},o($VQ,[2,161]),o($VR,[2,76]),{13:[2,177]},o($VS,[2,163]),{14:[1,150],68:145,78:148,127:32,130:$VT,131:$VU,137:[1,149]},o($VV,[2,120]),o($VV,[2,121]),{14:$VB,28:106,30:$VC,58:151,68:107,72:$VD,99:93,107:89,109:91,113:92,116:94,117:95,118:$VE,119:97,120:$VF,121:$VG,122:$VH,123:$VI,124:$VJ,125:$VK,127:109},o($VQ,[2,162]),{13:[2,178]},{10:$Vl,34:152},{14:[1,156],31:153,32:[1,154],47:155},o($Vu,[2,44]),o($Vu,$Vv,{56:80,55:157,15:$Vw}),{14:[1,158]},{14:$VW,17:159,37:161,38:$VX,39:$VY,40:$VZ,41:$V_},o($Vx,[2,48]),{10:$VA,14:$VB,28:106,30:$VC,45:[1,167],58:166,60:168,68:107,72:$VD,99:93,107:89,109:91,113:92,116:94,117:95,118:$VE,119:97,120:$VF,121:$VG,122:$VH,123:$VI,124:$VJ,125:$VK,127:109},{14:$VB,28:106,30:$VC,58:169,68:107,72:$VD,99:93,107:89,109:91,113:92,116:94,117:95,118:$VE,119:97,120:$VF,121:$VG,122:$VH,123:$VI,124:$VJ,125:$VK,127:109},o($VR,[2,77],{105:$V$,106:$V01}),{46:[1,172]},{13:[2,88]},o($V11,[2,127],{108:[1,173]}),{14:[1,175],79:174},o($V21,[2,129],{110:[1,176],111:[1,177],112:[1,178]}),o($V31,[2,133],{42:[1,180],43:[1,179],114:[1,181],115:[1,182]}),o($V41,[2,138],{71:$V51,72:$V61}),o($V71,[2,141],{73:$V81,74:[1,185],75:[1,186],76:[1,187]}),o($VV,[2,146]),{14:$VB,28:106,30:$VC,68:107,72:$VD,117:189,118:$VE,119:97,120:$VF,121:$VG,122:$VH,123:$VI,124:$VJ,125:$VK,127:109},o($VV,[2,148]),o($VV,[2,149]),{14:$V91,68:190,120:[1,191],127:109},{14:$VB,28:106,30:$VC,58:193,68:107,72:$VD,99:93,107:89,109:91,113:92,116:94,117:95,118:$VE,119:97,120:$VF,121:$VG,122:$VH,123:$VI,124:$VJ,125:$VK,127:109},o($VV,[2,153]),o($VV,[2,154]),o($VV,[2,155]),o($VV,[2,156]),o($VV,[2,157]),o($VV,[2,158]),o($VV,[2,159],{70:194,102:$Vq,103:$Vr}),o([12,13,15,16,32,42,43,46,71,72,73,74,75,76,100,101,102,103,105,106,108,110,111,112,114,115],$Vn,{126:67,128:70,30:$Vo,45:$Vp,129:$Va1}),o($VQ,$Vn,{126:75,129:$Va1}),{10:[1,196]},o($Vt,[2,97]),o($Vj,[2,99]),{89:197,91:[1,198]},{32:[1,199],105:$V$,106:$V01},o($Vj,[2,110]),{30:$Vk,82:200},o($Vt,[2,56]),{12:[1,201]},o($Vt,[2,58]),o($Vb1,[2,60],{50:18,68:19,67:20,78:21,83:23,127:32,86:33,63:120,20:121,21:122,22:123,23:124,24:125,25:126,26:127,27:128,28:129,62:202,2:$VL,14:$V2,51:$V4,52:$V5,64:$VM,65:$VN,66:$VO,87:$V6,88:$V7,93:$V8,94:$V9,95:$Va,104:$Vb}),{13:[1,203]},{13:[1,204]},o($Vc1,[2,63]),o($Vc1,[2,64]),o($Vc1,[2,65]),{13:[1,205]},o($Vc1,[2,67]),{13:[1,206]},{13:[1,207]},{13:[1,208]},{13:[1,209]},{13:[1,211],14:$VB,28:106,30:$VC,58:210,68:107,72:$VD,99:93,107:89,109:91,113:92,116:94,117:95,118:$VE,119:97,120:$VF,121:$VG,122:$VH,123:$VI,124:$VJ,125:$VK,127:109},o($Vc1,[2,74]),{13:[1,212]},{13:[2,115],98:213,100:[1,214],101:[1,215]},{13:[2,116]},{9:[1,216],69:47,71:$Vd,72:$Ve,73:$Vf,74:$Vg,75:$Vh,76:$Vi},o($Vm,$Vn,{126:67,70:68,128:70,45:$Vp,102:$Vq,103:$Vr,129:$Va1}),{32:[1,217]},o($Vd1,[2,124],{15:[1,218],105:$V$,106:$V01}),o($VV,[2,170]),{15:$Ve1,32:$Vf1,134:219,135:220},o($VV,[2,172]),o($Vg1,[2,173],{105:$V$,106:$V01}),o($VQ,[2,166]),{30:[1,223]},o($VQ,[2,168]),{13:[2,179]},{30:[1,224]},o($Vm,$Vn,{126:67,136:69,128:70,45:$Vp,129:$Vs}),{46:[1,225],105:$V$,106:$V01},o($Vt,[2,101]),{32:[1,226]},{10:$Vh1,16:$Vi1,33:227},{15:$Vj1,32:$Vk1,48:229,49:230},{16:[1,232]},o($Vu,[2,45]),o($Vx,$Vy,{57:234,9:$Vz,16:[1,233]}),o($Vx,$Vy,{57:235,9:$Vz}),{42:[1,236]},o($Vl1,[2,33],{44:237,45:$Vm1}),o($Vn1,[2,27]),o($Vn1,[2,28]),o($Vn1,[2,29]),o($Vn1,[2,30]),o($Vx,[2,51],{105:$V$,106:$V01}),{14:$VB,28:106,30:$VC,46:[1,239],58:140,59:240,68:107,72:$VD,99:93,107:89,109:91,113:92,116:94,117:95,118:$VE,119:97,120:$VF,121:$VG,122:$VH,123:$VI,124:$VJ,125:$VK,127:109},o($Vx,[2,54]),o($VR,[2,75],{105:$V$,106:$V01}),{14:$VB,28:106,30:$VC,58:241,68:107,72:$VD,99:93,107:89,109:91,113:92,116:94,117:95,118:$VE,119:97,120:$VF,121:$VG,122:$VH,123:$VI,124:$VJ,125:$VK,127:109},{14:$VB,28:106,30:$VC,58:242,68:107,72:$VD,99:93,107:89,109:91,113:92,116:94,117:95,118:$VE,119:97,120:$VF,121:$VG,122:$VH,123:$VI,124:$VJ,125:$VK,127:109},{13:[2,87]},{14:$VB,28:106,30:$VC,68:107,72:$VD,99:93,107:243,109:91,113:92,116:94,117:95,118:$VE,119:97,120:$VF,121:$VG,122:$VH,123:$VI,124:$VJ,125:$VK,127:109},o($Vo1,[2,89]),{16:[1,244]},{14:$VB,28:106,30:$VC,68:107,72:$VD,99:93,109:245,113:92,116:94,117:95,118:$VE,119:97,120:$VF,121:$VG,122:$VH,123:$VI,124:$VJ,125:$VK,127:109},{14:$VB,28:106,30:$VC,68:107,72:$VD,99:93,109:246,113:92,116:94,117:95,118:$VE,119:97,120:$VF,121:$VG,122:$VH,123:$VI,124:$VJ,125:$VK,127:109},{14:$VB,28:106,30:$VC,68:107,72:$VD,99:93,109:247,113:92,116:94,117:95,118:$VE,119:97,120:$VF,121:$VG,122:$VH,123:$VI,124:$VJ,125:$VK,127:109},{14:$VB,28:106,30:$VC,68:107,72:$VD,99:93,113:248,116:94,117:95,118:$VE,119:97,120:$VF,121:$VG,122:$VH,123:$VI,124:$VJ,125:$VK,127:109},{14:$VB,28:106,30:$VC,68:107,72:$VD,99:93,113:249,116:94,117:95,118:$VE,119:97,120:$VF,121:$VG,122:$VH,123:$VI,124:$VJ,125:$VK,127:109},{14:$VB,28:106,30:$VC,68:107,72:$VD,99:93,113:250,116:94,117:95,118:$VE,119:97,120:$VF,121:$VG,122:$VH,123:$VI,124:$VJ,125:$VK,127:109},{14:$VB,28:106,30:$VC,68:107,72:$VD,99:93,113:251,116:94,117:95,118:$VE,119:97,120:$VF,121:$VG,122:$VH,123:$VI,124:$VJ,125:$VK,127:109},{14:$VB,28:106,30:$VC,68:107,72:$VD,99:252,116:94,117:95,118:$VE,119:97,120:$VF,121:$VG,122:$VH,123:$VI,124:$VJ,125:$VK,127:109},{14:$VB,28:106,30:$VC,68:107,72:$VD,99:253,116:94,117:95,118:$VE,119:97,120:$VF,121:$VG,122:$VH,123:$VI,124:$VJ,125:$VK,127:109},{14:$VB,28:106,30:$VC,68:107,72:$VD,116:254,117:95,118:$VE,119:97,120:$VF,121:$VG,122:$VH,123:$VI,124:$VJ,125:$VK,127:109},{14:$VB,28:106,30:$VC,68:107,72:$VD,116:255,117:95,118:$VE,119:97,120:$VF,121:$VG,122:$VH,123:$VI,124:$VJ,125:$VK,127:109},{14:$VB,28:106,30:$VC,68:107,72:$VD,116:256,117:95,118:$VE,119:97,120:$VF,121:$VG,122:$VH,123:$VI,124:$VJ,125:$VK,127:109},{14:$VB,28:106,30:$VC,68:107,72:$VD,116:257,117:95,118:$VE,119:97,120:$VF,121:$VG,122:$VH,123:$VI,124:$VJ,125:$VK,127:109},o($VV,[2,147]),o($VV,[2,150]),o($VV,[2,151]),o($VQ,$Vn,{126:67,128:70,45:$Vp,129:$Va1}),{32:[1,258],105:$V$,106:$V01},o($VV,[2,160]),{14:$V91,68:145,127:109,130:$VT,131:$VU},{11:259,14:[1,260]},{12:[2,109],90:261,91:[1,262],92:[1,263]},{14:$VB,28:106,30:$VC,58:264,68:107,72:$VD,99:93,107:89,109:91,113:92,116:94,117:95,118:$VE,119:97,120:$VF,121:$VG,122:$VH,123:$VI,124:$VJ,125:$VK,127:109},o([10,13],[2,95]),{13:[2,111]},o($Vt,[2,57]),o($Vb1,[2,59]),o($Vc1,[2,61]),o($Vc1,[2,62]),o($Vc1,[2,66]),o($Vc1,[2,68]),o($Vc1,[2,69]),o($Vc1,[2,70]),o($Vc1,[2,71]),{13:[1,265],105:$V$,106:$V01},o($Vc1,[2,73]),{14:$VB,28:106,30:$VC,58:266,68:107,72:$VD,99:93,107:89,109:91,113:92,116:94,117:95,118:$VE,119:97,120:$VF,121:$VG,122:$VH,123:$VI,124:$VJ,125:$VK,127:109},{14:$VB,28:106,30:$VC,68:107,72:$VD,99:267,116:94,117:95,118:$VE,119:97,120:$VF,121:$VG,122:$VH,123:$VI,124:$VJ,125:$VK,127:109},o($Vp1,[2,118]),o($Vp1,[2,119]),{14:$VB,28:106,30:$VC,58:86,68:107,72:$VD,99:93,107:89,109:91,113:92,116:94,117:95,118:$VE,119:97,120:$VF,121:$VG,122:$VH,123:$VI,124:$VJ,125:$VK,127:109},{13:[2,122]},{14:$VB,28:106,30:$VC,58:140,59:268,68:107,72:$VD,99:93,107:89,109:91,113:92,116:94,117:95,118:$VE,119:97,120:$VF,121:$VG,122:$VH,123:$VI,124:$VJ,125:$VK,127:109},o($VV,[2,171]),{15:$Ve1,32:$Vf1,134:269,135:220},o($VV,[2,175]),{14:$VB,28:106,30:$VC,58:270,68:107,72:$VD,99:93,107:89,109:91,113:92,116:94,117:95,118:$VE,119:97,120:$VF,121:$VG,122:$VH,123:$VI,124:$VJ,125:$VK,127:109},{32:[1,271]},{14:$VB,28:106,30:$VC,58:272,68:107,72:$VD,99:93,107:89,109:91,113:92,116:94,117:95,118:$VE,119:97,120:$VF,121:$VG,122:$VH,123:$VI,124:$VJ,125:$VK,127:109},o($VS,[2,165],{128:273,45:$Vp}),{10:$Vh1,16:$Vi1,33:274},{10:$Vl,34:275},{14:$VW,17:277,35:276,36:[1,278],37:161,38:$VX,39:$VY,40:$VZ,41:$V_},{32:[2,36]},{15:$Vj1,32:$Vk1,48:279,49:230},{14:[1,280]},{14:$VW,17:281,37:161,38:$VX,39:$VY,40:$VZ,41:$V_},{14:$VW,17:282,37:161,38:$VX,39:$VY,40:$VZ,41:$V_},o($Vx,[2,50]),o($Vx,[2,47]),{14:$VW,17:283,37:161,38:$VX,39:$VY,40:$VZ,41:$V_},o($Vl1,[2,32]),{46:[1,284]},o($Vx,[2,52]),{46:[1,285]},o($V11,[2,125]),{16:[1,286],105:$V$,106:$V01},o($V21,[2,128]),{10:$VA,14:$VB,28:106,30:$VC,58:288,60:289,68:107,72:$VD,80:287,99:93,107:89,109:91,113:92,116:94,117:95,118:$VE,119:97,120:$VF,121:$VG,122:$VH,123:$VI,124:$VJ,125:$VK,127:109},o($V31,[2,130]),o($V31,[2,131]),o($V31,[2,132]),o($V41,[2,134]),o($V41,[2,135]),o($V41,[2,136]),o($V41,[2,137]),o($V71,[2,139]),o($V71,[2,140]),o($Vq1,[2,142],{73:$V81}),o($Vq1,[2,143],{73:$V81}),o($Vq1,[2,144],{73:$V81}),o($Vq1,[2,145],{73:$V81}),o($VV,[2,152]),{12:[1,290],15:[1,291]},{16:[1,292]},{12:[1,293]},{14:$VB,28:106,30:$VC,58:294,68:107,72:$VD,99:93,107:89,109:91,113:92,116:94,117:95,118:$VE,119:97,120:$VF,121:$VG,122:$VH,123:$VI,124:$VJ,125:$VK,127:109},{16:[1,295]},{16:[1,296],105:$V$,106:$V01},o($Vc1,[2,72]),{13:[1,297],105:$V$,106:$V01},{32:[1,298],71:$V51,72:$V61},o($Vd1,[2,123]),o($VV,[2,174]),o($Vg1,[2,176],{105:$V$,106:$V01}),o($VQ,[2,167]),{32:[1,299],105:$V$,106:$V01},o($VS,[2,164]),{10:$Vl,34:300},o($Vc,[2,22]),{10:[2,23]},{10:[2,25]},{10:[2,26]},{32:[2,37]},{16:[1,301]},o($Vg1,[2,39]),o($Vx,$Vy,{57:302,9:$Vz}),{43:[1,303]},o($Vl1,[2,35],{44:304,45:$Vm1}),o($Vx,[2,53]),{14:$VB,28:106,30:$VC,58:305,68:107,72:$VD,99:93,107:89,109:91,113:92,116:94,117:95,118:$VE,119:97,120:$VF,121:$VG,122:$VH,123:$VI,124:$VJ,125:$VK,127:109},{12:$Vr1,15:$Vs1,81:306},o($Vt1,[2,93],{105:$V$,106:$V01}),o($Vt1,[2,94]),{13:[1,309]},{14:[1,310]},{14:$VW,17:311,37:161,38:$VX,39:$VY,40:$VZ,41:$V_},o($Vj,[2,102]),{16:[1,312],105:$V$,106:$V01},{2:$VL,12:[2,108],14:$V2,20:121,21:122,22:123,23:124,24:125,25:126,26:127,27:128,28:129,50:18,51:$V4,52:$V5,62:313,63:120,64:$VM,65:$VN,66:$VO,67:20,68:19,78:21,83:23,86:33,87:$V6,88:$V7,93:$V8,94:$V9,95:$Va,104:$Vb,127:32},o($Vb1,[2,106],{50:18,68:19,67:20,78:21,83:23,127:32,86:33,63:120,20:121,21:122,22:123,23:124,24:125,25:126,26:127,27:128,28:129,62:314,2:$VL,14:$V2,51:$V4,52:$V5,64:$VM,65:$VN,66:$VO,87:$V6,88:$V7,93:$V8,94:$V9,95:$Va,104:$Vb}),{14:$VP,67:316,68:137,97:315,127:109},{10:$Vl,34:317},{13:[2,180]},o($Vc,[2,21]),{14:$VW,17:318,37:161,38:$VX,39:$VY,40:$VZ,41:$V_},o($Vx,[2,49]),o($Vl1,[2,31]),o($Vl1,[2,34]),o($V11,[2,126]),o($Vo1,[2,90]),{14:[1,319]},o($Vo1,[2,92]),o($Vc,[2,3]),{16:[1,320]},o($Vt1,[2,6]),o($Vb1,[2,104],{50:18,68:19,67:20,78:21,83:23,127:32,86:33,63:120,20:121,21:122,22:123,23:124,24:125,25:126,26:127,27:128,28:129,62:321,2:$VL,14:$V2,51:$V4,52:$V5,64:$VM,65:$VN,66:$VO,87:$V6,88:$V7,93:$V8,94:$V9,95:$Va,104:$Vb}),{12:[2,107]},o($Vb1,[2,105]),{32:[1,322]},{32:[2,114]},o($Vj,[2,113]),o($Vg1,[2,40]),{16:[1,323]},{14:$VW,17:324,37:161,38:$VX,39:$VY,40:$VZ,41:$V_},o($Vb1,[2,103]),{10:$Vl,34:325},{10:$VA,14:$VB,28:106,30:$VC,58:288,60:289,68:107,72:$VD,80:326,99:93,107:89,109:91,113:92,116:94,117:95,118:$VE,119:97,120:$VF,121:$VG,122:$VH,123:$VI,124:$VJ,125:$VK,127:109},o($Vt1,[2,5]),o($Vj,[2,112]),{12:$Vr1,15:$Vs1,81:327},o($Vo1,[2,91])],
defaultActions: {3:[2,2],20:[2,85],21:[2,86],30:[2,41],31:[2,42],35:[2,1],36:[2,7],46:[2,84],49:[2,78],50:[2,79],51:[2,80],52:[2,81],53:[2,82],54:[2,83],56:[2,4],69:[2,177],76:[2,178],88:[2,88],136:[2,116],148:[2,179],172:[2,87],200:[2,111],217:[2,122],229:[2,36],276:[2,23],277:[2,25],278:[2,26],279:[2,37],299:[2,180],313:[2,107],316:[2,114]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

     var symbolt = new SymbolTable(null);
     //var global_var = [];
     var structures = [];
     var nuevo_arreglo = false;
     var existe = false;
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:// comentario simple línea
break;
case 1:// comentario multiple líneas
break;
case 2:return 102;
break;
case 3:return 103;
break;
case 4:return 73;
break;
case 5:return 71;
break;
case 6:return 72;   
break;
case 7:return 74;
break;
case 8:return 75;
break;
case 9:return 76;
break;
case 10:return 106;
break;
case 11:return 114;
break;
case 12:return 115;
break;
case 13:return 42;
break;
case 14:return 43;
break;
case 15:return 112;
break;
case 16:return 111;
break;
case 17:return 110;
break;
case 18:return 45;     
break;
case 19:return 46;
break;
case 20:return 10;     
break;
case 21:return 12;
break;
case 22:return 30;     
break;
case 23:return 32;
break;
case 24:return 15;
break;
case 25:return 129;
break;
case 26:return 9;
break;
case 27:return 13;
break;
case 28:return 16;
break;
case 29:return 118;
break;
case 30:return 108;
break;
case 31:return 105;
break;
case 32:return 125;
break;
case 33:return 124;
break;
case 34:return 29;
break;
case 35:return 41;
break;
case 36:return 38;
break;
case 37:return 52;
break;
case 38:return 51;
break;
case 39:return 7;
break;
case 40:return 40;
break;
case 41:return 122;
break;
case 42:return 123;
break;
case 43:return 87;
break;
case 44:return 85;
break;
case 45:return 88;
break;
case 46:return 91;
break;
case 47:return 92;
break;
case 48:return 64;
break;
case 49:return 65;
break;
case 50:return 66;
break;
case 51:return 104;
break;
case 52:return 36;
break;
case 53:return 95;
break;
case 54:return 93;
break;
case 55:return 94;
break;
case 56:return 39;
break;
case 57:return 101;
break;
case 58:return 100;
break;
case 59:return 137;
break;
case 60:return 130;
break;
case 61:return 131;
break;
case 62:return 139;
break;
case 63:
break;
case 64:return 120;
break;
case 65:return 121;
break;
case 66:return 14;
break;
case 67:return 5;
break;
case 68: try{ add_error_E( {error: yy_.yytext, type: 'LEXICO', line: yy_.yylloc.first_line, column: yy_.yylloc.first_column} ); }catch(e){ console.log(e); } 
break;
}
},
rules: [/^(?:\/\/.*)/,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/,/^(?:\+\+)/,/^(?:--)/,/^(?:\*\*)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:\?)/,/^(?:>=)/,/^(?:<=)/,/^(?:<)/,/^(?:>)/,/^(?:===)/,/^(?:==)/,/^(?:!=)/,/^(?:\[)/,/^(?:\])/,/^(?:\{)/,/^(?:\})/,/^(?:\()/,/^(?:\))/,/^(?:,)/,/^(?:\.)/,/^(?:=)/,/^(?:;)/,/^(?::)/,/^(?:!)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:undefined\b)/,/^(?:null\b)/,/^(?:function\b)/,/^(?:Array\b)/,/^(?:number\b)/,/^(?:let\b)/,/^(?:const\b)/,/^(?:type\b)/,/^(?:string\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:default\b)/,/^(?:break\b)/,/^(?:continue\b)/,/^(?:return\b)/,/^(?:console\.log\b)/,/^(?:void\b)/,/^(?:for\b)/,/^(?:while\b)/,/^(?:do\b)/,/^(?:boolean\b)/,/^(?:in\b)/,/^(?:of\b)/,/^(?:push\b)/,/^(?:pop\b)/,/^(?:length\b)/,/^(?:graficar_ts\b)/,/^(?:[ \r\t\n]+)/,/^(?:[0-9]+\.[0-9]+\b|[0-9]+\b)/,/^(?:([\"](\\"|[^"])*[^\\][\"])|[\"][\"]|[\'][^']*[\']|`[^`]*`)/,/^(?:([a-zA-Z"_"])[a-z0-9A-Z"_""ñ""Ñ"]*)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = interprete;
exports.Parser = interprete.Parser;
exports.parse = function () { return interprete.parse.apply(interprete, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}
