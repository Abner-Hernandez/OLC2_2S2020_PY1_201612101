/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
import { add_error_T } from './clases/Reports';
import { add_simbol_T } from './clases/Reports';
export var grammar = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,17],$V1=[1,23],$V2=[1,30],$V3=[1,18],$V4=[1,32],$V5=[1,33],$V6=[1,35],$V7=[1,25],$V8=[1,26],$V9=[1,27],$Va=[1,28],$Vb=[1,29],$Vc=[1,31],$Vd=[2,5,7,8,29,60,61,95,96,101,102,103,111,144],$Ve=[1,51],$Vf=[1,52],$Vg=[1,53],$Vh=[1,54],$Vi=[1,55],$Vj=[1,56],$Vk=[2,5,7,8,12,29,60,61,72,73,74,95,96,99,100,101,102,103,111,144],$Vl=[1,63],$Vm=[1,66],$Vn=[9,79,80,81,82,83,84],$Vo=[2,183],$Vp=[1,69],$Vq=[1,75],$Vr=[1,76],$Vs=[1,77],$Vt=[1,74],$Vu=[2,5,7,8,12,29,60,61,72,73,74,93,95,96,99,100,101,102,103,111,144],$Vv=[19,107,108],$Vw=[2,59],$Vx=[1,83],$Vy=[13,19,107,108],$Vz=[2,67],$VA=[1,86],$VB=[1,110],$VC=[1,92],$VD=[1,102],$VE=[1,108],$VF=[1,101],$VG=[1,98],$VH=[1,100],$VI=[1,103],$VJ=[1,104],$VK=[1,105],$VL=[1,107],$VM=[1,135],$VN=[1,131],$VO=[1,132],$VP=[1,133],$VQ=[1,140],$VR=[9,12,13,14,19,33,51,52,55,79,80,81,82,83,84,107,108,109,110,113,114,116,118,119,120,122,123],$VS=[19,33],$VT=[1,149],$VU=[1,150],$VV=[12,13,14,19,33,51,52,55,79,80,81,82,83,84,107,108,113,114,116,118,119,120,122,123],$VW=[1,160],$VX=[1,169],$VY=[1,166],$VZ=[1,167],$V_=[1,168],$V$=[1,170],$V01=[1,171],$V11=[1,164],$V21=[1,176],$V31=[1,177],$V41=[12,13,14,19,33,55,107,108,113,114],$V51=[12,13,14,19,33,55,107,108,113,114,116],$V61=[12,13,14,19,33,55,107,108,113,114,116,118,119,120],$V71=[12,13,14,19,33,51,52,55,107,108,113,114,116,118,119,120,122,123],$V81=[12,13,14,19,33,51,52,55,79,80,107,108,113,114,116,118,119,120,122,123],$V91=[1,194],$Va1=[1,198],$Vb1=[1,202],$Vc1=[12,99,100],$Vd1=[2,8,12,29,60,61,72,73,74,95,96,99,100,101,102,103,111,144],$Ve1=[1,227],$Vf1=[1,228],$Vg1=[2,35],$Vh1=[1,234],$Vi1=[1,237],$Vj1=[2,51],$Vk1=[9,10,12,13,19,33,52,107,108],$Vl1=[1,244],$Vm1=[9,10,12,13,19,33,52,54,107,108],$Vn1=[2,5,7,8,12,13,19,29,60,61,72,73,74,95,96,99,100,101,102,103,107,108,111,144],$Vo1=[9,12,13,14,19,33,51,52,55,79,80,81,82,83,84,107,108,109,110,113,114,116,118,119,120,122,123,137],$Vp1=[1,281],$Vq1=[12,13,14,19,33,51,52,55,79,80,82,83,84,107,108,113,114,116,118,119,120,122,123],$Vr1=[1,313],$Vs1=[13,33],$Vt1=[1,321],$Vu1=[1,320],$Vv1=[12,13],$Vw1=[2,5,7,8,12,29,60,61,72,73,74,95,96,101,102,103,111,144],$Vx1=[2,8,12,29,60,61,72,73,74,95,96,101,102,103,111,144];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"ini":3,"INSTRUCTIONSG":4,"EOF":5,"DEFTYPES":6,"restype":7,"id":8,"igual":9,"corchetea":10,"ATTRIB":11,"corchetec":12,"coma":13,"dospuntos":14,"TYPES":15,"INSTRUCTIONG":16,"FUNCTIONG":17,"DECLARATION":18,"puntocoma":19,"ASSIGMENTWITHTYPE":20,"IF":21,"SWITCH":22,"WHILE":23,"DOWHILE":24,"FOR":25,"PRINT":26,"CALLF":27,"GRAFICAR":28,"resfunction":29,"FIDG":30,"parenta":31,"LISTAPARAMETROS":32,"parentc":33,"RETURNT":34,"BLOCKF":35,"FUNCTIONL":36,"FIDL":37,"BLOCK2F":38,"INSTRUCTIONSF":39,"INSTRUCTIONF":40,"INSTRUCTION":41,"TYPESF":42,"resvoid":43,"TYPE":44,"resinteger":45,"resboolean":46,"resstring":47,"resnumber":48,"resundefined":49,"resarray":50,"menor":51,"mayor":52,"MULTIDIMENSION":53,"llavea":54,"llavec":55,"LSPBETHA":56,"LISTAPARAMETROSPRIM":57,"LSALPHA":58,"TYPEVAR":59,"resconst":60,"reslet":61,"LISTID":62,"DECBETHA":63,"LISTIDPRIM":64,"DECALPHA":65,"ASSVALUE":66,"EXPRT":67,"DECASSTYPE":68,"BLOCK":69,"BLOCK2":70,"INSTRUCTIONS":71,"resbreak":72,"rescontinue":73,"resreturn":74,"ASSIGNMENT":75,"IDVALOR":76,"OPERADOR":77,"DECINC":78,"suma":79,"resta":80,"potencia":81,"multiplicacion":82,"slash":83,"modulo":84,"CONTENTASWT":85,"IDVALORASS":86,"ASSIGNMENTTYPE":87,"VALUETYPE":88,"ASSIGNMENTTYPEPRIM":89,"PARAMETROUNITARIO":90,"CELSE":91,"ELSE":92,"reselse":93,"IFF":94,"resif":95,"resswitch":96,"CASES":97,"DEFAULT":98,"rescase":99,"resdefault":100,"reswhile":101,"resdo":102,"resfor":103,"DEC":104,"ASSIG":105,"FINON":106,"resof":107,"resin":108,"incremento":109,"decremento":110,"resprint":111,"DATAPRINT":112,"or":113,"quest":114,"EXPRT2":115,"and":116,"EXPR":117,"diferente":118,"identico":119,"referencias":120,"EXPR1":121,"mayorigual":122,"menorigual":123,"EXP":124,"EXP1":125,"EXP2":126,"not":127,"EXP3":128,"number":129,"cadena":130,"restrue":131,"resfalse":132,"resnull":133,"IDVALOR2":134,"ARREGLO":135,"MOREPOSITION":136,"punto":137,"respop":138,"reslength":139,"PARAMETERS":140,"PARAMETERSPRIM":141,"IDVALOR2ASS":142,"respush":143,"resgraficar_ts":144,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"restype",8:"id",9:"igual",10:"corchetea",12:"corchetec",13:"coma",14:"dospuntos",19:"puntocoma",29:"resfunction",31:"parenta",33:"parentc",43:"resvoid",45:"resinteger",46:"resboolean",47:"resstring",48:"resnumber",49:"resundefined",50:"resarray",51:"menor",52:"mayor",54:"llavea",55:"llavec",60:"resconst",61:"reslet",72:"resbreak",73:"rescontinue",74:"resreturn",79:"suma",80:"resta",81:"potencia",82:"multiplicacion",83:"slash",84:"modulo",93:"reselse",95:"resif",96:"resswitch",99:"rescase",100:"resdefault",101:"reswhile",102:"resdo",103:"resfor",107:"resof",108:"resin",109:"incremento",110:"decremento",111:"resprint",113:"or",114:"quest",116:"and",118:"diferente",119:"identico",120:"referencias",122:"mayorigual",123:"menorigual",127:"not",129:"number",130:"cadena",131:"restrue",132:"resfalse",133:"resnull",137:"punto",138:"respop",139:"reslength",143:"respush",144:"resgraficar_ts"},
productions_: [0,[3,2],[3,1],[6,6],[11,5],[11,3],[4,2],[4,1],[16,1],[16,2],[16,1],[16,1],[16,1],[16,1],[16,1],[16,2],[16,1],[16,2],[16,2],[16,2],[16,1],[17,7],[17,6],[30,1],[36,7],[36,6],[37,1],[35,2],[38,2],[38,1],[39,2],[39,1],[40,1],[40,1],[34,2],[34,0],[42,1],[42,1],[44,1],[44,1],[44,1],[44,1],[44,1],[44,1],[15,4],[15,2],[15,1],[53,3],[53,2],[32,2],[57,2],[57,0],[56,3],[58,4],[59,1],[59,1],[18,2],[62,2],[64,2],[64,0],[63,4],[63,2],[65,5],[65,3],[66,2],[66,3],[66,2],[66,0],[69,2],[70,2],[70,1],[71,2],[71,1],[41,2],[41,1],[41,1],[41,1],[41,1],[41,2],[41,1],[41,2],[41,2],[41,2],[41,2],[41,3],[41,2],[41,2],[41,1],[75,4],[75,2],[75,3],[77,1],[77,1],[77,1],[77,1],[77,1],[77,1],[20,2],[20,2],[20,2],[85,4],[85,2],[68,2],[87,4],[89,5],[89,1],[88,1],[88,1],[90,3],[21,2],[91,3],[91,1],[92,2],[92,0],[94,3],[22,6],[97,5],[97,4],[97,4],[97,3],[98,3],[98,2],[98,0],[23,3],[24,4],[25,9],[25,7],[105,1],[104,1],[104,1],[104,0],[106,1],[106,1],[78,1],[78,1],[26,4],[112,3],[112,1],[67,3],[67,5],[67,1],[115,3],[115,1],[117,3],[117,3],[117,3],[117,1],[121,3],[121,3],[121,3],[121,3],[121,1],[124,3],[124,3],[124,1],[125,3],[125,3],[125,3],[125,3],[125,1],[126,2],[126,1],[128,1],[128,2],[128,2],[128,3],[128,1],[128,1],[128,1],[128,1],[128,1],[128,1],[128,1],[128,2],[76,2],[76,3],[136,4],[136,1],[135,4],[135,3],[134,2],[134,4],[134,2],[134,0],[27,3],[140,2],[140,1],[141,3],[141,1],[86,2],[86,3],[142,2],[142,5],[28,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
  add_traduction($$[$0-1]); return traduction; 
break;
case 3:
 this.$ = $$[$0-5] + " " + $$[$0-4] + " " + $$[$0-3] + " " + $$[$0-2] + "\n    " + $$[$0-1] + "\n" + $$[$0] + "\n"; 
break;
case 4:
 this.$ = $$[$0-4] + $$[$0-3] + "\n    " + $$[$0-2] + $$[$0-1] + " " + $$[$0]; /*structures[structures.length - 1].atributes.push({name: $$[$0-2], type: $$[$0]});*/ 
break;
case 5:
 this.$ = $$[$0-2] + $$[$0-1] + " " + $$[$0]; /*structures[structures.length - 1].atributes.push({name: $$[$0-2], type: $$[$0]});*/ 
break;
case 6:
 this.$ = "\n" +$$[$0-1] +  $$[$0]; /*inst global*/
break;
case 7:
 this.$ = $$[$0]; /*inst global*/
break;
case 8: case 10: case 11: case 12: case 13: case 14: case 16: case 32: case 33: case 36: case 37: case 46: case 74: case 75: case 76: case 77: case 79: case 106: case 107: case 111: case 131: case 132: case 140: case 142: case 146: case 151: case 154: case 159: case 161: case 162: case 166: case 167: case 168: case 169: case 170: case 171: case 172: case 177: case 186: case 188:
 this.$ = $$[$0]; 
break;
case 9:
 this.$ = $$[$0-1] + $$[$0];  for(var a of vars_a){ if(a.ambit == undefined) a.ambit = "global"; add_simbol_T(a); } vars_a = []; 
break;
case 15: case 78:
 this.$ = $$[$0-1]; 
break;
case 17: case 18: case 27: case 45: case 48: case 89: case 97: case 98: case 99: case 109: case 112: case 173: case 174: case 180: case 182: case 185: case 189: case 191:
 this.$ = $$[$0-1] + $$[$0]; 
break;
case 19: case 80: case 81: case 82: case 83: case 85: case 86:
 this.$ = $$[$0-1] + $$[$0] ; 
break;
case 20: case 87:
 try{ add_error_T( {error: yytext, type: 'SINTACTICO', line: _$[$0].first_line, column: _$[$0].first_column} ); }catch(e){} 
break;
case 21:
 this.$ = $$[$0-6] + " " + $$[$0-5] + " " + $$[$0-4] + " " + $$[$0-3] + " " + $$[$0-2] + " " + $$[$0-1] + " " + $$[$0]; if(local_function.length > 0){ for (let i = local_function.length -1 ; i > -1; i--) this.$ += "\n" + local_function[i];} parent_name = ""; 
break;
case 22:
 this.$ = $$[$0-5] + " " + $$[$0-4] + " " + $$[$0-3] + " " + $$[$0-2] + " " + $$[$0-1] + " " + $$[$0] ; if(local_function.length > 0){ for (let entry of local_function) this.$ += "\n" + entry;} parent_name = ""; 
break;
case 23:
 this.$ = $$[$0]; local_function = []; parent_name = []; parent_name.push($$[$0]); 
break;
case 24:
 name_function = ""; for(let i = parent_name.indexOf($$[$0-5]); i > 0 ; i--){ name_function = "___" + parent_name[i] + name_function;} name_function =  parent_name[0] + name_function; this.$ = ""; local_function.push($$[$0-6] + " " + name_function + " " + $$[$0-4] + " " + $$[$0-3] + " " + $$[$0-2] + " " + $$[$0-1] + " " + $$[$0]); parent_name.pop();
break;
case 25:
 name_function = ""; for(let i = parent_name.indexOf($$[$0-4]); i > 0 ; i--){ name_function = "___" + parent_name[i] + name_function;} name_function =  parent_name[0] + name_function; this.$ = ""; local_function.push($$[$0-5] + " " + $$[$0-4] + " " + $$[$0-3] + " " + $$[$0-2] + " " + $$[$0-1] + " " + $$[$0]); parent_name.pop();
break;
case 26:
 this.$ = $$[$0]; parent_name.push($$[$0]); 
break;
case 28:
 $$[$0-1] = $$[$0-1].replace(/\n/g, "\n    "); this.$ = $$[$0-1] +  "\n" + $$[$0];  /*global*/
break;
case 29: case 70:
 this.$ = "\n" + $$[$0];
break;
case 30:
 this.$ = "\n" + $$[$0-1] + $$[$0]; /*ins local*/
break;
case 31:
 this.$ = "\n" + $$[$0]; /*ins local*/
break;
case 34: case 64: case 66: case 101: case 160: case 163: case 164:
 this.$ = $$[$0-1] + " " + $$[$0]; 
break;
case 35: case 67: case 113: case 183:
 this.$ = ""; 
break;
case 38: case 39: case 40: case 41: case 42: case 43: case 54: case 55: case 128: case 129: case 133: case 134:
this.$ = $$[$0];
break;
case 44: case 124: case 176: case 178: case 181:
 this.$ = $$[$0-3] + $$[$0-2] + $$[$0-1] + $$[$0]; 
break;
case 47: case 123: case 175: case 179: case 190: case 193:
 this.$ = $$[$0-2] + $$[$0-1] + $$[$0]; 
break;
case 49:
 this.$ = aux_string; 
break;
case 50: case 57: case 58:
 
break;
case 51:
 aux_string = $$[$0]; 
break;
case 52:
 this.$ = $$[$0-2] + $$[$0-1] + " " + $$[$0]; 
break;
case 53:
 this.$ = $$[$0-4]; this.$ += $$[$0-3] + " " + $$[$0-2] + $$[$0-1] + " " + $$[$0]; 
break;
case 56:
 this.$ = $$[$0-1] + " " + aux_string; aux_string = "";  /* for(var a of vars_a){a.type = $$[$0-1];} declaracion*/
break;
case 59:
 aux_string = $$[$0];
break;
case 60:
 this.$ = $$[$0-3] + $$[$0-2] + " " + $$[$0-1] + " " + $$[$0];  vars_a.push({name: $$[$0-3], type: $$[$0-1], ambit: undefined, row: _$[$0-1].first_line, column: _$[$0-1].first_column}); /*declaracion*/
break;
case 61:
 this.$ = $$[$0-1] + " " + $$[$0]; vars_a.push({name: $$[$0-1], type: "undefined", ambit: undefined, row: _$[$0-1].first_line, column: _$[$0-1].first_column}); /*declaracion*/
break;
case 62:
 this.$ = $$[$0-5]; this.$ += $$[$0-4] + " " + $$[$0-3] + $$[$0-2] + " " + $$[$0-1] + " " + $$[$0];  vars_a.push({name: $$[$0-3], type: undefined, ambit: undefined, row: _$[$0-2].first_line, column: _$[$0-2].first_column}); /*declaracion*/
break;
case 63:
 this.$ = $$[$0-3]; this.$ += $$[$0-2] + " " + $$[$0-1] + " " + $$[$0]; vars_a.push({name: $$[$0-1], type: "undefined", ambit: undefined, row: _$[$0-2].first_line, column: _$[$0-2].first_column});/*declaracion*/
break;
case 65: case 90: case 119: case 187:
 this.$ = $$[$0-2] + " " + $$[$0-1] + $$[$0]; 
break;
case 68:
 this.$ = " " + $$[$0-1] + $$[$0];  
break;
case 69:
 $$[$0-1] = $$[$0-1].replace(/\n/g, "\n    "); this.$ = $$[$0-1] + "\n" + $$[$0]; /*local*/
break;
case 71:
 this.$ = "\n" +  $$[$0-1] + $$[$0]; /*local*/
break;
case 72:
 this.$ = "\n" +  $$[$0]; /*local*/
break;
case 73:
 this.$ = $$[$0-1] + $$[$0]; for(var a of vars_a){ if(a.ambit == undefined) a.ambit = "local"; add_simbol_T(a); } vars_a = []; 
break;
case 84:
 this.$ = $$[$0-2] + " " + $$[$0-1] + $$[$0] ; 
break;
case 88:
 this.$ = $$[$0-3] + $$[$0-2] + $$[$0-1] + " " + $$[$0]; 
break;
case 91: case 92: case 93: case 94: case 95: case 96:
 this.$ = " " + $$[$0]; 
break;
case 100:
 this.$ = $$[$0-3] + " " + $$[$0-2] + $$[$0-1] + $$[$0]; 
break;
case 102:
 this.$ = $$[$0-1] +  "\n    " + $$[$0] ; 
break;
case 103:
 this.$ = $$[$0-3] + $$[$0-2] +  " " + $$[$0-1] + $$[$0] ; /*revision2*/  
break;
case 104:
 this.$ = $$[$0-4] + "\n    " + $$[$0-3] +  $$[$0-2] + " " +$$[$0-1] +  $$[$0]; /*revision1*/ 
break;
case 105:
 this.$ = "\n" + $$[$0]; /*revision3*/ 
break;
case 108:
 this.$ = $$[$0-2] + " " + $$[$0-1] + " " + $$[$0];  
break;
case 110:
 this.$ = $$[$0-2] + "\n" + $$[$0-1] +  " " + $$[$0]; 
break;
case 114: case 138: case 141: case 143: case 144: case 145: case 147: case 148: case 149: case 150: case 152: case 153: case 155: case 156: case 157: case 165:
 this.$ = $$[$0-2] + " " + $$[$0-1] + " " + $$[$0]; 
break;
case 115:
  this.$ = $$[$0-5] + " " + $$[$0-4] + " " + $$[$0-3] + "\n" + $$[$0-2] + $$[$0-1] + "\n" + $$[$0]; 
break;
case 116:
 this.$ = $$[$0-4] + " " + $$[$0-3] + " " + $$[$0-2] + "\n" + $$[$0-1] + $$[$0] + "\n"; 
break;
case 117:
 this.$ = $$[$0-3] + $$[$0-2] + " " + $$[$0-1] + $$[$0]; 
break;
case 118:
 this.$ = $$[$0-3] + " " + $$[$0-2] + $$[$0-1] + "\n    " + $$[$0] ; 
break;
case 120:
 this.$ = $$[$0-2] + $$[$0-1] + "\n" + $$[$0]; 
break;
case 121:
 this.$ = $$[$0-1] + $$[$0] + "\n"; 
break;
case 125:
 this.$ = $$[$0-8] + $$[$0-7] + $$[$0-6] + $$[$0-5] + " " + $$[$0-4] + " " + $$[$0-3] + " " + $$[$0-2] + $$[$0-1] + $$[$0];  
break;
case 126:
 this.$ = $$[$0-6] + $$[$0-5] + $$[$0-4] + $$[$0-3] + $$[$0-2] + $$[$0-1] + $$[$0] ;  
break;
case 127:
 this.$ = $$[$0];
break;
case 130:
this.$ = "";
break;
case 135:
 this.$ = $$[$0-3] + $$[$0-2] + $$[$0-1] + $$[$0]; /*print*/
break;
case 136:
 this.$ = $$[$0-2] + $$[$0-1] + " " + $$[$0]; /*print*/
break;
case 137:
 this.$ = $$[$0]; /*print*/
break;
case 139:
 this.$ = $$[$0-4] + " " + $$[$0-3] + " " + $$[$0-2] + " " + $$[$0-1] + " " + $$[$0]; /*ternario*/
break;
case 158:
 this.$ = $$[$0-2] + " " + $$[$0-1] + " " + $$[$0]; /*potencia*/
break;
case 184:
 this.$ = $$[$0-2] + $$[$0-1] + $$[$0]; /*callf*/ 
break;
case 192:
 this.$ = $$[$0-4] + $$[$0-3] + $$[$0-2] + $$[$0-1] + $$[$0]; 
break;
}
},
table: [{2:$V0,3:1,4:2,5:[1,3],6:8,7:$V1,8:$V2,16:4,17:5,18:6,20:7,21:9,22:10,23:11,24:12,25:13,26:14,27:15,28:16,29:$V3,59:19,60:$V4,61:$V5,75:21,76:20,86:22,91:24,94:34,95:$V6,96:$V7,101:$V8,102:$V9,103:$Va,111:$Vb,144:$Vc},{1:[3]},{5:[1,36]},{1:[2,2]},{2:$V0,4:37,5:[2,7],6:8,7:$V1,8:$V2,16:4,17:5,18:6,20:7,21:9,22:10,23:11,24:12,25:13,26:14,27:15,28:16,29:$V3,59:19,60:$V4,61:$V5,75:21,76:20,86:22,91:24,94:34,95:$V6,96:$V7,101:$V8,102:$V9,103:$Va,111:$Vb,144:$Vc},o($Vd,[2,8]),{19:[1,38]},o($Vd,[2,10]),o($Vd,[2,11]),o($Vd,[2,12]),o($Vd,[2,13]),o($Vd,[2,14]),{19:[1,39]},o($Vd,[2,16]),{19:[1,40]},{19:[1,41]},{19:[1,42]},o($Vd,[2,20]),{8:[1,44],30:43},{8:[1,47],62:45,63:46},{9:[1,50],77:49,79:$Ve,80:$Vf,81:$Vg,82:$Vh,83:$Vi,84:$Vj,85:48},{19:[1,57]},{19:[1,58]},{8:[1,59]},o($Vk,[2,113],{92:60,93:[1,61]}),{31:$Vl,90:62},{31:$Vl,90:64},{10:$Vm,69:65},{31:[1,67]},{31:[1,68]},o($Vn,$Vo,{134:70,135:71,78:72,142:73,31:$Vp,54:$Vq,109:$Vr,110:$Vs,137:$Vt}),{31:[1,78]},{8:[2,54]},{8:[2,55]},o($Vu,[2,111]),{31:$Vl,90:79},{1:[2,1]},{5:[2,6]},o($Vd,[2,9]),o($Vd,[2,15]),o($Vd,[2,17]),o($Vd,[2,18]),o($Vd,[2,19]),{31:[1,80]},{31:[2,23]},o($Vv,[2,56]),o($Vv,$Vw,{64:81,65:82,13:$Vx}),o($Vy,$Vz,{66:85,9:$VA,14:[1,84]}),o($Vk,[2,97]),{9:[1,87]},{8:$VB,10:$VC,27:106,31:$VD,49:$VE,54:[1,89],67:88,68:90,76:109,80:$VF,115:91,117:93,121:94,124:95,125:96,126:97,127:$VG,128:99,129:$VH,130:$VI,131:$VJ,132:$VK,133:$VL},{9:[2,91]},{9:[2,92]},{9:[2,93]},{9:[2,94]},{9:[2,95]},{9:[2,96]},o($Vk,[2,98]),o($Vk,[2,99]),{9:[1,111]},o($Vk,[2,109]),{10:$Vm,69:113,94:112,95:$V6},{10:[1,114]},{8:$VB,27:106,31:$VD,49:$VE,67:115,76:109,80:$VF,115:91,117:93,121:94,124:95,125:96,126:97,127:$VG,128:99,129:$VH,130:$VI,131:$VJ,132:$VK,133:$VL},{10:$Vm,69:116},{101:[1,117]},{2:$VM,8:$V2,12:[1,120],18:122,20:123,21:124,22:125,23:126,24:127,25:128,26:129,27:130,28:134,41:121,59:19,60:$V4,61:$V5,70:118,71:119,72:$VN,73:$VO,74:$VP,75:21,76:20,86:22,91:24,94:34,95:$V6,96:$V7,101:$V8,102:$V9,103:$Va,111:$Vb,144:$Vc},{8:$VQ,18:137,19:[2,130],59:19,60:$V4,61:$V5,75:138,76:139,104:136},{8:$VB,27:106,31:$VD,49:$VE,67:142,76:109,80:$VF,112:141,115:91,117:93,121:94,124:95,125:96,126:97,127:$VG,128:99,129:$VH,130:$VI,131:$VJ,132:$VK,133:$VL},{8:$VB,27:106,31:$VD,33:[1,145],49:$VE,67:144,76:109,80:$VF,115:91,117:93,121:94,124:95,125:96,126:97,127:$VG,128:99,129:$VH,130:$VI,131:$VJ,132:$VK,133:$VL,140:143},o($VR,[2,174]),o($Vn,$Vo,{134:146,142:147,137:$Vt}),o($VS,[2,89]),{19:[2,189]},{8:[1,153],76:148,86:151,138:$VT,139:$VU,143:[1,152]},{8:$VB,27:106,31:$VD,49:$VE,67:154,76:109,80:$VF,115:91,117:93,121:94,124:95,125:96,126:97,127:$VG,128:99,129:$VH,130:$VI,131:$VJ,132:$VK,133:$VL},o($VV,[2,133]),o($VV,[2,134]),{33:[1,155]},{10:$Vm,69:156},{8:$VW,32:157,33:[1,158],56:159},o($Vv,[2,57]),o($Vv,$Vw,{65:82,64:161,13:$Vx}),{8:[1,162]},{8:$VX,15:163,44:165,45:$VY,46:$VZ,47:$V_,48:$V$,49:$V01,50:$V11},o($Vy,[2,61]),{8:$VB,10:$VC,27:106,31:$VD,49:$VE,54:[1,173],67:172,68:174,76:109,80:$VF,115:91,117:93,121:94,124:95,125:96,126:97,127:$VG,128:99,129:$VH,130:$VI,131:$VJ,132:$VK,133:$VL},{8:$VB,27:106,31:$VD,49:$VE,67:175,76:109,80:$VF,115:91,117:93,121:94,124:95,125:96,126:97,127:$VG,128:99,129:$VH,130:$VI,131:$VJ,132:$VK,133:$VL},o($VS,[2,90],{113:$V21,114:$V31}),{55:[1,178]},o($Vk,[2,101]),o($V41,[2,140],{116:[1,179]}),{8:[1,181],87:180},o($V51,[2,142],{118:[1,182],119:[1,183],120:[1,184]}),o($V61,[2,146],{51:[1,186],52:[1,185],122:[1,187],123:[1,188]}),o($V71,[2,151],{79:[1,189],80:[1,190]}),o($V81,[2,154],{81:$V91,82:[1,191],83:[1,192],84:[1,193]}),o($VV,[2,159]),{8:$VB,27:106,31:$VD,49:$VE,76:109,80:$VF,126:195,127:$VG,128:99,129:$VH,130:$VI,131:$VJ,132:$VK,133:$VL},o($VV,[2,161]),o($VV,[2,162]),{8:$Va1,76:197,129:[1,196]},{8:$VB,27:106,31:$VD,49:$VE,67:199,76:109,80:$VF,115:91,117:93,121:94,124:95,125:96,126:97,127:$VG,128:99,129:$VH,130:$VI,131:$VJ,132:$VK,133:$VL},o($VV,[2,166]),o($VV,[2,167]),o($VV,[2,168]),o($VV,[2,169]),o($VV,[2,170]),o($VV,[2,171]),o($VV,[2,172],{78:200,109:$Vr,110:$Vs}),o([12,13,14,19,33,51,52,55,79,80,81,82,83,84,107,108,109,110,113,114,116,118,119,120,122,123],$Vo,{134:70,135:201,31:$Vp,54:$Vq,137:$Vb1}),{10:[1,203]},o($Vu,[2,110]),o($Vk,[2,112]),{97:204,99:[1,205]},{33:[1,206],113:$V21,114:$V31},o($Vk,[2,123]),{31:$Vl,90:207},o($Vu,[2,68]),{12:[1,208]},o($Vu,[2,70]),o($Vc1,[2,72],{59:19,76:20,75:21,86:22,91:24,94:34,41:121,18:122,20:123,21:124,22:125,23:126,24:127,25:128,26:129,27:130,28:134,71:209,2:$VM,8:$V2,60:$V4,61:$V5,72:$VN,73:$VO,74:$VP,95:$V6,96:$V7,101:$V8,102:$V9,103:$Va,111:$Vb,144:$Vc}),{19:[1,210]},o($Vd1,[2,74]),o($Vd1,[2,75]),o($Vd1,[2,76]),o($Vd1,[2,77]),{19:[1,211]},o($Vd1,[2,79]),{19:[1,212]},{19:[1,213]},{19:[1,214]},{19:[1,215]},{8:$VB,19:[1,217],27:106,31:$VD,49:$VE,67:216,76:109,80:$VF,115:91,117:93,121:94,124:95,125:96,126:97,127:$VG,128:99,129:$VH,130:$VI,131:$VJ,132:$VK,133:$VL},{19:[1,218]},o($Vd1,[2,87]),{19:[1,219]},{19:[2,128],106:220,107:[1,221],108:[1,222]},{19:[2,129]},{9:[1,223],77:49,79:$Ve,80:$Vf,81:$Vg,82:$Vh,83:$Vi,84:$Vj},o($Vn,$Vo,{134:70,78:72,135:201,54:$Vq,109:$Vr,110:$Vs,137:$Vb1}),{33:[1,224]},{13:[1,225],33:[2,137],113:$V21,114:$V31},o($VV,[2,184]),{13:$Ve1,33:$Vf1,113:$V21,114:$V31,141:226},o($VV,[2,186]),o($VR,[2,175]),{19:[2,190]},o($VR,[2,180]),{31:[1,229]},o($VR,[2,182]),{19:[2,191]},{31:[1,230]},o($Vn,$Vo,{134:70,135:71,142:73,54:$Vq,137:$Vt}),{55:[1,231],113:$V21,114:$V31},{19:[2,193]},o($Vu,[2,114]),{33:[1,232]},{10:$Vg1,14:$Vh1,34:233},{13:$Vi1,33:$Vj1,57:235,58:236},{14:[1,238]},o($Vv,[2,58]),o($Vy,$Vz,{66:240,9:$VA,14:[1,239]}),o($Vy,$Vz,{66:241,9:$VA}),{51:[1,242]},o($Vk1,[2,46],{53:243,54:$Vl1}),o($Vm1,[2,38]),o($Vm1,[2,39]),o($Vm1,[2,40]),o($Vm1,[2,41]),o($Vm1,[2,42]),o($Vm1,[2,43]),o($Vy,[2,64],{113:$V21,114:$V31}),{55:[1,245]},o($Vy,[2,66]),o($VS,[2,88],{113:$V21,114:$V31}),{8:$VB,27:106,31:$VD,49:$VE,67:246,76:109,80:$VF,115:91,117:93,121:94,124:95,125:96,126:97,127:$VG,128:99,129:$VH,130:$VI,131:$VJ,132:$VK,133:$VL},{8:$VB,27:106,31:$VD,49:$VE,67:247,76:109,80:$VF,115:91,117:93,121:94,124:95,125:96,126:97,127:$VG,128:99,129:$VH,130:$VI,131:$VJ,132:$VK,133:$VL},{19:[1,248]},{8:$VB,27:106,31:$VD,49:$VE,76:109,80:$VF,115:249,117:93,121:94,124:95,125:96,126:97,127:$VG,128:99,129:$VH,130:$VI,131:$VJ,132:$VK,133:$VL},o($Vn1,[2,102]),{14:[1,250]},{8:$VB,27:106,31:$VD,49:$VE,76:109,80:$VF,117:251,121:94,124:95,125:96,126:97,127:$VG,128:99,129:$VH,130:$VI,131:$VJ,132:$VK,133:$VL},{8:$VB,27:106,31:$VD,49:$VE,76:109,80:$VF,117:252,121:94,124:95,125:96,126:97,127:$VG,128:99,129:$VH,130:$VI,131:$VJ,132:$VK,133:$VL},{8:$VB,27:106,31:$VD,49:$VE,76:109,80:$VF,117:253,121:94,124:95,125:96,126:97,127:$VG,128:99,129:$VH,130:$VI,131:$VJ,132:$VK,133:$VL},{8:$VB,27:106,31:$VD,49:$VE,76:109,80:$VF,121:254,124:95,125:96,126:97,127:$VG,128:99,129:$VH,130:$VI,131:$VJ,132:$VK,133:$VL},{8:$VB,27:106,31:$VD,49:$VE,76:109,80:$VF,121:255,124:95,125:96,126:97,127:$VG,128:99,129:$VH,130:$VI,131:$VJ,132:$VK,133:$VL},{8:$VB,27:106,31:$VD,49:$VE,76:109,80:$VF,121:256,124:95,125:96,126:97,127:$VG,128:99,129:$VH,130:$VI,131:$VJ,132:$VK,133:$VL},{8:$VB,27:106,31:$VD,49:$VE,76:109,80:$VF,121:257,124:95,125:96,126:97,127:$VG,128:99,129:$VH,130:$VI,131:$VJ,132:$VK,133:$VL},{8:$VB,27:106,31:$VD,49:$VE,76:109,80:$VF,124:258,125:96,126:97,127:$VG,128:99,129:$VH,130:$VI,131:$VJ,132:$VK,133:$VL},{8:$VB,27:106,31:$VD,49:$VE,76:109,80:$VF,124:259,125:96,126:97,127:$VG,128:99,129:$VH,130:$VI,131:$VJ,132:$VK,133:$VL},{8:$VB,27:106,31:$VD,49:$VE,76:109,80:$VF,125:260,126:97,127:$VG,128:99,129:$VH,130:$VI,131:$VJ,132:$VK,133:$VL},{8:$VB,27:106,31:$VD,49:$VE,76:109,80:$VF,125:261,126:97,127:$VG,128:99,129:$VH,130:$VI,131:$VJ,132:$VK,133:$VL},{8:$VB,27:106,31:$VD,49:$VE,76:109,80:$VF,125:262,126:97,127:$VG,128:99,129:$VH,130:$VI,131:$VJ,132:$VK,133:$VL},{8:$VB,27:106,31:$VD,49:$VE,76:109,80:$VF,125:263,126:97,127:$VG,128:99,129:$VH,130:$VI,131:$VJ,132:$VK,133:$VL},o($VV,[2,160]),o($VV,[2,163]),o($VV,[2,164]),o($VR,$Vo,{134:70,135:201,54:$Vq,137:$Vb1}),{33:[1,264],113:$V21,114:$V31},o($VV,[2,173]),o($VR,$Vo,{134:146,137:$Vb1}),{8:$Va1,76:148,138:$VT,139:$VU},{8:[1,266],11:265},{12:[2,122],98:267,99:[1,268],100:[1,269]},{8:$VB,27:106,31:$VD,49:$VE,67:270,76:109,80:$VF,115:91,117:93,121:94,124:95,125:96,126:97,127:$VG,128:99,129:$VH,130:$VI,131:$VJ,132:$VK,133:$VL},o([10,19],[2,108]),{19:[2,124]},o($Vu,[2,69]),o($Vc1,[2,71]),o($Vd1,[2,73]),o($Vd1,[2,78]),o($Vd1,[2,80]),o($Vd1,[2,81]),o($Vd1,[2,82]),o($Vd1,[2,83]),{19:[1,271],113:$V21,114:$V31},o($Vd1,[2,85]),o($Vd1,[2,86]),{8:$VB,27:106,31:$VD,49:$VE,67:272,76:109,80:$VF,115:91,117:93,121:94,124:95,125:96,126:97,127:$VG,128:99,129:$VH,130:$VI,131:$VJ,132:$VK,133:$VL},{8:$Va1,76:273},{8:[2,131]},{8:[2,132]},{8:$VB,27:106,31:$VD,49:$VE,67:88,76:109,80:$VF,115:91,117:93,121:94,124:95,125:96,126:97,127:$VG,128:99,129:$VH,130:$VI,131:$VJ,132:$VK,133:$VL},{19:[2,135]},{8:$VB,27:106,31:$VD,49:$VE,67:142,76:109,80:$VF,112:274,115:91,117:93,121:94,124:95,125:96,126:97,127:$VG,128:99,129:$VH,130:$VI,131:$VJ,132:$VK,133:$VL},o($VV,[2,185]),{8:$VB,27:106,31:$VD,49:$VE,67:275,76:109,80:$VF,115:91,117:93,121:94,124:95,125:96,126:97,127:$VG,128:99,129:$VH,130:$VI,131:$VJ,132:$VK,133:$VL},o($VV,[2,188]),{33:[1,276]},{8:$VB,27:106,31:$VD,49:$VE,67:277,76:109,80:$VF,115:91,117:93,121:94,124:95,125:96,126:97,127:$VG,128:99,129:$VH,130:$VI,131:$VJ,132:$VK,133:$VL},o($Vo1,[2,179],{135:278,54:$Vq}),{10:$Vg1,14:$Vh1,34:279},{10:$Vp1,35:280},{8:$VX,15:283,42:282,43:[1,284],44:165,45:$VY,46:$VZ,47:$V_,48:$V$,49:$V01,50:$V11},{33:[2,49]},{13:$Vi1,33:$Vj1,57:285,58:236},{8:[1,286]},{8:$VX,15:287,44:165,45:$VY,46:$VZ,47:$V_,48:$V$,49:$V01,50:$V11},{8:$VX,15:288,44:165,45:$VY,46:$VZ,47:$V_,48:$V$,49:$V01,50:$V11},o($Vy,[2,63]),o($Vy,[2,60]),{8:$VX,15:289,44:165,45:$VY,46:$VZ,47:$V_,48:$V$,49:$V01,50:$V11},o($Vk1,[2,45]),{55:[1,290]},o($Vy,[2,65]),o($V41,[2,138]),{14:[1,291],113:$V21,114:$V31},o($Vk,[2,100]),o($V51,[2,141]),{8:$VB,10:$VC,27:106,31:$VD,49:$VE,67:293,68:294,76:109,80:$VF,88:292,115:91,117:93,121:94,124:95,125:96,126:97,127:$VG,128:99,129:$VH,130:$VI,131:$VJ,132:$VK,133:$VL},o($V61,[2,143]),o($V61,[2,144]),o($V61,[2,145]),o($V71,[2,147]),o($V71,[2,148]),o($V71,[2,149]),o($V71,[2,150]),o($V81,[2,152]),o($V81,[2,153]),o($Vq1,[2,155],{81:$V91}),o($Vq1,[2,156],{81:$V91}),o($Vq1,[2,157],{81:$V91}),o($Vq1,[2,158],{81:$V91}),o($VV,[2,165]),{12:[1,295],13:[1,296]},{14:[1,297]},{12:[1,298]},{8:$VB,27:106,31:$VD,49:$VE,67:299,76:109,80:$VF,115:91,117:93,121:94,124:95,125:96,126:97,127:$VG,128:99,129:$VH,130:$VI,131:$VJ,132:$VK,133:$VL},{14:[1,300]},{14:[1,301],113:$V21,114:$V31},o($Vd1,[2,84]),{19:[1,302],113:$V21,114:$V31},{33:[1,303]},{33:[2,136]},{13:$Ve1,33:$Vf1,113:$V21,114:$V31,141:304},o($VR,[2,181]),{33:[1,305],113:$V21,114:$V31},o($Vo1,[2,178]),{10:$Vp1,35:306},o($Vd,[2,22]),{2:$VM,8:$V2,12:[1,309],18:122,20:123,21:124,22:125,23:126,24:127,25:128,26:129,27:130,28:134,29:$Vr1,36:312,38:307,39:308,40:310,41:311,59:19,60:$V4,61:$V5,72:$VN,73:$VO,74:$VP,75:21,76:20,86:22,91:24,94:34,95:$V6,96:$V7,101:$V8,102:$V9,103:$Va,111:$Vb,144:$Vc},{10:[2,34]},{10:[2,36]},{10:[2,37]},{33:[2,50]},{14:[1,314]},o($Vs1,[2,52]),o($Vy,$Vz,{66:315,9:$VA}),{52:[1,316]},o($Vk1,[2,48],{53:317,54:$Vl1}),{8:$VB,27:106,31:$VD,49:$VE,67:318,76:109,80:$VF,115:91,117:93,121:94,124:95,125:96,126:97,127:$VG,128:99,129:$VH,130:$VI,131:$VJ,132:$VK,133:$VL},{12:$Vt1,13:$Vu1,89:319},o($Vv1,[2,106],{113:$V21,114:$V31}),o($Vv1,[2,107]),o($Vd,[2,3]),{8:[1,322]},{8:$VX,15:323,44:165,45:$VY,46:$VZ,47:$V_,48:$V$,49:$V01,50:$V11},o($Vk,[2,115]),{14:[1,324],113:$V21,114:$V31},{2:$VM,8:$V2,12:[2,121],18:122,20:123,21:124,22:125,23:126,24:127,25:128,26:129,27:130,28:134,41:121,59:19,60:$V4,61:$V5,71:325,72:$VN,73:$VO,74:$VP,75:21,76:20,86:22,91:24,94:34,95:$V6,96:$V7,101:$V8,102:$V9,103:$Va,111:$Vb,144:$Vc},o($Vc1,[2,119],{59:19,76:20,75:21,86:22,91:24,94:34,41:121,18:122,20:123,21:124,22:125,23:126,24:127,25:128,26:129,27:130,28:134,71:326,2:$VM,8:$V2,60:$V4,61:$V5,72:$VN,73:$VO,74:$VP,95:$V6,96:$V7,101:$V8,102:$V9,103:$Va,111:$Vb,144:$Vc}),{8:$VQ,75:328,76:139,105:327},{10:$Vm,69:329},o($VV,[2,187]),{19:[2,192]},o($Vd,[2,21]),o($Vw1,[2,27]),{12:[1,330]},o($Vw1,[2,29]),{2:$VM,8:$V2,12:[2,31],18:122,20:123,21:124,22:125,23:126,24:127,25:128,26:129,27:130,28:134,29:$Vr1,36:312,39:331,40:310,41:311,59:19,60:$V4,61:$V5,72:$VN,73:$VO,74:$VP,75:21,76:20,86:22,91:24,94:34,95:$V6,96:$V7,101:$V8,102:$V9,103:$Va,111:$Vb,144:$Vc},o($Vx1,[2,32]),o($Vx1,[2,33]),{8:[1,333],37:332},{8:$VX,15:334,44:165,45:$VY,46:$VZ,47:$V_,48:$V$,49:$V01,50:$V11},o($Vy,[2,62]),o($Vk1,[2,44]),o($Vk1,[2,47]),o($V41,[2,139]),o($Vn1,[2,103]),{8:[1,335]},o($Vn1,[2,105]),{14:[1,336]},o($Vv1,[2,5]),o($Vc1,[2,117],{59:19,76:20,75:21,86:22,91:24,94:34,41:121,18:122,20:123,21:124,22:125,23:126,24:127,25:128,26:129,27:130,28:134,71:337,2:$VM,8:$V2,60:$V4,61:$V5,72:$VN,73:$VO,74:$VP,95:$V6,96:$V7,101:$V8,102:$V9,103:$Va,111:$Vb,144:$Vc}),{12:[2,120]},o($Vc1,[2,118]),{33:[1,338]},{33:[2,127]},o($Vk,[2,126]),o($Vw1,[2,28]),{12:[2,30]},{31:[1,339]},{31:[2,26]},o($Vs1,[2,53]),{14:[1,340]},{8:$VX,15:341,44:165,45:$VY,46:$VZ,47:$V_,48:$V$,49:$V01,50:$V11},o($Vc1,[2,116]),{10:$Vm,69:342},{8:$VW,32:343,33:[1,344],56:159},{8:$VB,10:$VC,27:106,31:$VD,49:$VE,67:293,68:294,76:109,80:$VF,88:345,115:91,117:93,121:94,124:95,125:96,126:97,127:$VG,128:99,129:$VH,130:$VI,131:$VJ,132:$VK,133:$VL},o($Vv1,[2,4]),o($Vk,[2,125]),{33:[1,346]},{10:$Vg1,14:$Vh1,34:347},{12:$Vt1,13:$Vu1,89:348},{10:$Vg1,14:$Vh1,34:349},{10:$Vp1,35:350},o($Vn1,[2,104]),{10:$Vp1,35:351},o($Vx1,[2,25]),o($Vx1,[2,24])],
defaultActions: {3:[2,2],32:[2,54],33:[2,55],36:[2,1],37:[2,6],44:[2,23],51:[2,91],52:[2,92],53:[2,93],54:[2,94],55:[2,95],56:[2,96],73:[2,189],138:[2,129],147:[2,190],151:[2,191],155:[2,193],207:[2,124],221:[2,131],222:[2,132],224:[2,135],235:[2,49],274:[2,136],282:[2,34],283:[2,36],284:[2,37],285:[2,50],305:[2,192],325:[2,120],328:[2,127],331:[2,30],333:[2,26]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

     var local_function = [];
     var parent_name = [];
     var name_function = "";
     var traduction = "";
     var simbol_table = [];
     var errores = [];
     var vars_a = [];
     var aux_string = "";
     
     function add_traduction(content)
     {
          traduction += content;
     }
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:// comentario simple línea
break;
case 1:// comentario multiple líneas
break;
case 2:return 109;
break;
case 3:return 110;
break;
case 4:return 79;
break;
case 5:return 80;   
break;
case 6:return 81;
break;
case 7:return 82;
break;
case 8:return 83;
break;
case 9:return 84;
break;
case 10:return 114;
break;
case 11:return 122;
break;
case 12:return 123;
break;
case 13:return 51;
break;
case 14:return 52;
break;
case 15:return 120;
break;
case 16:return 119;
break;
case 17:return 118;
break;
case 18:return 54;     
break;
case 19:return 55;
break;
case 20:return 10;     
break;
case 21:return 12;
break;
case 22:return 31;     
break;
case 23:return 33;
break;
case 24:return 13;
break;
case 25:return 137;
break;
case 26:return 9;
break;
case 27:return 19;
break;
case 28:return 14;
break;
case 29:return 127;
break;
case 30:return 116;
break;
case 31:return 113;
break;
case 32:return 133;
break;
case 33:return 49;
break;
case 34:return 29;
break;
case 35:return 50;
break;
case 36:return 48;
break;
case 37:return 61;
break;
case 38:return 60;
break;
case 39:return 7;
break;
case 40:return 47;
break;
case 41:return 131;
break;
case 42:return 132;
break;
case 43:return 95;
break;
case 44:return 93;
break;
case 45:return 96;
break;
case 46:return 99;
break;
case 47:return 100;
break;
case 48:return 72;
break;
case 49:return 73;
break;
case 50:return 74;
break;
case 51:return 111;
break;
case 52:return 43;
break;
case 53:return 103;
break;
case 54:return 101;
break;
case 55:return 102;
break;
case 56:return 46;
break;
case 57:return 108;
break;
case 58:return 107;
break;
case 59:return 143;
break;
case 60:return 138;
break;
case 61:return 139;
break;
case 62:return 144;
break;
case 63:
break;
case 64:return 129;
break;
case 65:return 130;
break;
case 66:return 8;
break;
case 67:return 5;
break;
case 68: try{ add_error_T( {error: yy_.yytext, type: 'LEXICO', line: yy_.yylloc.first_line, column: yy_.yylloc.first_column} ); }catch(e){} 
break;
}
},
rules: [/^(?:\/\/.*)/,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/,/^(?:\+\+)/,/^(?:--)/,/^(?:\+)/,/^(?:-)/,/^(?:\*\*)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:\?)/,/^(?:>=)/,/^(?:<=)/,/^(?:<)/,/^(?:>)/,/^(?:===)/,/^(?:==)/,/^(?:!=)/,/^(?:\[)/,/^(?:\])/,/^(?:\{)/,/^(?:\})/,/^(?:\()/,/^(?:\))/,/^(?:,)/,/^(?:\.)/,/^(?:=)/,/^(?:;)/,/^(?::)/,/^(?:!)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:null\b)/,/^(?:undefined\b)/,/^(?:function\b)/,/^(?:Array\b)/,/^(?:number\b)/,/^(?:let\b)/,/^(?:const\b)/,/^(?:type\b)/,/^(?:string\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:default\b)/,/^(?:break\b)/,/^(?:continue\b)/,/^(?:return\b)/,/^(?:console\.log\b)/,/^(?:void\b)/,/^(?:for\b)/,/^(?:while\b)/,/^(?:do\b)/,/^(?:boolean\b)/,/^(?:in\b)/,/^(?:of\b)/,/^(?:push\b)/,/^(?:pop\b)/,/^(?:length\b)/,/^(?:graficar_ts\b)/,/^(?:[ \r\t\n]+)/,/^(?:[0-9]+\.[0-9]+\b|[0-9]+\b)/,/^(?:([\"](\\"|[^"])*[^\\][\"])|[\"][\"]|[\'][^']*[\']|`[^`]*`)/,/^(?:([a-zA-Z"_"])[a-z0-9A-Z"_""ñ""Ñ"]*)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = grammar;
exports.Parser = grammar.Parser;
exports.parse = function () { return grammar.parse.apply(grammar, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}
